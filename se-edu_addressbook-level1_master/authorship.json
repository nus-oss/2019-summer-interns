[
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 1 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "[[SettingUp]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "*Prerequisites*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "* JDK 11 or later"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* IntelliJ IDE"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "*Importing the project into IntelliJ*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ".. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `OK`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the project directory and click `OK`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Create project from existing sources` and click `Next`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". Rename the project if you want. Click `Next`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure that your src folder is checked. Keep clicking `Next`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Finish`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook saves data in a plain text file, one line for each person, in the format `NAME p/PHONE e/EMAIL`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Here is an example:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "John Doe p/98765432 e/johnd@gmail.com"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Jane Doe p/12346758 e/jane@gmail.com"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "All person data are loaded to memory at start up and written to the file after any command that mutates data."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "In-memory data are held in a `ArrayList\u003cString[]\u003e` where each `String[]` object represents a person."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*Windows*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a DOS window in the `test` folder"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `runtests.bat` script"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". If the script reports that there is no difference between `ACTUAL.TXT` and `EXPECTED.TXT`,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "the test has passed"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "*Mac/Unix/Linux*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a terminal window in the `test` folder"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `runtests.sh` script"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". If the script reports that there is no difference between `ACTUAL.TXT` and `EXPECTED.TXT`,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "the test has passed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "*Troubleshooting*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Problem: How do I examine the exact differences between `ACTUAL.TXT` and `EXPECTED.TXT`? +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Solution: You can use a diff/merge tool with a GUI e.g. WinMerge (on Windows)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Problem: The two files look exactly the same, but the test script reports they are different. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Solution: This can happen because the line endings used by Windows is different from Unix-based"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "OSes. Convert the `ACTUAL.TXT` to the format used by your OS using some https://kb.iu.edu/d/acux[utility]."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* Problem: Test fails during the very first time. +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Solution: The output of the very first test run could be slightly different because the program"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "creates a new storage file. Tests should pass from the 2nd run onwards."
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 2,
      "-": 66
    }
  },
  {
    "path": "src/seedu/addressbook/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * NOTE : \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is written in a procedural fashion (i.e. not Object-Oriented)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Yes, it is possible to write non-OO code using an OO language."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * NOTE : \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * This class header comment below is brief because details of how to"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * use this class are documented elsewhere."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is used to maintain a list of person data which are saved"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * in a text file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " **/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Default file path used if the user doesn\u0027t provide the file name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DEFAULT_STORAGE_FILEPATH \u003d \"addressbook.txt\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Version info of the program."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VERSION \u003d \"AddessBook Level 1 - Version 1.0\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * A decorative prefix added to the beginning of lines printed by AddressBook"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LINE_PREFIX \u003d \"|| \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * A platform independent line separator."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LS \u003d System.lineSeparator() + LINE_PREFIX;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * NOTE : \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * These messages shown to the user are defined in one place for convenient"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * editing and proof reading. Such messages are considered part of the UI"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * and may be subjected to review by UI experts or technical writers. Note"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * that Some of the strings below include \u0027%1$s\u0027 etc to mark the locations"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * at which java String.format(...) method can insert values."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_ADDED \u003d \"New person added: %1$s, Phone: %2$s, Email: %3$s\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_ADDRESSBOOK_CLEARED \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_COMMAND_HELP \u003d \"%1$s: %2$s\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_COMMAND_HELP_PARAMETERS \u003d \"\\tParameters: %1$s\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_COMMAND_HELP_EXAMPLE \u003d \"\\tExample: %1$s\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_DISPLAY_PERSON_DATA \u003d \"%1$s  Phone Number: %2$s  Email: %3$s\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_DISPLAY_LIST_ELEMENT_INDEX \u003d \"%1$d. \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_GOODBYE \u003d \"Exiting Address Book... Good bye!\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format: %1$s \" + LS + \"%2$s\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FILE \u003d \"The given file name [%1$s] is not a valid file name!\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_PROGRAM_ARGS \u003d \"Too many parameters! Correct program argument format:\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                                                            + LS + \"\\tjava AddressBook\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                                            + LS + \"\\tjava AddressBook [custom storage file path]\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_STORAGE_FILE_CONTENT \u003d \"Storage file has invalid content\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_PERSON_NOT_IN_ADDRESSBOOK \u003d \"Person could not be found in address book\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_ERROR_CREATING_STORAGE_FILE \u003d \"Error: unable to create file: %1$s\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_ERROR_MISSING_STORAGE_FILE \u003d \"Storage file missing: %1$s\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_ERROR_READING_FROM_FILE \u003d \"Unexpected error: unable to read from file: %1$s\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_ERROR_WRITING_TO_FILE \u003d \"Unexpected error: unable to write to file: %1$s\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_PERSONS_FOUND_OVERVIEW \u003d \"%1$d persons found!\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_STORAGE_FILE_CREATED \u003d \"Created new empty storage file: %1$s\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_WELCOME \u003d \"Welcome to your Address Book!\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_USING_DEFAULT_FILE \u003d \"Using default storage file : \" + DEFAULT_STORAGE_FILEPATH;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    // These are the prefix strings to define the data type of a command parameter"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PERSON_DATA_PREFIX_PHONE \u003d \"p/\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PERSON_DATA_PREFIX_EMAIL \u003d \"e/\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PERSON_STRING_REPRESENTATION \u003d \"%1$s \" // name"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                                                            + PERSON_DATA_PREFIX_PHONE + \"%2$s \" // phone"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                                                            + PERSON_DATA_PREFIX_EMAIL + \"%3$s\"; // email"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_ADD_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_ADD_DESC \u003d \"Adds a person to the address book.\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_ADD_PARAMETERS \u003d \"NAME \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                                                      + PERSON_DATA_PREFIX_PHONE + \"PHONE_NUMBER \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                                                      + PERSON_DATA_PREFIX_EMAIL + \"EMAIL\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_ADD_EXAMPLE \u003d COMMAND_ADD_WORD + \" John Doe p/98765432 e/johnd@gmail.com\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_FIND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_FIND_DESC \u003d \"Finds all persons whose names contain any of the specified \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                                        + \"keywords (case-sensitive) and displays them as a list with index numbers.\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_FIND_PARAMETERS \u003d \"KEYWORD [MORE_KEYWORDS]\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_FIND_EXAMPLE \u003d COMMAND_FIND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_LIST_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_LIST_DESC \u003d \"Displays all persons as a list with index numbers.\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_LIST_EXAMPLE \u003d COMMAND_LIST_WORD;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_DELETE_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_DELETE_DESC \u003d \"Deletes a person identified by the index number used in \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                                                    + \"the last find/list call.\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_DELETE_PARAMETER \u003d \"INDEX\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_DELETE_EXAMPLE \u003d COMMAND_DELETE_WORD + \" 1\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_CLEAR_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_CLEAR_DESC \u003d \"Clears address book permanently.\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_CLEAR_EXAMPLE \u003d COMMAND_CLEAR_WORD;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_HELP_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_HELP_DESC \u003d \"Shows program usage instructions.\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_HELP_EXAMPLE \u003d COMMAND_HELP_WORD;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_EXIT_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_EXIT_DESC \u003d \"Exits the program.\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_EXIT_EXAMPLE \u003d COMMAND_EXIT_WORD;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DIVIDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /* We use a String array to store details of a single person."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * The constants given below are the indexes for the different data elements of a person"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * used by the internal String[] storage format."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * For example, a person\u0027s name is stored as the 0th element in the array."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int PERSON_DATA_INDEX_NAME \u003d 0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int PERSON_DATA_INDEX_PHONE \u003d 1;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int PERSON_DATA_INDEX_EMAIL \u003d 2;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * The number of data elements for a single person."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int PERSON_DATA_COUNT \u003d 3;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Offset required to convert between 1-indexing and 0-indexing.COMMAND_"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the first non-whitespace character in a user\u0027s input line is this, that line will be ignored."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final char INPUT_COMMENT_MARKER \u003d \u0027#\u0027;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * This variable is declared for the whole class (instead of declaring it"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * inside the readUserCommand() method to facilitate automated testing using"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * the I/O redirection technique. If not, only the first line of the input"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * text file will be processed."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Scanner SCANNER \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * NOTE : \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that the type of the variable below can also be declared as List\u003cString[]\u003e, as follows:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     *    private static final List\u003cString[]\u003e ALL_PERSONS \u003d new ArrayList\u003c\u003e()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * That is because List is an interface implemented by the ArrayList class."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * In this code we use ArrayList instead because we wanted to to stay away from advanced concepts"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * such as interface inheritance."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * List of all persons in the address book."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ArrayList\u003cString[]\u003e ALL_PERSONS \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the most recent list of persons shown to the user as a result of a user command."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a subset of the full list. Deleting persons in the pull list does not delete"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * those persons from this list."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArrayList\u003cString[]\u003e latestPersonListingView \u003d getAllPersonsInAddressBook(); // initial view is of all"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * The path to the file used for storing person data."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String storageFilePath;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * NOTE : \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notice how this method solves the whole problem at a very high level."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * We can understand the high-level logic of the program by reading this"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * method alone."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the reader wants a deeper understanding of the solution, she can go"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * to the next level of abstraction by reading the methods that are"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * referenced by the high-level method below."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "     * Main entry point of the application."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "     * Initializes the application and starts the interaction with the user."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        showWelcomeMessage();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        processProgramArgs(args);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDataFromStorage();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            String userCommand \u003d getUserInput();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            echoUserCommand(userCommand);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedback \u003d executeCommand(userCommand);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            showResultToUser(feedback);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * NOTE : \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * The method header comment can be omitted if the method is trivial"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the header comment is going to be almost identical to the method"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * signature anyway."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showWelcomeMessage() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        showToUser(DIVIDER, DIVIDER, VERSION, MESSAGE_WELCOME, DIVIDER);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showResultToUser(String result) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        showToUser(result, DIVIDER);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * NOTE : \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parameter description can be omitted from the method header comment"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * if the parameter name is self-explanatory."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * In the method below, \u0027@param userInput\u0027 comment has been omitted."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Echoes the user input back to the user."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void echoUserCommand(String userCommand) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        showToUser(\"[Command entered:\" + userCommand + \"]\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Processes the program main method run arguments."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * If a valid storage file is specified, sets up that file for storage."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * Otherwise sets up the default file for storage."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full program arguments passed to application main method"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void processProgramArgs(String[] args) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        if (args.length \u003e\u003d 2) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            showToUser(MESSAGE_INVALID_PROGRAM_ARGS);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            exitProgram();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        if (args.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            setupGivenFileForStorage(args[0]);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        if (args.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            setupDefaultFileForStorage();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up the storage file based on the supplied file path."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the file if it is missing."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * Exits if the file name is not acceptable."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void setupGivenFileForStorage(String filePath) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidFilePath(filePath)) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            showToUser(String.format(MESSAGE_INVALID_FILE, filePath));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            exitProgram();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        storageFilePath \u003d filePath;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        createFileIfMissing(filePath);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the goodbye message and exits the runtime."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void exitProgram() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        showToUser(MESSAGE_GOODBYE, DIVIDER, DIVIDER);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up the storage based on the default file."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates file if missing."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     * Exits program if the file cannot be created."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void setupDefaultFileForStorage() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        showToUser(MESSAGE_USING_DEFAULT_FILE);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        storageFilePath \u003d DEFAULT_STORAGE_FILEPATH;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        createFileIfMissing(storageFilePath);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the given file path is valid."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     * A file path is valid if it has a valid parent directory as determined by {@link #hasValidParentDirectory}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     * and a valid file name as determined by {@link #hasValidFileName}."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isValidFilePath(String filePath) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        if (filePath \u003d\u003d null) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePathToValidate;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            filePathToValidate \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        return hasValidParentDirectory(filePathToValidate) \u0026\u0026 hasValidFileName(filePathToValidate);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the file path has a parent directory that exists."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean hasValidParentDirectory(Path filePath) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDirectory \u003d filePath.getParent();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        return parentDirectory \u003d\u003d null || Files.isDirectory(parentDirectory);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if file path has a valid file name."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "     * File name is valid if it has an extension and no reserved characters."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reserved characters are OS-dependent."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "     * If a file already exists, it must be a regular file."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean hasValidFileName(Path filePath) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath.getFileName().toString().lastIndexOf(\u0027.\u0027) \u003e 0"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (!Files.exists(filePath) || Files.isRegularFile(filePath));"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialises the in-memory data using the storage file."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumption: The file exists."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void loadDataFromStorage() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        initialiseAddressBookModel(loadPersonsFromFile(storageFilePath));"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "     *           COMMAND LOGIC"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command as specified by the {@code userInputString}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInputString  raw input from user"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return  feedback about how the command was executed"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String executeCommand(String userInputString) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] commandTypeAndParams \u003d splitCommandWordAndArgs(userInputString);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandType \u003d commandTypeAndParams[0];"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandArgs \u003d commandTypeAndParams[1];"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        case COMMAND_ADD_WORD:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "            return executeAddPerson(commandArgs);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        case COMMAND_FIND_WORD:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "            return executeFindPersons(commandArgs);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        case COMMAND_LIST_WORD:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "            return executeListAllPersonsInAddressBook();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        case COMMAND_DELETE_WORD:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "            return executeDeletePerson(commandArgs);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        case COMMAND_CLEAR_WORD:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "            return executeClearAddressBook();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        case COMMAND_HELP_WORD:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            return getUsageInfoForAllCommands();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        case COMMAND_EXIT_WORD:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "            executeExitProgramRequest();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "            return getMessageForInvalidCommandInput(commandType, getUsageInfoForAllCommands());"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "     * Splits raw user input into command word and command arguments string"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return  size 2 array; first element is the command type and second element is the arguments string"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String[] splitCommandWordAndArgs(String rawUserInput) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] split \u003d rawUserInput.trim().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        return split.length \u003d\u003d 2 ? split : new String[] { split[0] , \"\" }; // else case: no parameters"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a generic feedback message for an invalid command from user, with instructions for correct usage."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param correctUsageInfo message showing the correct usage"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return invalid command args feedback message"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getMessageForInvalidCommandInput(String userCommand, String correctUsageInfo) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(MESSAGE_INVALID_COMMAND_FORMAT, userCommand, correctUsageInfo);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person (specified by the command args) to the address book."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "     * The entire command arguments string is treated as a string representation of the person to add."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandArgs full command args string from the user"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback display message for the operation result"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String executeAddPerson(String commandArgs) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        // try decoding a person from the raw args"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        final Optional\u003cString[]\u003e decodeResult \u003d decodePersonFromString(commandArgs);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "        // checks if args are valid (decode result will not be present if the person is invalid)"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!decodeResult.isPresent()) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "            return getMessageForInvalidCommandInput(COMMAND_ADD_WORD, getUsageInfoForAddCommand());"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        // add the person as specified"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] personToAdd \u003d decodeResult.get();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        addPersonToAddressBook(personToAdd);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        return getMessageForSuccessfulAddPerson(personToAdd);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a feedback message for a successful add person command execution."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addedPerson person who was successfully added"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return successful add person feedback message"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "     * @see #executeAddPerson(String)"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getMessageForSuccessfulAddPerson(String[] addedPerson) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(MESSAGE_ADDED,"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "                getNameFromPerson(addedPerson), getPhoneFromPerson(addedPerson), getEmailFromPerson(addedPerson));"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "     * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandArgs full command args string from the user"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback display message for the operation result"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String executeFindPersons(String commandArgs) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keywords \u003d extractKeywordsFromFindPersonArgs(commandArgs);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cString[]\u003e personsFound \u003d getPersonsWithNameContainingAnyKeyword(keywords);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "        showToUser(personsFound);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        return getMessageForPersonsDisplayedSummary(personsFound);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of persons."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param personsDisplayed used to generate summary"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return summary message for persons displayed"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getMessageForPersonsDisplayedSummary(ArrayList\u003cString[]\u003e personsDisplayed) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(MESSAGE_PERSONS_FOUND_OVERVIEW, personsDisplayed.size());"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts keywords from the command arguments given for the find persons command."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param findPersonCommandArgs full command args string for the find persons command"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return set of keywords as specified by args"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Set\u003cString\u003e extractKeywordsFromFindPersonArgs(String findPersonCommandArgs) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(splitByWhitespace(findPersonCommandArgs.trim()));"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves all persons in the full model whose names contain some of the specified keywords."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keywords for searching"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return list of persons in full model with name containing some of the keywords"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArrayList\u003cString[]\u003e getPersonsWithNameContainingAnyKeyword(Collection\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cString[]\u003e matchedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String[] person : getAllPersonsInAddressBook()) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "            final Set\u003cString\u003e wordsInName \u003d new HashSet\u003c\u003e(splitByWhitespace(getNameFromPerson(person)));"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Collections.disjoint(wordsInName, keywords)) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "                matchedPersons.add(person);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "        return matchedPersons;"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes person identified using last displayed index."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandArgs full command args string from the user"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback display message for the operation result"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String executeDeletePerson(String commandArgs) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isDeletePersonArgsValid(commandArgs)) {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "            return getMessageForInvalidCommandInput(COMMAND_DELETE_WORD, getUsageInfoForDeleteCommand());"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "        final int targetVisibleIndex \u003d extractTargetIndexFromDeletePersonArgs(commandArgs);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isDisplayIndexValidForLastPersonListingView(targetVisibleIndex)) {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "            return MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] targetInModel \u003d getPersonByLastVisibleIndex(targetVisibleIndex);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "        return deletePersonFromAddressBook(targetInModel) ? getMessageForSuccessfulDelete(targetInModel) // success"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "                                                          : MESSAGE_PERSON_NOT_IN_ADDRESSBOOK; // not found"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks validity of delete person argument string\u0027s format."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param rawArgs raw command args string for the delete person command"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return whether the input args string is valid"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isDeletePersonArgsValid(String rawArgs) {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "            final int extractedIndex \u003d Integer.parseInt(rawArgs.trim()); // use standard libraries to parse"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "            return extractedIndex \u003e\u003d DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts the target\u0027s index from the raw delete person args string"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param rawArgs raw command args string for the delete person command"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return extracted index"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int extractTargetIndexFromDeletePersonArgs(String rawArgs) {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(rawArgs.trim());"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that the given index is within bounds and valid for the last shown person list view."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index to check"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return whether it is valid"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isDisplayIndexValidForLastPersonListingView(int index) {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d DISPLAYED_INDEX_OFFSET \u0026\u0026 index \u003c latestPersonListingView.size() + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a feedback message for a successful delete person command execution."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param deletedPerson successfully deleted"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return successful delete person feedback message"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "     * @see #executeDeletePerson(String)"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getMessageForSuccessfulDelete(String[] deletedPerson) {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(MESSAGE_DELETE_PERSON_SUCCESS, getMessageForFormattedPersonData(deletedPerson));"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears all persons in the address book."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback display message for the operation result"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String executeClearAddressBook() {"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "        clearAddressBook();"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "        return MESSAGE_ADDRESSBOOK_CLEARED;"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book to the user; in added order."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback display message for the operation result"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String executeListAllPersonsInAddressBook() {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString[]\u003e toBeDisplayed \u003d getAllPersonsInAddressBook();"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "        showToUser(toBeDisplayed);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "        return getMessageForPersonsDisplayedSummary(toBeDisplayed);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "     * Requests to terminate the program."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void executeExitProgramRequest() {"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "        exitProgram();"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "     *               UI LOGIC"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prompts for the command and reads the text entered by the user."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores lines with first non-whitespace char equal to {@link #INPUT_COMMENT_MARKER} (considered comments)"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return full line entered by the user"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getUserInput() {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(LINE_PREFIX + \"Enter command: \");"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "        String inputLine \u003d SCANNER.nextLine();"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "        // silently consume all blank and comment lines"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "        while (inputLine.trim().isEmpty() || inputLine.trim().charAt(0) \u003d\u003d INPUT_COMMENT_MARKER) {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "            inputLine \u003d SCANNER.nextLine();"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "        return inputLine;"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "     * NOTE : \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note how the method below uses Java \u0027Varargs\u0027 feature so that the"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "     * method can accept a varying number of message parameters."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows a message to the user"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showToUser(String... message) {"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String m : message) {"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(LINE_PREFIX + m);"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the list of persons to the user."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list will be indexed, starting from 1."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showToUser(ArrayList\u003cString[]\u003e persons) {"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "        String listAsString \u003d getDisplayString(persons);"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "        showToUser(listAsString);"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "        updateLatestViewedPersonListing(persons);"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the display string representation of the list of persons."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getDisplayString(ArrayList\u003cString[]\u003e persons) {"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder messageAccumulator \u003d new StringBuilder();"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size(); i++) {"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "            final String[] person \u003d persons.get(i);"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "            final int displayIndex \u003d i + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "            messageAccumulator.append(\u0027\\t\u0027)"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "                              .append(getIndexedPersonListElementMessage(displayIndex, person))"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "                              .append(LS);"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "        return messageAccumulator.toString();"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a prettified listing element message to represent a person and their data."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param visibleIndex visible index for this listing"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param person to show"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return formatted listing message with index"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getIndexedPersonListElementMessage(int visibleIndex, String[] person) {"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "        return String.format(MESSAGE_DISPLAY_LIST_ELEMENT_INDEX, visibleIndex)"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "                + getMessageForFormattedPersonData(person);"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a prettified string to show the user a person\u0027s data."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param person to show"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return formatted message showing internal state"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getMessageForFormattedPersonData(String[] person) {"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(MESSAGE_DISPLAY_PERSON_DATA,"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "                getNameFromPerson(person), getPhoneFromPerson(person), getEmailFromPerson(person));"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the latest person listing view the user has seen."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param newListing the new listing of persons"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void updateLatestViewedPersonListing(ArrayList\u003cString[]\u003e newListing) {"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "        // clone to insulate from future changes to arg list"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "        latestPersonListingView \u003d new ArrayList\u003c\u003e(newListing);"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the person identified by the displayed index from the last shown listing of persons."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param lastVisibleIndex displayed index from last shown person listing"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the actual person object in the last shown person listing"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String[] getPersonByLastVisibleIndex(int lastVisibleIndex) {"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "        return latestPersonListingView.get(lastVisibleIndex - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "     *             STORAGE LOGIC"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates storage file if it does not exist. Shows feedback to user."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath file to create if not present"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void createFileIfMissing(String filePath) {"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "        final File storageFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "        if (storageFile.exists()) {"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "        showToUser(String.format(MESSAGE_ERROR_MISSING_STORAGE_FILE, filePath));"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "            storageFile.createNewFile();"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "            showToUser(String.format(MESSAGE_STORAGE_FILE_CREATED, filePath));"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "            showToUser(String.format(MESSAGE_ERROR_CREATING_STORAGE_FILE, filePath));"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "            exitProgram();"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts contents of a file into a list of persons."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows error messages and exits program if any errors in reading or decoding was encountered."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath file to load from"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the list of decoded persons"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArrayList\u003cString[]\u003e loadPersonsFromFile(String filePath) {"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "        final Optional\u003cArrayList\u003cString[]\u003e\u003e successfullyDecoded \u003d decodePersonsFromStrings(getLinesInFile(filePath));"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!successfullyDecoded.isPresent()) {"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "            showToUser(MESSAGE_INVALID_STORAGE_FILE_CONTENT);"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "            exitProgram();"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "        return successfullyDecoded.get();"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets all lines in the specified file as a list of strings. Line separators are removed."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows error messages and exits program if unable to read from file."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArrayList\u003cString\u003e getLinesInFile(String filePath) {"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d null;"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "            lines \u003d new ArrayList\u003c\u003e(Files.readAllLines(Paths.get(filePath)));"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "            showToUser(String.format(MESSAGE_ERROR_MISSING_STORAGE_FILE, filePath));"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "            exitProgram();"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "            showToUser(String.format(MESSAGE_ERROR_READING_FROM_FILE, filePath));"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "            exitProgram();"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "        return lines;"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves all data to the file. Exits program if there is an error saving to file."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath file for saving"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void savePersonsToFile(ArrayList\u003cString[]\u003e persons, String filePath) {"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cString\u003e linesToWrite \u003d encodePersonsToStrings(persons);"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.write(Paths.get(storageFilePath), linesToWrite);"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "            showToUser(String.format(MESSAGE_ERROR_WRITING_TO_FILE, filePath));"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "            exitProgram();"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "     *        INTERNAL ADDRESS BOOK DATA METHODS"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book. Saves changes to storage file."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param person to add"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addPersonToAddressBook(String[] person) {"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "        ALL_PERSONS.add(person);"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "        savePersonsToFile(getAllPersonsInAddressBook(), storageFilePath);"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the specified person from the addressbook if it is inside. Saves any changes to storage file."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "     * @param exactPerson the actual person inside the address book"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "     *                    (exactPerson \u003d\u003d the person to delete in the full list)"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if the given person was found and deleted in the model"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean deletePersonFromAddressBook(String[] exactPerson) {"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "        final boolean changed \u003d ALL_PERSONS.remove(exactPerson);"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "        if (changed) {"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "            savePersonsToFile(getAllPersonsInAddressBook(), storageFilePath);"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "        return changed;"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all persons in the address book"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArrayList\u003cString[]\u003e getAllPersonsInAddressBook() {"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "        return ALL_PERSONS;"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears all persons in the address book and saves changes to file."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void clearAddressBook() {"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "        ALL_PERSONS.clear();"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "        savePersonsToFile(getAllPersonsInAddressBook(), storageFilePath);"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the internal model with the given data. Does not save to file."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param persons list of persons to initialise the model with"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void initialiseAddressBookModel(ArrayList\u003cString[]\u003e persons) {"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "        ALL_PERSONS.clear();"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "        ALL_PERSONS.addAll(persons);"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "     *             PERSON METHODS"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the given person\u0027s name"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param person whose name you want"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getNameFromPerson(String[] person) {"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "        return person[PERSON_DATA_INDEX_NAME];"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns given person\u0027s phone number"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param person whose phone number you want"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getPhoneFromPerson(String[] person) {"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "        return person[PERSON_DATA_INDEX_PHONE];"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns given person\u0027s email"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param person whose email you want"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getEmailFromPerson(String[] person) {"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "        return person[PERSON_DATA_INDEX_EMAIL];"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a person from the given data."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name of person"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone without data prefix"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email without data prefix"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return constructed person"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String[] makePersonFromData(String name, String phone, String email) {"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] person \u003d new String[PERSON_DATA_COUNT];"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "        person[PERSON_DATA_INDEX_NAME] \u003d name;"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "        person[PERSON_DATA_INDEX_PHONE] \u003d phone;"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "        person[PERSON_DATA_INDEX_EMAIL] \u003d email;"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encodes a person into a decodable and readable string representation."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param person to be encoded"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return encoded string"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String encodePersonToString(String[] person) {"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(PERSON_STRING_REPRESENTATION,"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "                getNameFromPerson(person), getPhoneFromPerson(person), getEmailFromPerson(person));"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encodes list of persons into list of decodable and readable string representations."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param persons to be encoded"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return encoded strings"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArrayList\u003cString\u003e encodePersonsToStrings(ArrayList\u003cString[]\u003e persons) {"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cString\u003e encoded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String[] person : persons) {"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "            encoded.add(encodePersonToString(person));"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "        return encoded;"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "     * NOTE : \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note the use of Java\u0027s new \u0027Optional\u0027 feature to indicate that"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "     * the return value may not always be present."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decodes a person from it\u0027s supposed string representation."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param encoded string to be decoded"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return if cannot decode: empty Optional"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "     *         else: Optional containing decoded person"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Optional\u003cString[]\u003e decodePersonFromString(String encoded) {"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that we can extract the parts of a person from the encoded string"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isPersonDataExtractableFrom(encoded)) {"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] decodedPerson \u003d makePersonFromData("
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "                extractNameFromPersonString(encoded),"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "                extractPhoneFromPersonString(encoded),"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "                extractEmailFromPersonString(encoded)"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that the constructed person is valid"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "        return isPersonDataValid(decodedPerson) ? Optional.of(decodedPerson) : Optional.empty();"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decodes persons from a list of string representations."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param encodedPersons strings to be decoded"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return if cannot decode any: empty Optional"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "     *         else: Optional containing decoded persons"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Optional\u003cArrayList\u003cString[]\u003e\u003e decodePersonsFromStrings(ArrayList\u003cString\u003e encodedPersons) {"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cString[]\u003e decodedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String encodedPerson : encodedPersons) {"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "            final Optional\u003cString[]\u003e decodedPerson \u003d decodePersonFromString(encodedPerson);"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!decodedPerson.isPresent()) {"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "            decodedPersons.add(decodedPerson.get());"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(decodedPersons);"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if person data (email, name, phone etc) can be extracted from the argument string."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format is [name] p/[phone] e/[email], phone and email positions can be swapped."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param personData person string representation"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isPersonDataExtractableFrom(String personData) {"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "        final String matchAnyPersonDataPrefix \u003d PERSON_DATA_PREFIX_PHONE + \u0027|\u0027 + PERSON_DATA_PREFIX_EMAIL;"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitArgs \u003d personData.trim().split(matchAnyPersonDataPrefix);"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "        return splitArgs.length \u003d\u003d 3 // 3 arguments"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 !splitArgs[0].isEmpty() // non-empty arguments"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 !splitArgs[1].isEmpty()"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 !splitArgs[2].isEmpty();"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts substring representing person name from person string representation"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param encoded person string representation"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return name argument"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractNameFromPersonString(String encoded) {"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "        final int indexOfPhonePrefix \u003d encoded.indexOf(PERSON_DATA_PREFIX_PHONE);"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "        final int indexOfEmailPrefix \u003d encoded.indexOf(PERSON_DATA_PREFIX_EMAIL);"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "        // name is leading substring up to first data prefix symbol"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "        int indexOfFirstPrefix \u003d Math.min(indexOfEmailPrefix, indexOfPhonePrefix);"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "        return encoded.substring(0, indexOfFirstPrefix).trim();"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts substring representing phone number from person string representation"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param encoded person string representation"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return phone number argument WITHOUT prefix"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractPhoneFromPersonString(String encoded) {"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "        final int indexOfPhonePrefix \u003d encoded.indexOf(PERSON_DATA_PREFIX_PHONE);"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "        final int indexOfEmailPrefix \u003d encoded.indexOf(PERSON_DATA_PREFIX_EMAIL);"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone is last arg, target is from prefix to end of string"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "        if (indexOfPhonePrefix \u003e indexOfEmailPrefix) {"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "            return removePrefixSign(encoded.substring(indexOfPhonePrefix, encoded.length()).trim(),"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "                    PERSON_DATA_PREFIX_PHONE);"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone is middle arg, target is from own prefix to next prefix"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "            return removePrefixSign("
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "                    encoded.substring(indexOfPhonePrefix, indexOfEmailPrefix).trim(),"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "                    PERSON_DATA_PREFIX_PHONE);"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts substring representing email from person string representation"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param encoded person string representation"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return email argument WITHOUT prefix"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractEmailFromPersonString(String encoded) {"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "        final int indexOfPhonePrefix \u003d encoded.indexOf(PERSON_DATA_PREFIX_PHONE);"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "        final int indexOfEmailPrefix \u003d encoded.indexOf(PERSON_DATA_PREFIX_EMAIL);"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "        // email is last arg, target is from prefix to end of string"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "        if (indexOfEmailPrefix \u003e indexOfPhonePrefix) {"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "            return removePrefixSign(encoded.substring(indexOfEmailPrefix, encoded.length()).trim(),"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "                    PERSON_DATA_PREFIX_EMAIL);"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "        // email is middle arg, target is from own prefix to next prefix"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "            return removePrefixSign("
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "                    encoded.substring(indexOfEmailPrefix, indexOfPhonePrefix).trim(),"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "                    PERSON_DATA_PREFIX_EMAIL);"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the given person\u0027s data fields are valid"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param person String array representing the person (used in internal data)"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isPersonDataValid(String[] person) {"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "        return isPersonNameValid(person[PERSON_DATA_INDEX_NAME])"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 isPersonPhoneValid(person[PERSON_DATA_INDEX_PHONE])"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 isPersonEmailValid(person[PERSON_DATA_INDEX_EMAIL]);"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "     * NOTE : \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note the use of \u0027regular expressions\u0027 in the method below."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "     * Regular expressions can be very useful in checking if a a string"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "     * follows a specific format."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the given string as a legal person name"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name to be validated"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isPersonNameValid(String name) {"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "        return name.matches(\"(\\\\w|\\\\s)+\"); // name is nonempty mixture of alphabets and whitespace"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "        //TODO: implement a more permissive validation"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the given string as a legal person phone number"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone to be validated"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isPersonPhoneValid(String phone) {"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone.matches(\"\\\\d+\"); // phone nonempty sequence of digits"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "        //TODO: implement a more permissive validation"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the given string is a legal person email"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email to be validated"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return whether arg is a valid person email"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isPersonEmailValid(String email) {"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "        return email.matches(\"\\\\S+@\\\\S+\\\\.\\\\S+\"); // email is [non-whitespace]@[non-whitespace].[non-whitespace]"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "        //TODO: implement a more permissive validation"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "     *         COMMAND HELP INFO FOR USERS"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns usage info for all commands */"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getUsageInfoForAllCommands() {"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "        return getUsageInfoForAddCommand() + LS"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "                + getUsageInfoForFindCommand() + LS"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "                + getUsageInfoForViewCommand() + LS"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "                + getUsageInfoForDeleteCommand() + LS"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "                + getUsageInfoForClearCommand() + LS"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "                + getUsageInfoForExitCommand() + LS"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "                + getUsageInfoForHelpCommand();"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the string for showing \u0027add\u0027 command usage instruction */"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getUsageInfoForAddCommand() {"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(MESSAGE_COMMAND_HELP, COMMAND_ADD_WORD, COMMAND_ADD_DESC) + LS"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "                + String.format(MESSAGE_COMMAND_HELP_PARAMETERS, COMMAND_ADD_PARAMETERS) + LS"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "                + String.format(MESSAGE_COMMAND_HELP_EXAMPLE, COMMAND_ADD_EXAMPLE) + LS;"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the string for showing \u0027find\u0027 command usage instruction */"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getUsageInfoForFindCommand() {"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(MESSAGE_COMMAND_HELP, COMMAND_FIND_WORD, COMMAND_FIND_DESC) + LS"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "                + String.format(MESSAGE_COMMAND_HELP_PARAMETERS, COMMAND_FIND_PARAMETERS) + LS"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "                + String.format(MESSAGE_COMMAND_HELP_EXAMPLE, COMMAND_FIND_EXAMPLE) + LS;"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the string for showing \u0027delete\u0027 command usage instruction */"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getUsageInfoForDeleteCommand() {"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(MESSAGE_COMMAND_HELP, COMMAND_DELETE_WORD, COMMAND_DELETE_DESC) + LS"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "                + String.format(MESSAGE_COMMAND_HELP_PARAMETERS, COMMAND_DELETE_PARAMETER) + LS"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "                + String.format(MESSAGE_COMMAND_HELP_EXAMPLE, COMMAND_DELETE_EXAMPLE) + LS;"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns string for showing \u0027clear\u0027 command usage instruction */"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getUsageInfoForClearCommand() {"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(MESSAGE_COMMAND_HELP, COMMAND_CLEAR_WORD, COMMAND_CLEAR_DESC) + LS"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "                + String.format(MESSAGE_COMMAND_HELP_EXAMPLE, COMMAND_CLEAR_EXAMPLE) + LS;"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the string for showing \u0027view\u0027 command usage instruction */"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getUsageInfoForViewCommand() {"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(MESSAGE_COMMAND_HELP, COMMAND_LIST_WORD, COMMAND_LIST_DESC) + LS"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "                + String.format(MESSAGE_COMMAND_HELP_EXAMPLE, COMMAND_LIST_EXAMPLE) + LS;"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns string for showing \u0027help\u0027 command usage instruction */"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getUsageInfoForHelpCommand() {"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(MESSAGE_COMMAND_HELP, COMMAND_HELP_WORD, COMMAND_HELP_DESC)"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "                + String.format(MESSAGE_COMMAND_HELP_EXAMPLE, COMMAND_HELP_EXAMPLE);"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the string for showing \u0027exit\u0027 command usage instruction */"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getUsageInfoForExitCommand() {"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(MESSAGE_COMMAND_HELP, COMMAND_EXIT_WORD, COMMAND_EXIT_DESC)"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "                + String.format(MESSAGE_COMMAND_HELP_EXAMPLE, COMMAND_EXIT_EXAMPLE);"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "     *         UTILITY METHODS"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes sign(p/, d/, etc) from parameter string"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param s  Parameter as a string"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sign  Parameter sign to be removed"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return  string without the sign"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String removePrefixSign(String s, String sign) {"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "        return s.replace(sign, \"\");"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Splits a source string into the list of substrings that were separated by whitespace."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toSplit source string"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return split by whitespace"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArrayList\u003cString\u003e splitByWhitespace(String toSplit) {"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(toSplit.trim().split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 11,
      "-": 1163
    }
  }
]
