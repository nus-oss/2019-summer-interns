[
  {
    "path": "src/main/java/teammates/logic/api/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package teammates.logic.api;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.CourseDetailsBundle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.CourseSummaryBundle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.DataBundle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.FeedbackSessionDetailsBundle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.FeedbackSessionQuestionsBundle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.FeedbackSessionResponseStatus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.FeedbackSessionResultsBundle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.InstructorPrivileges;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.InstructorSearchResultBundle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.SectionDetail;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.SectionDetailsBundle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.StudentSearchResultBundle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.TeamDetailsBundle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.AccountAttributes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.CourseAttributes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.InstructorAttributes;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.StudentAttributes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.StudentProfileAttributes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.exception.EnrollException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.exception.EntityAlreadyExistsException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.exception.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.exception.ExceedingRangeException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.exception.InvalidParametersException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.util.Assumption;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.logic.core.AccountsLogic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.logic.core.CoursesLogic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.logic.core.DataBundleLogic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.logic.core.FeedbackQuestionsLogic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.logic.core.FeedbackResponseCommentsLogic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.logic.core.FeedbackResponsesLogic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.logic.core.FeedbackSessionsLogic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.logic.core.InstructorsLogic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.logic.core.ProfilesLogic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.logic.core.StudentsLogic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides the business logic for production usage of the system."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " * \u003cp\u003eThis is a Facade class which simply forwards the method to internal classes."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class Logic {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final AccountsLogic accountsLogic \u003d AccountsLogic.inst();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final StudentsLogic studentsLogic \u003d StudentsLogic.inst();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final InstructorsLogic instructorsLogic \u003d InstructorsLogic.inst();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CoursesLogic coursesLogic \u003d CoursesLogic.inst();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final FeedbackSessionsLogic feedbackSessionsLogic \u003d FeedbackSessionsLogic.inst();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final FeedbackQuestionsLogic feedbackQuestionsLogic \u003d FeedbackQuestionsLogic.inst();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final FeedbackResponsesLogic feedbackResponsesLogic \u003d FeedbackResponsesLogic.inst();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final FeedbackResponseCommentsLogic feedbackResponseCommentsLogic \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackResponseCommentsLogic.inst();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ProfilesLogic profilesLogic \u003d ProfilesLogic.inst();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final DataBundleLogic dataBundleLogic \u003d DataBundleLogic.inst();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public AccountAttributes getAccount(String googleId) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(googleId);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return accountsLogic.getAccount(googleId);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates/Creates the profile using {@link StudentProfileAttributes.UpdateOptions}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003e Preconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return updated student profile"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidParametersException if attributes to update are not valid"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public StudentProfileAttributes updateOrCreateStudentProfile(StudentProfileAttributes.UpdateOptions updateOptions)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(updateOptions);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return profilesLogic.updateOrCreateStudentProfile(updateOptions);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes both instructor and student privileges, as long as the account and associated student profile."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cli\u003eFails silently if no such account.\u003c/li\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003ePreconditions:\u003c/p\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteAccountCascade(String googleId) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(googleId);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        accountsLogic.deleteAccountCascade(googleId);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Delete the picture associated with the {@code key} in Cloud Storage."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003e Preconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * All parameters are non-null."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eFails silently if the {@code key} doesn\u0027t exist.\u003c/p\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePicture(String key) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(key);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        profilesLogic.deletePicture(key);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes {@code pictureKey} for the student profile associated with {@code googleId}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eIf the associated profile doesn\u0027t exist, create a new one.\u003c/p\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePictureKey(String googleId) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(googleId);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        profilesLogic.deletePictureKey(googleId);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Add an instructor for a course. \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Deprecated"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addInstructor(String courseId, String name, String email, String role)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityAlreadyExistsException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(name);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(email);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        InstructorAttributes instructor \u003d InstructorAttributes.builder(courseId, email)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                .withName(name)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .withRole(role)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPrivileges(new InstructorPrivileges(role))"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        instructorsLogic.createInstructor(instructor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an instructor."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003ePreconditions:\u003c/p\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the created instructor"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidParametersException if the instructor is not valid"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EntityAlreadyExistsException if the instructor already exists in the Datastore"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public InstructorAttributes createInstructor(InstructorAttributes instructor)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityAlreadyExistsException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(instructor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return instructorsLogic.createInstructor(instructor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method should be used by admin only since the searching does not restrict the"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * visibility according to the logged-in user\u0027s google ID. This is used by admin to"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * search instructors in the whole system."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Null if no match found."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public InstructorSearchResultBundle searchInstructorsInWholeSystem(String queryString) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(queryString);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return instructorsLogic.searchInstructorsInWholeSystem(queryString);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Batch creates or updates documents for the given Instructors."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see InstructorsLogic#putDocuments(List)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void putInstructorDocuments(List\u003cInstructorAttributes\u003e instructors) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        instructorsLogic.putDocuments(instructors);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return null if not found."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public InstructorAttributes getInstructorForEmail(String courseId, String email) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(email);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        return instructorsLogic.getInstructorForEmail(courseId, email);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return null if not found."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public InstructorAttributes getInstructorById(String courseId, String email) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(email);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        return instructorsLogic.getInstructorById(courseId, email);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return null if not found."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public InstructorAttributes getInstructorForGoogleId(String courseId, String googleId) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(googleId);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        return instructorsLogic.getInstructorForGoogleId(courseId, googleId);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return null if not found."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public InstructorAttributes getInstructorForRegistrationKey(String encryptedKey) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(encryptedKey);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        return instructorsLogic.getInstructorForRegistrationKey(encryptedKey);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Empty list if none found."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cInstructorAttributes\u003e getInstructorsForGoogleId(String googleId) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(googleId);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        return instructorsLogic.getInstructorsForGoogleId(googleId);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cInstructorAttributes\u003e getInstructorsForGoogleId(String googleId, boolean omitArchived) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(googleId);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        return instructorsLogic.getInstructorsForGoogleId(googleId, omitArchived);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Empty list if none found."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cInstructorAttributes\u003e getInstructorsForCourse(String courseId) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        return instructorsLogic.getInstructorsForCourse(courseId);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get the encrypted registration key for the instructor."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEncryptedKeyForInstructor(String courseId, String email)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(email);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        return instructorsLogic.getEncryptedKeyForInstructor(courseId, email);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getAllOngoingSessions(Instant rangeStart, Instant rangeEnd) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getAllOngoingSessions(rangeStart, rangeEnd);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this user has instructor privileges."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isInstructor(String googleId) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        return accountsLogic.isAccountAnInstructor(googleId);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this user is an instructor of the course."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isInstructorOfCourse(String googleId, String courseId) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        return instructorsLogic.isGoogleIdOfInstructorOfCourse(googleId, courseId);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the instructor is a new user."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see InstructorsLogic#isNewInstructor(String)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isNewInstructor(String googleId) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        return instructorsLogic.isNewInstructor(googleId);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates an instructor by {@link InstructorAttributes.UpdateOptionsWithGoogleId}."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eCascade update the comments and responses given by the instructor."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return updated instructor"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidParametersException if attributes to update are not valid"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EntityDoesNotExistException if the instructor cannot be found"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public InstructorAttributes updateInstructorCascade(InstructorAttributes.UpdateOptionsWithGoogleId updateOptions)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityDoesNotExistException {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(updateOptions);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        return instructorsLogic.updateInstructorByGoogleIdCascade(updateOptions);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates an instructor by {@link InstructorAttributes.UpdateOptionsWithEmail}."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return updated instructor"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidParametersException if attributes to update are not valid"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EntityDoesNotExistException if the instructor cannot be found"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    public InstructorAttributes updateInstructor(InstructorAttributes.UpdateOptionsWithEmail updateOptions)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityDoesNotExistException {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(updateOptions);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        return instructorsLogic.updateInstructorByEmail(updateOptions);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "     * Make the instructor join the course, i.e. associate the Google ID to the instructor.\u003cbr\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "     * Create an account for the instructor if there is no account exist for him."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    public InstructorAttributes joinCourseForInstructor(String encryptedKey, String googleId, String institute)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(googleId);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(encryptedKey);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        return accountsLogic.joinCourseForInstructor(encryptedKey, googleId, institute);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "     * Downgrades an instructor account to student account."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eCascade deletes all instructors associated with the account."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    public void downgradeInstructorToStudentCascade(String googleId) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(googleId);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        accountsLogic.downgradeInstructorToStudentCascade(googleId);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes an instructor cascade its associated feedback responses and comments."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eFails silently if the student does not exist."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteInstructorCascade(String courseId, String email) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(email);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        instructorsLogic.deleteInstructorCascade(courseId, email);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a course and an associated instructor for the course."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null. \u003cbr/\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "     * * {@code instructorGoogleId} already has an account and instructor privileges."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createCourseAndInstructor(String instructorGoogleId, CourseAttributes courseAttributes)"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityAlreadyExistsException, InvalidParametersException {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(instructorGoogleId);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseAttributes);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        coursesLogic.createCourseAndInstructor(instructorGoogleId, courseAttributes);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return null if not found."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "    public CourseAttributes getCourse(String courseId) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        return coursesLogic.getCourse(courseId);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed version of course data. \u003cbr\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "    public CourseDetailsBundle getCourseDetails(String courseId) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "        return coursesLogic.getCourseSummary(courseId);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a course data, including its feedback sessions, according to the instructor passed in.\u003cbr\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "    public CourseSummaryBundle getCourseSummaryWithFeedbackSessions(InstructorAttributes instructor)"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(instructor);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "        return coursesLogic.getCourseSummaryWithFeedbackSessionsForInstructor(instructor);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cCourseAttributes\u003e getCoursesForStudentAccount(String googleId) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(googleId);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "        return coursesLogic.getCoursesForStudentAccount(googleId);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "     * Omits archived courses if omitArchived \u003d\u003d true\u003cbr\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A less detailed version of courses for this instructor without stats."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "     *         Returns an empty list if none found."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "    public Map\u003cString, CourseSummaryBundle\u003e getCourseSummariesWithoutStatsForInstructor(String googleId,"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                            boolean omitArchived) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(googleId);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        return coursesLogic.getCoursesSummaryWithoutStatsForInstructor(googleId, omitArchived);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A less detailed version of courses for this instructor."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "     *         Returns an empty list if none found."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "    public Map\u003cString, CourseDetailsBundle\u003e getCourseSummariesForInstructor(String googleId)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(googleId);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "        return coursesLogic.getCourseSummariesForInstructor(googleId, false);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Details of courses the student is in. CourseData objects"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "     *         returned contain details of feedback sessions too (except the ones"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "     *         still AWAITING)."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cCourseDetailsBundle\u003e getCourseDetailsListForStudent(String googleId)"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(googleId);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "        return coursesLogic.getCourseDetailsListForStudent(googleId);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Courses the instructor is in."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cCourseAttributes\u003e getCoursesForInstructor(String googleId) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "        return getCoursesForInstructor(googleId, false);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "     * Omits archived courses if omitArchived \u003d\u003d true\u003cbr\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Courses the instructor is in."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cCourseAttributes\u003e getCoursesForInstructor(String googleId, boolean omitArchived) {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(googleId);"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "        return coursesLogic.getCoursesForInstructor(googleId, omitArchived);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Courses the given instructors is in except for courses in Recycle Bin."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cCourseAttributes\u003e getCoursesForInstructor(List\u003cInstructorAttributes\u003e instructorList) {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(instructorList);"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "        return coursesLogic.getCoursesForInstructor(instructorList);"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Courses in Recycle Bin that the given instructors is in."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cCourseAttributes\u003e getSoftDeletedCoursesForInstructors(List\u003cInstructorAttributes\u003e instructorList) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(instructorList);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "        return coursesLogic.getSoftDeletedCoursesForInstructors(instructorList);"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "    public CourseAttributes getSoftDeletedCourseForInstructor(InstructorAttributes instructor) {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(instructor);"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "        return coursesLogic.getSoftDeletedCourseForInstructor(instructor);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates a course by {@link CourseAttributes.UpdateOptions}."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eIf the {@code timezone} of the course is changed, cascade the change to its corresponding feedback sessions."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return updated course"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidParametersException if attributes to update are not valid"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EntityDoesNotExistException if the course cannot be found"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "    public CourseAttributes updateCourseCascade(CourseAttributes.UpdateOptions updateOptions)"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityDoesNotExistException {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(updateOptions);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "        return coursesLogic.updateCourseCascade(updateOptions);"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "     * Changes the archive status of a course for an instructor."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param courseId The course of which the archive status is to be changed"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param archiveStatus The archive status to be set"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setArchiveStatusOfInstructor(String googleId, String courseId, boolean archiveStatus)"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityDoesNotExistException {"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(googleId);"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(archiveStatus);"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "        instructorsLogic.setArchiveStatusOfInstructor(googleId, courseId, archiveStatus);"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes a course cascade its students, instructors, sessions, responses and comments."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eFails silently if no such course."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCourseCascade(String courseId) {"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "        coursesLogic.deleteCourseCascade(courseId);"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if the course is present in the system based on its courseid."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isCoursePresent(String courseid) {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "        return coursesLogic.isCoursePresent(courseid);"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "     * Moves a course to Recycle Bin by its given corresponding ID."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "    public void moveCourseToRecycleBin(String courseId) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "        coursesLogic.moveCourseToRecycleBin(courseId);"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores a course and all data related to the course from Recycle Bin by"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "     * its given corresponding ID."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "    public void restoreCourseFromRecycleBin(String courseId)"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "        coursesLogic.restoreCourseFromRecycleBin(courseId);"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores all courses and all data related to these courses from Recycle Bin."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "    public void restoreAllCoursesFromRecycleBin(List\u003cInstructorAttributes\u003e instructorList)"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(instructorList);"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "        coursesLogic.restoreAllCoursesFromRecycleBin(instructorList);"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "     * Search for students. Preconditions: all parameters are non-null."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instructors   a list of InstructorAttributes associated to a googleId,"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "     *                      used for filtering of search result"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Null if no match found"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "    public StudentSearchResultBundle searchStudents(String queryString, List\u003cInstructorAttributes\u003e instructors) {"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(queryString);"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(instructors);"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "        return studentsLogic.searchStudents(queryString, instructors);"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method should be used by admin only since the searching does not restrict the"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "     * visibility according to the logged-in user\u0027s google ID. This is used by admin to"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "     * search students in the whole system."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Null if no match found."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "    public StudentSearchResultBundle searchStudentsInWholeSystem(String queryString) {"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(queryString);"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "        return studentsLogic.searchStudentsInWholeSystem(queryString);"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Null if no match found."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "    public StudentAttributes getStudentForRegistrationKey(String registrationKey) {"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(registrationKey);"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "        return studentsLogic.getStudentForRegistrationKey(registrationKey);"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Null if no match found."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "    public StudentAttributes getStudentForEmail(String courseId, String email) {"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(email);"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "        return studentsLogic.getStudentForEmail(courseId, email);"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return an empty list if no match found."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cStudentAttributes\u003e getAllStudentForEmail(String email) {"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(email);"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "        return studentsLogic.getAllStudentsForEmail(email);"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Null if no match found."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "    public StudentAttributes getStudentForGoogleId(String courseId, String googleId) {"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(googleId);"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "        return studentsLogic.getStudentForCourseIdAndGoogleId(courseId, googleId);"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets student profile associated with the {@code googleId}."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003e Preconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return null if no match found."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "    public StudentProfileAttributes getStudentProfile(String googleId) {"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(googleId);"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "        return profilesLogic.getStudentProfile(googleId);"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Empty list if no match found."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cStudentAttributes\u003e getStudentsForGoogleId(String googleId) {"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(googleId);"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "        return studentsLogic.getStudentsForGoogleId(googleId);"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Empty list if none found."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cStudentAttributes\u003e getStudentsForCourse(String courseId) {"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "        return studentsLogic.getStudentsForCourse(courseId);"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of section names for the course with ID courseId."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003ePreconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see CoursesLogic#getSectionsNameForCourse(String)"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getSectionNamesForCourse(String courseId) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "        return coursesLogic.getSectionsNameForCourse(courseId);"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of {@link SectionDetailsBundle} for a given course using courseId."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003ePreconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see CoursesLogic#getSectionsForCourseWithoutStats(String)"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cSectionDetailsBundle\u003e getSectionsForCourse(String courseId) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "        return coursesLogic.getSectionsForCourseWithoutStats(courseId);"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cTeamDetailsBundle\u003e getTeamsForCourse(String courseId) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "        return coursesLogic.getTeamsForCourse(courseId);"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "    public TeamDetailsBundle getTeamDetailsForStudent(StudentAttributes student) {"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(student);"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "        return studentsLogic.getTeamDetailsForStudent(student);"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEncryptedKeyForStudent(String courseId, String email) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(email);"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "        return studentsLogic.getEncryptedKeyForStudent(courseId, email);"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the googleId associated with the student."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetStudentGoogleId(String originalEmail, String courseId) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(originalEmail);"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "        studentsLogic.resetStudentGoogleId(originalEmail, courseId);"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the associated googleId of an instructor."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetInstructorGoogleId(String originalEmail, String courseId) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(originalEmail);"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "        instructorsLogic.resetInstructorGoogleId(originalEmail, courseId);"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a student."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the created student."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidParametersException if the student is not valid."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EntityAlreadyExistsException if the student already exists in the Datastore."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "    public StudentAttributes createStudent(StudentAttributes student)"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityAlreadyExistsException {"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(student.getCourse());"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(student.getEmail());"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "        return studentsLogic.createStudent(student);"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates a student by {@link StudentAttributes.UpdateOptions}."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eIf email changed, update by recreating the student and cascade update all responses the student gives/receives."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eIf team changed, cascade delete all responses the student gives/receives within that team."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eIf section changed, cascade update all responses the student gives/receives."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return updated student"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidParametersException if attributes to update are not valid"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EntityDoesNotExistException if the student cannot be found"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EntityAlreadyExistsException if the student cannot be updated"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "     *         by recreation because of an existent student"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "    public StudentAttributes updateStudentCascade(StudentAttributes.UpdateOptions updateOptions)"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(updateOptions);"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "        return studentsLogic.updateStudentCascade(updateOptions);"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "     * Make the student join the course, i.e. associate the Google ID to the student.\u003cbr\u003e"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "     * Create an account for the student if there is no account exist for him."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param key the encrypted registration key"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "    public StudentAttributes joinCourseForStudent(String key, String googleId)"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(googleId);"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(key);"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "        return accountsLogic.joinCourseForStudent(key, googleId);"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cStudentAttributes\u003e getUnregisteredStudentsForCourse(String courseId) {"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "        return studentsLogic.getUnregisteredStudentsForCourse(courseId);"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFeedbackSessionCompletedByInstructor(FeedbackSessionAttributes fsa, String userEmail)"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(fsa);"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(userEmail);"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.isFeedbackSessionCompletedByInstructor(fsa, userEmail);"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFeedbackSessionCompletedByStudent(FeedbackSessionAttributes fsa, String userEmail) {"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(fsa);"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(userEmail);"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.isFeedbackSessionCompletedByStudent(fsa, userEmail);"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes a student cascade its associated feedback responses and comments."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eFails silently if the student does not exist."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteStudentCascade(String courseId, String studentEmail) {"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(studentEmail);"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "        studentsLogic.deleteStudentCascade(courseId, studentEmail);"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all the students in the course cascade their associated responses and comments."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteStudentsInCourseCascade(String courseId) {"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "        studentsLogic.deleteStudentsInCourseCascade(courseId);"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "     *  Checks if a course has sections for each team"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "     *  Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "     *  * All parameters are non-null."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasIndicatedSections(String courseId) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "        return coursesLogic.hasIndicatedSections(courseId);"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates sections for any limit violations and teams for any team name violations."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003ePreconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see StudentsLogic#validateSectionsAndTeams(List, String)"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "    public void validateSectionsAndTeams(List\u003cStudentAttributes\u003e studentList, String courseId) throws EnrollException {"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(studentList);"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "        studentsLogic.validateSectionsAndTeams(studentList, courseId);"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates teams for any team name violations."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003ePreconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see StudentsLogic#validateTeams(List, String)"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "    public void validateTeams(List\u003cStudentAttributes\u003e studentList, String courseId) throws EnrollException {"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(studentList);"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "        studentsLogic.validateTeams(studentList, courseId);"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets all students of a team."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cStudentAttributes\u003e getStudentsForTeam(String teamName, String courseId) {"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(teamName);"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "        return studentsLogic.getStudentsForTeam(teamName, courseId);"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "     * Batch creates or updates search documents for the given students."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "    public void putStudentDocuments(List\u003cStudentAttributes\u003e students) {"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "        studentsLogic.putDocuments(students);"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates students list of a course in CSV format. \u003cbr\u003e"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null. \u003cbr\u003e"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getCourseStudentListAsCsv(String courseId, String googleId) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(googleId);"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "        return coursesLogic.getCourseStudentListAsCsv(courseId, googleId);"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a feedback session."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return created feedback session"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidParametersException if the session is not valid"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EntityAlreadyExistsException if the session already exist"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionAttributes createFeedbackSession(FeedbackSessionAttributes feedbackSession)"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityAlreadyExistsException, InvalidParametersException {"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSession);"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.createFeedbackSession(feedbackSession);"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets a feedback session from the data storage."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return null if not found or in recycle bin."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionAttributes getFeedbackSession(String feedbackSessionName, String courseId) {"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSession(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets a feedback session from the recycle bin."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return null if not found."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionAttributes getFeedbackSessionFromRecycleBin(String feedbackSessionName, String courseId) {"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionFromRecycleBin(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getFeedbackSessionsForCourse(String courseId) {"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionsForCourse(courseId);"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionDetailsBundle getFeedbackSessionDetails(String feedbackSessionName, String courseId)"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionDetails(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code List} of all feedback sessions WITHOUT their response"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "     * statistics for a instructor given by his googleId."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003ePreconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see FeedbackSessionsLogic#getFeedbackSessionsListForInstructor(String, boolean)"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getFeedbackSessionsListForInstructor(String googleId, boolean omitArchived) {"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(googleId);"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionsListForInstructor(googleId, omitArchived);"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getFeedbackSessionsListForInstructor("
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cInstructorAttributes\u003e instructorList) {"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(instructorList);"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionsListForInstructor(instructorList);"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code List} of all feedback sessions in Recycle Bin WITHOUT their response"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "     * statistics for a instructor."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003ePreconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getSoftDeletedFeedbackSessionsListForInstructor(InstructorAttributes instructor) {"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(instructor);"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getSoftDeletedFeedbackSessionsListForInstructor(instructor);"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getSoftDeletedFeedbackSessionsListForInstructors("
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cInstructorAttributes\u003e instructorList) {"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(instructorList);"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getSoftDeletedFeedbackSessionsListForInstructors(instructorList);"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets {@code FeedbackQuestions} and previously filled"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code FeedbackResponses} that an instructor can view/submit as a"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link FeedbackSessionQuestionsBundle}."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003ePreconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see FeedbackSessionsLogic#getFeedbackSessionQuestionsForInstructor(String, String, String)"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionQuestionsBundle getFeedbackSessionQuestionsBundleForInstructor(String feedbackSessionName,"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                         String courseId,"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                         String userEmail)"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(userEmail);"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionQuestionsForInstructor(feedbackSessionName, courseId, userEmail);"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets {@code FeedbackQuestions} and previously filled"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code FeedbackResponses} that a student can view/submit as a"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link FeedbackSessionQuestionsBundle}."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003ePreconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see FeedbackSessionsLogic#getFeedbackSessionQuestionsForStudent(String, String, String)"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionQuestionsBundle getFeedbackSessionQuestionsBundleForStudent(String feedbackSessionName,"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                      String courseId,"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                      String userEmail)"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(userEmail);"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionQuestionsForStudent(feedbackSessionName, courseId, userEmail);"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the recipients of a feedback question for student."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see FeedbackQuestionsLogic#getRecipientsOfQuestionForStudent(FeedbackQuestionAttributes, String, String)"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "    public Map\u003cString, String\u003e getRecipientsOfQuestionForStudent("
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackQuestionAttributes question, String giverEmail, String giverTeam) {"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(question);"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(giverEmail);"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(giverTeam);"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackQuestionsLogic.getRecipientsOfQuestionForStudent(question, giverEmail, giverTeam);"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the recipients of a feedback question for instructor."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see FeedbackQuestionsLogic#getRecipientsOfQuestionForInstructor(FeedbackQuestionAttributes, String)"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "    public Map\u003cString, String\u003e getRecipientsOfQuestionForInstructor(FeedbackQuestionAttributes question, String giverEmail) {"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(question);"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(giverEmail);"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackQuestionsLogic.getRecipientsOfQuestionForInstructor(question, giverEmail);"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackQuestionAttributes getFeedbackQuestion(String feedbackSessionName,"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "                                                          String courseId,"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "                                                          int questionNumber) {"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackQuestionsLogic.getFeedbackQuestion(feedbackSessionName, courseId, questionNumber);"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null. \u003cbr\u003e"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackQuestionAttributes getFeedbackQuestion(String feedbackQuestionId) {"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackQuestionId);"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackQuestionsLogic.getFeedbackQuestion(feedbackQuestionId);"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets a list of all questions for the given session that"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "     * students can view/submit."
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackQuestionAttributes\u003e getFeedbackQuestionsForStudents("
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId) {"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackQuestionsLogic.getFeedbackQuestionsForStudents(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets a {@code List} of all questions for the given session that"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "     * instructor can view/submit."
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackQuestionAttributes\u003e getFeedbackQuestionsForInstructors("
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String instructorEmail) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackQuestionsLogic.getFeedbackQuestionsForInstructor(feedbackSessionName, courseId, instructorEmail);"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates summary results (without comments) in CSV format. \u003cbr\u003e"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters(except questionId) are non-null. \u003cbr\u003e"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see FeedbackSessionsLogic#getFeedbackSessionResultsSummaryAsCsv(String, String,"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "     *      String, String, boolean, boolean)"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackSessionResultSummaryAsCsv("
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "            String courseId, String feedbackSessionName, String instructorEmail,"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isMissingResponsesShown, boolean isStatsShown, String questionId)"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException, ExceedingRangeException {"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionResultsSummaryAsCsv("
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "                feedbackSessionName, courseId, instructorEmail, questionId,"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "                isMissingResponsesShown, isStatsShown);"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates summary results (without comments) within a section in CSV format. \u003cbr\u003e"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters(except questionId) are non-null. \u003cbr\u003e"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see FeedbackSessionsLogic#getFeedbackSessionResultsSummaryInSectionAsCsv(String, String, String,"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "     *      String, SectionDetail, String, boolean, boolean)"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackSessionResultSummaryInSectionAsCsv("
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "            String courseId, String feedbackSessionName, String instructorEmail, String section,"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "            SectionDetail sectionDetail, String questionId, boolean isMissingResponsesShown, boolean isStatsShown)"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException, ExceedingRangeException {"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(section);"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(sectionDetail);"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionResultsSummaryInSectionAsCsv("
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "                feedbackSessionName, courseId, instructorEmail, section, sectionDetail,"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "                questionId, isMissingResponsesShown, isStatsShown);"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a list of viewable feedback sessions for any user in the course."
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getFeedbackSessionsForUserInCourse(String courseId, String userEmail)"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(userEmail);"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionsForUserInCourse(courseId, userEmail);"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasStudentSubmittedFeedback(FeedbackSessionAttributes fsa, String studentEmail) {"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(fsa);"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(studentEmail);"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.isFeedbackSessionCompletedByStudent(fsa, studentEmail);"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the details of a feedback session by {@link FeedbackSessionAttributes.UpdateOptions}."
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eAdjust email sending status if necessary."
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return updated feedback session"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidParametersException if attributes to update are not valid"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EntityDoesNotExistException if the feedback session cannot be found"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionAttributes updateFeedbackSession(FeedbackSessionAttributes.UpdateOptions updateOptions)"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(updateOptions);"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.updateFeedbackSession(updateOptions);"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds an instructor with {@code email} in the instructor respondent set"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "     * in feedback session {@code feedbackSessionName} in {@code courseId}."
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addInstructorRespondent(String email, String feedbackSessionName, String courseId)"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException, InvalidParametersException {"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(email);"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "        feedbackSessionsLogic.addInstructorRespondent(email, feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a student with {@code email} in the student respondent set"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "     * in feedback session {@code feedbackSessionName} in {@code courseId}."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addStudentRespondent(String email, String feedbackSessionName, String courseId)"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException, InvalidParametersException {"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(email);"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "        feedbackSessionsLogic.addStudentRespondent(email, feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes an instructor with {@code email} in the instructor respondent set"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "     * in session {@code feedbackSessionName} of course {@code courseId}."
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteInstructorRespondent(String email, String feedbackSessionName, String courseId)"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException, InvalidParametersException {"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(email);"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "        feedbackSessionsLogic.deleteInstructorRespondent(email, feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes a student with {@code email} in the student respondent set"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": "     * in session {@code feedbackSessionName} of course {@code courseId}."
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteStudentRespondent(String email, String feedbackSessionName, String courseId)"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException, InvalidParametersException {"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(email);"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "        feedbackSessionsLogic.deleteStudentFromRespondentList(email, feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "     * Publishes a feedback session."
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @return the published feedback session"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @throws EntityDoesNotExistException if the feedback session cannot be found"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidParametersException if session is already published"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public FeedbackSessionAttributes publishFeedbackSession(String feedbackSessionName, String courseId)"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException, InvalidParametersException {"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return feedbackSessionsLogic.publishFeedbackSession(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Unpublishes a feedback session."
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @return the unpublished feedback session"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @throws EntityDoesNotExistException if the feedback session cannot be found"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidParametersException"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "     *             if the feedback session is not ready to be unpublished."
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public FeedbackSessionAttributes unpublishFeedbackSession(String feedbackSessionName, String courseId)"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException, InvalidParametersException {"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return feedbackSessionsLogic.unpublishFeedbackSession(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes a feedback session cascade to its associated questions, responses and comments."
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteFeedbackSessionCascade(String feedbackSessionName, String courseId) {"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "        feedbackSessionsLogic.deleteFeedbackSessionCascade(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "     * Soft-deletes a specific session to Recycle Bin."
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "    public void moveFeedbackSessionToRecycleBin(String feedbackSessionName, String courseId)"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "        feedbackSessionsLogic.moveFeedbackSessionToRecycleBin(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores a specific session from Recycle Bin to feedback sessions table."
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "    public void restoreFeedbackSessionFromRecycleBin(String feedbackSessionName, String courseId)"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "        feedbackSessionsLogic.restoreFeedbackSessionFromRecycleBin(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores all sessions from Recycle Bin to feedback sessions table."
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "    public void restoreAllFeedbackSessionsFromRecycleBin(List\u003cInstructorAttributes\u003e instructorList)"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(instructorList);"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": "        feedbackSessionsLogic.restoreAllFeedbackSessionsFromRecycleBin(instructorList);"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new feedback question."
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the created question"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidParametersException if the question is invalid"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackQuestionAttributes createFeedbackQuestion(FeedbackQuestionAttributes feedbackQuestion)"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException {"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackQuestion);"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackQuestionsLogic.createFeedbackQuestion(feedbackQuestion);"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates a feedback question by {@code FeedbackQuestionAttributes.UpdateOptions}."
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eCascade adjust the question number of questions in the same session."
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eCascade adjust the existing response of the question."
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003e Preconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return updated feedback question"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidParametersException if attributes to update are not valid"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EntityDoesNotExistException if the feedback question cannot be found"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackQuestionAttributes updateFeedbackQuestionCascade(FeedbackQuestionAttributes.UpdateOptions updateOptions)"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(updateOptions);"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackQuestionsLogic.updateFeedbackQuestionCascade(updateOptions);"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes a feedback question cascade its responses and comments."
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eSilently fail if question does not exist."
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eThe respondent lists will also be updated due the deletion of question."
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteFeedbackQuestionCascade(String questionId) {"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(questionId);"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": "        feedbackQuestionsLogic.deleteFeedbackQuestionCascade(questionId);"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether there are responses for a question."
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean areThereResponsesForQuestion(String feedbackQuestionId) {"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackResponsesLogic.areThereResponsesForQuestion(feedbackQuestionId);"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets all copiable questions for an instructor\u003cbr\u003e"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an empty list if they are no questions"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "     * for the session."
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackQuestionAttributes\u003e getCopiableFeedbackQuestionsForInstructor(String googleId)"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(googleId);"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackQuestionsLogic.getCopiableFeedbackQuestionsForInstructor(googleId);"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets all questions for a feedback session.\u003cbr\u003e"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an empty list if they are no questions"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": "     * for the session."
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackQuestionAttributes\u003e getFeedbackQuestionsForSession(String feedbackSessionName, String courseId) {"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackQuestionsLogic.getFeedbackQuestionsForSession(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the response rate status for a session."
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003ePreconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see FeedbackSessionsLogic#getFeedbackSessionResponseStatus(String, String)"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionResponseStatus getFeedbackSessionResponseStatus(String feedbackSessionName, String courseId)"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionResponseStatus(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets a question+response bundle for questions with responses that"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": "     * is visible to the student for a feedback session."
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionResultsBundle getFeedbackSessionResultsForStudent(String feedbackSessionName,"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            String courseId, String userEmail)"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(userEmail);"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionResultsForStudent(feedbackSessionName, courseId, userEmail);"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets a question+response bundle for questions with responses that"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": "     * is visible to the instructor for a feedback session within the given range"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorWithinRangeFromView("
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail, int range, String viewType)"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(userEmail);"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(viewType);"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionResultsForInstructorWithinRangeFromView(feedbackSessionName,"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                               courseId, userEmail,"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                               range, viewType);"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets a question+response bundle for questions with responses that"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": "     * is visible to the instructor for a feedback session from a section within the given range"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorFromSectionWithinRange("
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail, String section, int range)"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(userEmail);"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionResultsForInstructorFromSectionWithinRange("
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": "                                        feedbackSessionName, courseId, userEmail, section, range);"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets a question+response bundle for questions with responses that"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "-"
        },
        "content": "     * is visible to the instructor for a feedback session to a section within the given range"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorToSectionWithinRange("
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail, String section, int range)"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(userEmail);"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionResultsForInstructorToSectionWithinRange("
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "-"
        },
        "content": "                                        feedbackSessionName, courseId, userEmail, section, range);"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets a question+response bundle for questions with responses that"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "-"
        },
        "content": "     * is visible to the instructor for a feedback session from a given question number"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "-"
        },
        "content": "     * This will not retrieve the list of comments for this question"
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorFromQuestion("
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail, String questionId)"
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(userEmail);"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionResultsForInstructorFromQuestion(feedbackSessionName, courseId,"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                        userEmail, questionId);"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets a question+response bundle for questions with responses that"
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "-"
        },
        "content": "     * is visible to the instructor for a feedback session from a given question number"
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "-"
        },
        "content": "     * in a given section."
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "-"
        },
        "content": "     * This will not retrieve the list of comments for this question"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorFromQuestionInSection("
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "-"
        },
        "content": "                                    String feedbackSessionName, String courseId, String userEmail,"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "-"
        },
        "content": "                                    String questionId, String selectedSection, SectionDetail selectedSectionDetail)"
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(userEmail);"
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(selectedSection);"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(selectedSectionDetail);"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionResultsForInstructorFromQuestionInSection("
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "-"
        },
        "content": "                                            feedbackSessionName, courseId, userEmail,"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "-"
        },
        "content": "                                            questionId, selectedSection, selectedSectionDetail);"
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets a question+response bundle for questions with responses that"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "-"
        },
        "content": "     * is visible to the instructor for a feedback session."
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructor("
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail)"
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(userEmail);"
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionResultsForInstructor(feedbackSessionName, courseId, userEmail);"
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets a question+response bundle for questions with responses that"
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "-"
        },
        "content": "     * is visible to the instructor for a feedback session in a specific section."
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorInSection(String feedbackSessionName,"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "-"
        },
        "content": "            String courseId, String userEmail, String section, SectionDetail sectionDetail)"
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(userEmail);"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(section);"
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(sectionDetail);"
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionResultsForInstructorInSection(feedbackSessionName, courseId,"
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                     userEmail, section, sectionDetail);"
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get existing feedback responses from student or his team for the given question."
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackResponseAttributes\u003e getFeedbackResponsesFromStudentOrTeamForQuestion("
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackQuestionAttributes question, StudentAttributes student) {"
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(question);"
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(student);"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackResponsesLogic.getFeedbackResponsesFromStudentOrTeamForQuestion(question, student);"
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get existing feedback responses from instructor for the given question."
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackResponseAttributes\u003e getFeedbackResponsesFromInstructorForQuestion("
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackQuestionAttributes question, InstructorAttributes instructorAttributes) {"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(question);"
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(instructorAttributes);"
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackResponsesLogic.getFeedbackResponsesFromGiverForQuestion("
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "-"
        },
        "content": "                question.getFeedbackQuestionId(), instructorAttributes.getEmail());"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackResponseAttributes getFeedbackResponse(String feedbackResponseId) {"
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackResponseId);"
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackResponsesLogic.getFeedbackResponse(feedbackResponseId);"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackResponseAttributes getFeedbackResponse(String feedbackQuestionId,"
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "-"
        },
        "content": "                                                          String giverEmail,"
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "-"
        },
        "content": "                                                          String recipient) {"
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackQuestionId);"
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(giverEmail);"
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(recipient);"
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackResponsesLogic.getFeedbackResponse(feedbackQuestionId, giverEmail, recipient);"
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a feedback response."
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return created feedback response"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidParametersException if the response is not valid"
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EntityAlreadyExistsException if the response already exist"
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackResponseAttributes createFeedbackResponse(FeedbackResponseAttributes feedbackResponse)"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityAlreadyExistsException {"
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackResponse);"
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackResponsesLogic.createFeedbackResponse(feedbackResponse);"
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasGiverRespondedForSession(String userEmail, String feedbackSessionName, String courseId) {"
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(userEmail);"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackResponsesLogic.hasGiverRespondedForSession(userEmail, feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasResponsesForCourse(String courseId) {"
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackResponsesLogic.hasResponsesForCourse(courseId);"
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isOpenOrPublishedEmailSentForTheCourse(String courseId) {"
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.isOpenOrPublishedEmailSentForTheCourse(courseId);"
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates a feedback response by {@link FeedbackResponseAttributes.UpdateOptions}."
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eCascade updates its associated feedback response comment"
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "-"
        },
        "content": "     * (e.g. associated response ID, giverSection and recipientSection)."
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eIf the giver/recipient field is changed, the response is updated by recreating the response"
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "-"
        },
        "content": "     * as question-giver-recipient is the primary key."
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return updated feedback response"
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidParametersException if attributes to update are not valid"
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EntityDoesNotExistException if the comment cannot be found"
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EntityAlreadyExistsException if the response cannot be updated"
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "-"
        },
        "content": "     *         by recreation because of an existent response"
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackResponseAttributes updateFeedbackResponseCascade(FeedbackResponseAttributes.UpdateOptions updateOptions)"
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {"
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(updateOptions);"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackResponsesLogic.updateFeedbackResponseCascade(updateOptions);"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes a feedback response cascade its associated comments."
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eThe respondent lists will NOT be updated."
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteFeedbackResponseCascade(String responseId) {"
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(responseId);"
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "-"
        },
        "content": "        feedbackResponsesLogic.deleteFeedbackResponseCascade(responseId);"
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "-"
        },
        "content": "     * Create a feedback response comment, and return the created comment."
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackResponseCommentAttributes createFeedbackResponseComment("
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackResponseCommentAttributes feedbackResponseComment)"
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {"
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackResponseComment);"
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackResponseCommentsLogic.createFeedbackResponseComment(feedbackResponseComment);"
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackResponseCommentAttributes getFeedbackResponseComment(Long feedbackResponseCommentId) {"
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackResponseCommentId);"
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackResponseCommentsLogic.getFeedbackResponseComment(feedbackResponseCommentId);"
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "-"
        },
        "content": "     * Preconditions: \u003cbr\u003e"
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackResponseCommentAttributes getFeedbackResponseComment("
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "-"
        },
        "content": "            String responseId, String giverEmail, Instant creationDate) {"
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(responseId);"
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(giverEmail);"
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(creationDate);"
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackResponseCommentsLogic.getFeedbackResponseComment(responseId, giverEmail, creationDate);"
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackResponseCommentAttributes\u003e getFeedbackResponseCommentForGiver(String courseId,"
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                      String giverEmail) {"
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(giverEmail);"
      },
      {
        "lineNumber": 1869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1870,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackResponseCommentsLogic.getFeedbackResponseCommentsForGiver(courseId, giverEmail);"
      },
      {
        "lineNumber": 1871,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1873,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1874,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates or updates document for the given comment."
      },
      {
        "lineNumber": 1875,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1876,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see FeedbackResponseCommentsLogic#putDocument(FeedbackResponseCommentAttributes)"
      },
      {
        "lineNumber": 1877,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1878,
        "author": {
          "gitId": "-"
        },
        "content": "    public void putDocument(FeedbackResponseCommentAttributes comment) {"
      },
      {
        "lineNumber": 1879,
        "author": {
          "gitId": "-"
        },
        "content": "        feedbackResponseCommentsLogic.putDocument(comment);"
      },
      {
        "lineNumber": 1880,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1882,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1883,
        "author": {
          "gitId": "-"
        },
        "content": "     * Batch creates or updates documents for the given comments."
      },
      {
        "lineNumber": 1884,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1885,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see FeedbackResponseCommentsLogic#putDocuments(List)"
      },
      {
        "lineNumber": 1886,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1887,
        "author": {
          "gitId": "-"
        },
        "content": "    public void putFeedbackResponseCommentDocuments(List\u003cFeedbackResponseCommentAttributes\u003e comments) {"
      },
      {
        "lineNumber": 1888,
        "author": {
          "gitId": "-"
        },
        "content": "        feedbackResponseCommentsLogic.putDocuments(comments);"
      },
      {
        "lineNumber": 1889,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1891,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1892,
        "author": {
          "gitId": "-"
        },
        "content": "     * Search for FeedbackResponseComment. Preconditions: all parameters are non-null."
      },
      {
        "lineNumber": 1893,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instructors   a list of InstructorAttributes associated to a googleId,"
      },
      {
        "lineNumber": 1894,
        "author": {
          "gitId": "-"
        },
        "content": "     *                      used for filtering of search result"
      },
      {
        "lineNumber": 1895,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Null if no match found"
      },
      {
        "lineNumber": 1896,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1897,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackResponseCommentSearchResultBundle searchFeedbackResponseComments(String queryString,"
      },
      {
        "lineNumber": 1898,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                         List\u003cInstructorAttributes\u003e instructors) {"
      },
      {
        "lineNumber": 1899,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(queryString);"
      },
      {
        "lineNumber": 1900,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(instructors);"
      },
      {
        "lineNumber": 1901,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackResponseCommentsLogic.searchFeedbackResponseComments(queryString, instructors);"
      },
      {
        "lineNumber": 1902,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1904,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1905,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates a feedback response comment by {@link FeedbackResponseCommentAttributes.UpdateOptions}."
      },
      {
        "lineNumber": 1906,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1907,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"
      },
      {
        "lineNumber": 1908,
        "author": {
          "gitId": "-"
        },
        "content": "     * * All parameters are non-null."
      },
      {
        "lineNumber": 1909,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1910,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return updated comment"
      },
      {
        "lineNumber": 1911,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidParametersException if attributes to update are not valid"
      },
      {
        "lineNumber": 1912,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EntityDoesNotExistException if the comment cannot be found"
      },
      {
        "lineNumber": 1913,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1914,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackResponseCommentAttributes updateFeedbackResponseComment("
      },
      {
        "lineNumber": 1915,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackResponseCommentAttributes.UpdateOptions updateOptions)"
      },
      {
        "lineNumber": 1916,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException, InvalidParametersException {"
      },
      {
        "lineNumber": 1917,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(updateOptions);"
      },
      {
        "lineNumber": 1918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1919,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackResponseCommentsLogic.updateFeedbackResponseComment(updateOptions);"
      },
      {
        "lineNumber": 1920,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1922,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1923,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes a comment."
      },
      {
        "lineNumber": 1924,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1925,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteFeedbackResponseComment(long commentId) {"
      },
      {
        "lineNumber": 1926,
        "author": {
          "gitId": "-"
        },
        "content": "        feedbackResponseCommentsLogic.deleteFeedbackResponseComment(commentId);"
      },
      {
        "lineNumber": 1927,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1929,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getArchivedCourseIds(List\u003cCourseAttributes\u003e allCourses,"
      },
      {
        "lineNumber": 1930,
        "author": {
          "gitId": "-"
        },
        "content": "                                             Map\u003cString, InstructorAttributes\u003e instructorsForCourses) {"
      },
      {
        "lineNumber": 1931,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(allCourses);"
      },
      {
        "lineNumber": 1932,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(instructorsForCourses);"
      },
      {
        "lineNumber": 1933,
        "author": {
          "gitId": "-"
        },
        "content": "        return coursesLogic.getArchivedCourseIds(allCourses, instructorsForCourses);"
      },
      {
        "lineNumber": 1934,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1936,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackResponseAttributes\u003e"
      },
      {
        "lineNumber": 1937,
        "author": {
          "gitId": "-"
        },
        "content": "            getFeedbackResponsesForSession(String feedbackSessionName, String courseId) {"
      },
      {
        "lineNumber": 1938,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(feedbackSessionName);"
      },
      {
        "lineNumber": 1939,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1940,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackResponsesLogic.getFeedbackResponsesForSession(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1941,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1943,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1944,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns returns a list of sessions that were closed within past hour."
      },
      {
        "lineNumber": 1945,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1946,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see FeedbackSessionsLogic#getFeedbackSessionsClosedWithinThePastHour()"
      },
      {
        "lineNumber": 1947,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1948,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getFeedbackSessionsClosedWithinThePastHour() {"
      },
      {
        "lineNumber": 1949,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionsClosedWithinThePastHour();"
      },
      {
        "lineNumber": 1950,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1952,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getFeedbackSessionsClosingWithinTimeLimit() {"
      },
      {
        "lineNumber": 1953,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionsClosingWithinTimeLimit();"
      },
      {
        "lineNumber": 1954,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1956,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1957,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of sessions that require automated emails to be sent as they are published."
      },
      {
        "lineNumber": 1958,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1959,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see FeedbackSessionsLogic#getFeedbackSessionsWhichNeedAutomatedPublishedEmailsToBeSent()"
      },
      {
        "lineNumber": 1960,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1961,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getFeedbackSessionsWhichNeedAutomatedPublishedEmailsToBeSent() {"
      },
      {
        "lineNumber": 1962,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionsWhichNeedAutomatedPublishedEmailsToBeSent();"
      },
      {
        "lineNumber": 1963,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1965,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getFeedbackSessionsWhichNeedOpenEmailsToBeSent() {"
      },
      {
        "lineNumber": 1966,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackSessionsLogic.getFeedbackSessionsWhichNeedOpenEmailsToBeSent();"
      },
      {
        "lineNumber": 1967,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1969,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSectionForTeam(String courseId, String teamName) {"
      },
      {
        "lineNumber": 1970,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(courseId);"
      },
      {
        "lineNumber": 1971,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(teamName);"
      },
      {
        "lineNumber": 1972,
        "author": {
          "gitId": "-"
        },
        "content": "        return studentsLogic.getSectionForTeam(courseId, teamName);"
      },
      {
        "lineNumber": 1973,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1975,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1976,
        "author": {
          "gitId": "-"
        },
        "content": "     * Persists the given data bundle to the datastore."
      },
      {
        "lineNumber": 1977,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1978,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DataBundleLogic#persistDataBundle(DataBundle)"
      },
      {
        "lineNumber": 1979,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1980,
        "author": {
          "gitId": "-"
        },
        "content": "    public void persistDataBundle(DataBundle dataBundle) throws InvalidParametersException {"
      },
      {
        "lineNumber": 1981,
        "author": {
          "gitId": "-"
        },
        "content": "        dataBundleLogic.persistDataBundle(dataBundle);"
      },
      {
        "lineNumber": 1982,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1984,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1985,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the given data bundle from the datastore."
      },
      {
        "lineNumber": 1986,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1987,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DataBundleLogic#removeDataBundle(DataBundle)"
      },
      {
        "lineNumber": 1988,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1989,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeDataBundle(DataBundle dataBundle) {"
      },
      {
        "lineNumber": 1990,
        "author": {
          "gitId": "-"
        },
        "content": "        dataBundleLogic.removeDataBundle(dataBundle);"
      },
      {
        "lineNumber": 1991,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1993,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1994,
        "author": {
          "gitId": "-"
        },
        "content": "     * Puts searchable documents from the data bundle to the datastore."
      },
      {
        "lineNumber": 1995,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1996,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DataBundleLogic#putDocuments(DataBundle)"
      },
      {
        "lineNumber": 1997,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1998,
        "author": {
          "gitId": "-"
        },
        "content": "    public void putDocuments(DataBundle dataBundle) {"
      },
      {
        "lineNumber": 1999,
        "author": {
          "gitId": "-"
        },
        "content": "        dataBundleLogic.putDocuments(dataBundle);"
      },
      {
        "lineNumber": 2000,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2002,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 17,
      "-": 1985
    }
  },
  {
    "path": "src/main/java/teammates/logic/core/FeedbackSessionsLogic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package teammates.logic.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.AttributesDeletionQuery;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.CourseRoster;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.FeedbackParticipantType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.FeedbackSessionDetailsBundle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.FeedbackSessionQuestionsBundle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.FeedbackSessionResponseStatus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.FeedbackSessionResultsBundle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.SectionDetail;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.UserRole;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.InstructorAttributes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.StudentAttributes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.questions.FeedbackQuestionDetails;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.exception.EntityAlreadyExistsException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.exception.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.exception.ExceedingRangeException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.exception.InvalidParametersException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.util.Assumption;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.util.Const;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.util.Const.SystemParams;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.util.Logger;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.util.SanitizationHelper;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.util.StringHelper;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.util.TimeHelper;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.storage.api.FeedbackSessionsDb;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * Handles operations related to feedback sessions."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " * @see FeedbackSessionAttributes"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * @see FeedbackSessionsDb"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public final class FeedbackSessionsLogic {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger log \u003d Logger.getLogger();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String QUESTION_ID_FOR_RESPONSE_RATE \u003d \"-1\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int EMAIL_NAME_PAIR \u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int EMAIL_LASTNAME_PAIR \u003d 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int EMAIL_TEAMNAME_PAIR \u003d 2;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PARAM_FROM_SECTION \u003d \"fromSection\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PARAM_IN_SECTION \u003d \"inSection\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PARAM_IS_INCLUDE_RESPONSE_STATUS \u003d \"isIncludeResponseStatus\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PARAM_QUESTION_ID \u003d \"questionId\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PARAM_RANGE \u003d \"range\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PARAM_SECTION \u003d \"section\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PARAM_TO_SECTION \u003d \"toSection\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PARAM_VIEW_TYPE \u003d \"viewType\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ASSUMPTION_FAIL_DELETE_INSTRUCTOR \u003d \"Fail to delete instructor respondent for \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ASSUMPTION_FAIL_RESPONSE_ORIGIN \u003d \"Client did not indicate the origin of the response(s)\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_NUMBER_OF_RESPONSES_EXCEEDS_RANGE \u003d \"Number of responses exceeds the limited range\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_NON_EXISTENT_COURSE \u003d \"Error getting feedback session(s): Course does not exist.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_NON_EXISTENT_STUDENT \u003d \"Error getting feedback session(s): Student does not exist.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_NON_EXISTENT_FS_STRING_FORMAT \u003d \"Trying to %s a non-existent feedback session: \";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_NON_EXISTENT_FS_GET \u003d String.format(ERROR_NON_EXISTENT_FS_STRING_FORMAT, \"get\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_NON_EXISTENT_FS_UPDATE \u003d String.format(ERROR_NON_EXISTENT_FS_STRING_FORMAT, \"update\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_NON_EXISTENT_FS_CHECK \u003d String.format(ERROR_NON_EXISTENT_FS_STRING_FORMAT, \"check\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_NON_EXISTENT_FS_VIEW \u003d String.format(ERROR_NON_EXISTENT_FS_STRING_FORMAT, \"view\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_FS_ALREADY_PUBLISH \u003d \"Error publishing feedback session: \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                                                           + \"Session has already been published.\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_FS_ALREADY_UNPUBLISH \u003d \"Error unpublishing feedback session: \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                                             + \"Session has already been unpublished.\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FeedbackSessionsLogic instance \u003d new FeedbackSessionsLogic();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final FeedbackSessionsDb fsDb \u003d new FeedbackSessionsDb();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CoursesLogic coursesLogic \u003d CoursesLogic.inst();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final FeedbackQuestionsLogic fqLogic \u003d FeedbackQuestionsLogic.inst();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final FeedbackResponsesLogic frLogic \u003d FeedbackResponsesLogic.inst();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final FeedbackResponseCommentsLogic frcLogic \u003d FeedbackResponseCommentsLogic.inst();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final InstructorsLogic instructorsLogic \u003d InstructorsLogic.inst();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final StudentsLogic studentsLogic \u003d StudentsLogic.inst();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private FeedbackSessionsLogic() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // prevent initialization"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static FeedbackSessionsLogic inst() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a feedback session."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return created feedback session"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidParametersException if the session is not valid"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EntityAlreadyExistsException if the session already exist"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionAttributes createFeedbackSession(FeedbackSessionAttributes fsa)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityAlreadyExistsException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return fsDb.createEntity(fsa);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getAllOngoingSessions(Instant rangeStart, Instant rangeEnd) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return fsDb.getAllOngoingSessions(rangeStart, rangeEnd);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets a feedback session from the data storage."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return null if not found or in recycle bin."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionAttributes getFeedbackSession(String feedbackSessionName, String courseId) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return fsDb.getFeedbackSession(courseId, feedbackSessionName);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets a feedback session from the recycle bin."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return null if not found."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionAttributes getFeedbackSessionFromRecycleBin(String feedbackSessionName, String courseId) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return fsDb.getSoftDeletedFeedbackSession(courseId, feedbackSessionName);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getFeedbackSessionsForCourse("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            String courseId) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return fsDb.getFeedbackSessionsForCourse(courseId);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if the specified course exists, then gets the feedback sessions for"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * the specified user in the course if it does exist."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a list of viewable feedback sessions for any user for his course."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getFeedbackSessionsForUserInCourse("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            String courseId, String userEmail)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!coursesLogic.isCoursePresent(courseId)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EntityDoesNotExistException(ERROR_NON_EXISTENT_COURSE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return getFeedbackSessionsForUserInCourseSkipCheck(courseId, userEmail);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the feedback sessions for the specified user in the specified course"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * without checking for the course\u0027s existence.\u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method is usually called after the course\u0027s existence is assumed or"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * has been verified."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a list of viewable feedback sessions for any user for his course."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getFeedbackSessionsForUserInCourseSkipCheck("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            String courseId, String userEmail) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e sessions \u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                getFeedbackSessionsForCourse(courseId);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e viewableSessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!sessions.isEmpty()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            InstructorAttributes instructor \u003d instructorsLogic.getInstructorForEmail(courseId, userEmail);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isInstructorOfCourse \u003d instructor !\u003d null;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            for (FeedbackSessionAttributes session : sessions) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isFeedbackSessionViewableTo(session, isInstructorOfCourse)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                    viewableSessions.add(session);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return viewableSessions;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of feedback sessions within the time range or an empty list if nothing was found."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getAllFeedbackSessionsWithinTimeRange(Instant rangeStart, Instant rangeEnd) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return fsDb.getFeedbackSessionsWithinTimeRange(rangeStart, rangeEnd);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if there is some open or published email sent for the course."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param courseId - ID of the course"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isOpenOrPublishedEmailSentForTheCourse(String courseId) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e sessions \u003d getFeedbackSessionsForCourse(courseId);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackSessionAttributes session : sessions) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            if (session.isSentOpenEmail() || session.isSentPublishedEmail()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code List} of all feedback sessions bundled with their"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * response statistics for a instructor given by his googleId.\u003cbr\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Does not return private sessions unless the instructor is the creator."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionDetailsBundle\u003e getFeedbackSessionDetailsForInstructor("
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            String googleId)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        return getFeedbackSessionDetailsForInstructor(googleId, false);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code List} of all feedback sessions bundled with their"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * response statistics for a instructor given by his googleId.\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Does not return private sessions unless the instructor is the creator."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * Omits archived sessions if omitArchived \u003d\u003d true"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionDetailsBundle\u003e getFeedbackSessionDetailsForInstructor("
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            String googleId, boolean omitArchived)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionDetailsBundle\u003e fsDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cInstructorAttributes\u003e instructors \u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                instructorsLogic.getInstructorsForGoogleId(googleId, omitArchived);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        for (InstructorAttributes instructor : instructors) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            fsDetails.addAll(getFeedbackSessionDetailsForCourse(instructor.courseId));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        return fsDetails;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code List} of all feedback sessions WITHOUT their response"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * statistics for a instructor given by his googleId.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Does not return private sessions unless the instructor is the creator."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * Omits sessions from archived courses if omitArchived \u003d\u003d true"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getFeedbackSessionsListForInstructor(String googleId, boolean omitArchived) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cInstructorAttributes\u003e instructorList \u003d"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                instructorsLogic.getInstructorsForGoogleId(googleId, omitArchived);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        return getFeedbackSessionsListForInstructor(instructorList);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getFeedbackSessionsListForInstructor("
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cInstructorAttributes\u003e instructorList) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cInstructorAttributes\u003e courseNotDeletedInstructorList \u003d instructorList.stream()"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(instructor -\u003e !coursesLogic.getCourse(instructor.courseId).isCourseDeleted())"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e fsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        for (InstructorAttributes instructor : courseNotDeletedInstructorList) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            fsList.addAll(getFeedbackSessionsListForCourse(instructor.courseId));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        return fsList;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code List} of feedback sessions in the Recycle Bin for a specific instructor."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Omits sessions if the corresponding course is archived or in Recycle Bin"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getSoftDeletedFeedbackSessionsListForInstructor(InstructorAttributes instructor) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e fsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        if (coursesLogic.getCourse(instructor.courseId).isCourseDeleted()) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            return fsList;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        fsList.addAll(getSoftDeletedFeedbackSessionsListForCourse(instructor.courseId));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        return fsList;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code List} of feedback sessions in the Recycle Bin for the instructors."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Omits sessions if the corresponding courses are archived or in Recycle Bin"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getSoftDeletedFeedbackSessionsListForInstructors("
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cInstructorAttributes\u003e instructorList) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cInstructorAttributes\u003e courseNotDeletedInstructorList \u003d instructorList.stream()"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(instructor -\u003e !coursesLogic.getCourse(instructor.courseId).isCourseDeleted())"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e fsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        for (InstructorAttributes instructor : courseNotDeletedInstructorList) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            fsList.addAll(getSoftDeletedFeedbackSessionsListForCourse(instructor.courseId));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        return fsList;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getFeedbackSessionListForInstructor("
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            InstructorAttributes instructor) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        if (coursesLogic.getCourse(instructor.courseId).isCourseDeleted()) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        return getFeedbackSessionsListForCourse(instructor.courseId);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets {@code FeedbackQuestions} and previously filled"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code FeedbackResponses} that an instructor can view/submit as a"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link FeedbackSessionQuestionsBundle}."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionQuestionsBundle getFeedbackSessionQuestionsForInstructor("
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes fsa \u003d fsDb.getFeedbackSession("
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "                courseId, feedbackSessionName);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        if (fsa \u003d\u003d null) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EntityDoesNotExistException(ERROR_NON_EXISTENT_FS_GET + courseId + \"/\" + feedbackSessionName);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        InstructorAttributes instructor \u003d instructorsLogic.getInstructorForEmail(courseId, userEmail);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cFeedbackQuestionAttributes, List\u003cFeedbackResponseAttributes\u003e\u003e bundle \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, Map\u003cString, String\u003e\u003e recipientList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackQuestionAttributes\u003e questions \u003d"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "                fqLogic.getFeedbackQuestionsForInstructor(feedbackSessionName,"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "                        courseId, userEmail);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, List\u003cFeedbackResponseCommentAttributes\u003e\u003e commentsForResponses \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        CourseRoster roster \u003d new CourseRoster(studentsLogic.getStudentsForCourse(courseId),"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "                instructorsLogic.getInstructorsForCourse(courseId));"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackQuestionAttributes question : questions) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "            updateBundleAndRecipientListWithResponsesForInstructor(courseId,"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "                    userEmail, fsa, instructor, bundle, recipientList,"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "                    question, instructor, null);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "            updateBundleWithCommentsForResponses(bundle.get(question), commentsForResponses);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FeedbackSessionQuestionsBundle(fsa, bundle, recipientList, commentsForResponses, roster);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateBundleAndRecipientListWithResponsesForInstructor("
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "            String courseId,"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "            String userEmail,"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackSessionAttributes fsa,"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            InstructorAttributes instructor,"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            Map\u003cFeedbackQuestionAttributes, List\u003cFeedbackResponseAttributes\u003e\u003e bundle,"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "            Map\u003cString, Map\u003cString, String\u003e\u003e recipientList,"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackQuestionAttributes question,"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "            InstructorAttributes instructorGiver, StudentAttributes studentGiver)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackResponseAttributes\u003e responses \u003d"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "                frLogic.getFeedbackResponsesFromGiverForQuestion("
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "                        question.getId(), userEmail);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e recipients \u003d"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "                fqLogic.getRecipientsForQuestion(question, userEmail, instructorGiver, studentGiver);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        // instructor can only see students in allowed sections for him/her"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        if (question.recipientType.equals(FeedbackParticipantType.STUDENTS)) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "            recipients.entrySet().removeIf(studentEntry -\u003e {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "                StudentAttributes student \u003d studentsLogic.getStudentForEmail(courseId, studentEntry.getKey());"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "                return !instructor.isAllowedForPrivilege(student.section,"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "                        fsa.getFeedbackSessionName(), Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        // instructor can only see teams in allowed sections for him/her"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        if (question.recipientType.equals(FeedbackParticipantType.TEAMS)) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "            recipients.entrySet().removeIf(teamEntry -\u003e {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "                String teamSection \u003d studentsLogic.getSectionForTeam(courseId, teamEntry.getKey());"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "                return !instructor.isAllowedForPrivilege(teamSection,"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "                        fsa.getFeedbackSessionName(), Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        normalizeMaximumResponseEntities(question, recipients);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        bundle.put(question, responses);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        recipientList.put(question.getId(), recipients);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets {@code FeedbackQuestions} and previously filled"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code FeedbackResponses} that a student can view/submit as a"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link FeedbackSessionQuestionsBundle}."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionQuestionsBundle getFeedbackSessionQuestionsForStudent("
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail)"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes fsa \u003d fsDb.getFeedbackSession("
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "                courseId, feedbackSessionName);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        if (fsa \u003d\u003d null) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EntityDoesNotExistException(ERROR_NON_EXISTENT_FS_GET + courseId + \"/\" + feedbackSessionName);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "        StudentAttributes student \u003d studentsLogic.getStudentForEmail(courseId, userEmail);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        if (student \u003d\u003d null) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EntityDoesNotExistException(ERROR_NON_EXISTENT_STUDENT);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cFeedbackQuestionAttributes, List\u003cFeedbackResponseAttributes\u003e\u003e bundle \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, Map\u003cString, String\u003e\u003e recipientList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackQuestionAttributes\u003e questions \u003d fqLogic.getFeedbackQuestionsForStudents(feedbackSessionName,"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "                courseId);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cString\u003e hiddenInstructorEmails \u003d null;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, List\u003cFeedbackResponseCommentAttributes\u003e\u003e commentsForResponses \u003d"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "                new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        CourseRoster roster \u003d new CourseRoster(studentsLogic.getStudentsForCourse(courseId),"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "                instructorsLogic.getInstructorsForCourse(courseId));"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackQuestionAttributes question : questions) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "            if (question.getRecipientType() \u003d\u003d FeedbackParticipantType.INSTRUCTORS) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "                hiddenInstructorEmails \u003d getHiddenInstructorEmails(courseId);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackQuestionAttributes question : questions) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "            updateBundleAndRecipientListWithResponsesForStudent(userEmail, student,"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "                    bundle, recipientList, question, hiddenInstructorEmails);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "            updateBundleWithCommentsForResponses(bundle.get(question), commentsForResponses);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FeedbackSessionQuestionsBundle(fsa, bundle, recipientList, commentsForResponses, roster);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateBundleWithCommentsForResponses(List\u003cFeedbackResponseAttributes\u003e responses,"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "                                                 Map\u003cString, List\u003cFeedbackResponseCommentAttributes\u003e\u003e commentsForResponses) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackResponseAttributes response : responses) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cFeedbackResponseCommentAttributes\u003e comments \u003d"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "                    frcLogic.getFeedbackResponseCommentForResponse(response.getId());"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "            commentsForResponses.put(response.getId(), comments);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateBundleAndRecipientListWithResponsesForStudent("
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "            String userEmail,"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "            StudentAttributes student,"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "            Map\u003cFeedbackQuestionAttributes, List\u003cFeedbackResponseAttributes\u003e\u003e bundle,"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "            Map\u003cString, Map\u003cString, String\u003e\u003e recipientList,"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackQuestionAttributes question,"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cString\u003e hiddenInstructorEmails)"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackResponseAttributes\u003e responses \u003d"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "                frLogic.getFeedbackResponsesFromStudentOrTeamForQuestion("
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "                        question, student);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e recipients \u003d"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "                fqLogic.getRecipientsForQuestion(question, userEmail, null, student);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHiddenInstructors(question, responses, recipients, hiddenInstructorEmails);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "        normalizeMaximumResponseEntities(question, recipients);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        bundle.put(question, responses);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        recipientList.put(question.getId(), recipients);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes instructors who are not displayed to students from"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code recipients}. Responses to the hidden instructors are also removed"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "     * from {@code responses}."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param question"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "     *            the feedback question"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param responses"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "     *            a {@link List} of feedback responses to the {@code question}"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param recipients"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "     *            a {@link Map} that maps the emails of the recipients to their"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "     *            names"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param hiddenInstructorEmails"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "     *            a {@link Set} of emails of the instructors who are not"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "     *            displayed to students"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeHiddenInstructors(FeedbackQuestionAttributes question,"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "                                         List\u003cFeedbackResponseAttributes\u003e responses,"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "                                         Map\u003cString, String\u003e recipients,"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "                                         Set\u003cString\u003e hiddenInstructorEmails) {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isNoChangeRequired \u003d hiddenInstructorEmails \u003d\u003d null"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "                                   || hiddenInstructorEmails.isEmpty()"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "                                   || question.getRecipientType() !\u003d FeedbackParticipantType.INSTRUCTORS;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isNoChangeRequired) {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String instructorEmail : hiddenInstructorEmails) {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "            if (recipients.containsKey(instructorEmail)) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "                recipients.remove(instructorEmail);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "            // Remove responses to the hidden instructors if they have been stored already"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "            responses.removeIf(response -\u003e response.recipient.equals(instructorEmail));"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@link Set} of emails of the instructors who are not displayed"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "     * to students in the course specified by {@code courseId}."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param courseId"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "     *            the ID of the course"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cString\u003e getHiddenInstructorEmails(String courseId) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cInstructorAttributes\u003e instructors \u003d instructorsLogic.getInstructorsForCourse(courseId);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cString\u003e hiddenInstructorEmails \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "        for (InstructorAttributes instructor : instructors) {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!instructor.isDisplayedToStudents()) {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "                hiddenInstructorEmails.add(instructor.email);"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "        return hiddenInstructorEmails;"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the response rate status for a session."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionResponseStatus getFeedbackSessionResponseStatus(String feedbackSessionName, String courseId)"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session \u003d fsDb.getFeedbackSession("
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "                courseId, feedbackSessionName);"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "        if (session \u003d\u003d null) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EntityDoesNotExistException(ERROR_NON_EXISTENT_FS_VIEW + courseId + \"/\" + feedbackSessionName);"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackQuestionAttributes\u003e allQuestions \u003d fqLogic.getFeedbackQuestionsForSession(feedbackSessionName,"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "                        courseId);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "        CourseRoster roster \u003d new CourseRoster(studentsLogic.getStudentsForCourse(courseId),"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "                                               instructorsLogic.getInstructorsForCourse(courseId));"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "        return getFeedbackSessionResponseStatus(session, roster, allQuestions);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "    private FeedbackSessionResponseStatus getFeedbackSessionResponseStatus("
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackSessionAttributes fsa, CourseRoster roster,"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cFeedbackQuestionAttributes\u003e questions) {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionResponseStatus responseStatus \u003d new FeedbackSessionResponseStatus();"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cStudentAttributes\u003e students \u003d roster.getStudents();"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cInstructorAttributes\u003e instructors \u003d roster.getInstructors();"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackQuestionAttributes\u003e studentQns \u003d fqLogic"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "                .getFeedbackQuestionsForStudents(questions);"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e studentNoResponses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e studentResponded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e instructorNoResponses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!studentQns.isEmpty()) {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "            for (StudentAttributes student : students) {"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "                studentNoResponses.add(student.email);"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "                responseStatus.emailNameTable.put(student.email, student.name);"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "                responseStatus.emailSectionTable.put(student.email, student.section);"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "                responseStatus.emailTeamNameTable.put(student.email, student.team);"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "        studentNoResponses.removeAll(fsa.getRespondingStudentList());"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "        studentResponded.addAll(fsa.getRespondingStudentList());"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "        for (InstructorAttributes instructor : instructors) {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cFeedbackQuestionAttributes\u003e instructorQns \u003d fqLogic"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "                    .getFeedbackQuestionsForInstructor(questions,"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "                            fsa.isCreator(instructor.email));"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!instructorQns.isEmpty() \u0026\u0026 responseStatus.emailNameTable.get(instructor.email) \u003d\u003d null) {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "                instructorNoResponses.add(instructor.email);"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "                responseStatus.emailNameTable.put(instructor.email, instructor.name);"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "        instructorNoResponses.removeAll(fsa.getRespondingInstructorList());"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "        responseStatus.studentsWhoDidNotRespond.addAll(studentNoResponses);"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "        responseStatus.studentsWhoResponded.addAll(studentResponded);"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "        responseStatus.studentsWhoDidNotRespond.addAll(instructorNoResponses);"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "        return responseStatus;"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets results of a feedback session to show to an instructor from an indicated question."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "     * This will not retrieve the list of comments for this question."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorFromQuestion("
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail, String questionId)"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "                    throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "        // Load details of students and instructors once and pass it to callee"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "        // methods"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "        // (rather than loading them many times)."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "        CourseRoster roster \u003d new CourseRoster("
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "                studentsLogic.getStudentsForCourse(courseId),"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "                instructorsLogic.getInstructorsForCourse(courseId));"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_IS_INCLUDE_RESPONSE_STATUS, \"true\");"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_IN_SECTION, \"false\");"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_FROM_SECTION, \"false\");"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_TO_SECTION, \"false\");"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_QUESTION_ID, questionId);"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "        return getFeedbackSessionResultsForUserWithParams(feedbackSessionName, courseId, userEmail,"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "                                                          UserRole.INSTRUCTOR, roster, params, SectionDetail.NOT_APPLICABLE);"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets results of a feedback session to show to an instructor from an indicated question"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "     * and in a section."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "     * This will not retrieve the list of comments for this question."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorFromQuestionInSection("
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail, String questionId,"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "            String selectedSection, SectionDetail selectedSectionDetail)"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "        CourseRoster roster \u003d new CourseRoster("
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "                studentsLogic.getStudentsForCourse(courseId),"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "                instructorsLogic.getInstructorsForCourse(courseId));"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e params \u003d initializeParamsWithSelectedSectionDetail(selectedSectionDetail);"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_IS_INCLUDE_RESPONSE_STATUS, \"true\");"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_QUESTION_ID, questionId);"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_SECTION, selectedSection);"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "        return getFeedbackSessionResultsForUserWithParams(feedbackSessionName, courseId, userEmail,"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "                                                          UserRole.INSTRUCTOR, roster, params, selectedSectionDetail);"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets results of a feedback session to show to an instructor in an indicated range."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorWithinRangeFromView("
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail, int range, String viewType)"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "        return getFeedbackSessionResultsForInstructorInSectionWithinRangeFromView("
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "                feedbackSessionName, courseId, userEmail, null, SectionDetail.NOT_APPLICABLE,"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "                range, viewType);"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets results of a feedback session to show to an instructor in a section in an indicated range."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorInSectionWithinRangeFromView("
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail, String section, SectionDetail sectionDetail,"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "            int range, String viewType)"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "        CourseRoster roster \u003d new CourseRoster("
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "                studentsLogic.getStudentsForCourse(courseId),"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "                instructorsLogic.getInstructorsForCourse(courseId));"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e params \u003d initializeParamsWithSelectedSectionDetail(sectionDetail);"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_IS_INCLUDE_RESPONSE_STATUS, \"true\");"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_SECTION, section);"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "        if (range \u003e 0) {"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "            params.put(PARAM_RANGE, String.valueOf(range));"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_VIEW_TYPE, viewType);"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "        return getFeedbackSessionResultsForUserWithParams(feedbackSessionName, courseId, userEmail,"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "                                                          UserRole.INSTRUCTOR, roster, params, sectionDetail);"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets results of a feedback session to show to an instructor in a section in an indicated range."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorFromSectionWithinRange("
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail, String section, int range)"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "        CourseRoster roster \u003d new CourseRoster("
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "                studentsLogic.getStudentsForCourse(courseId),"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "                instructorsLogic.getInstructorsForCourse(courseId));"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_IS_INCLUDE_RESPONSE_STATUS, \"true\");"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_IN_SECTION, \"false\");"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_FROM_SECTION, \"true\");"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_TO_SECTION, \"false\");"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_SECTION, section);"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "        if (range \u003e 0) {"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "            params.put(PARAM_RANGE, String.valueOf(range));"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "        return getFeedbackSessionResultsForUserWithParams(feedbackSessionName, courseId, userEmail,"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "                                                          UserRole.INSTRUCTOR, roster, params, SectionDetail.NOT_APPLICABLE);"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets results of a feedback session to show to an instructor in a section in an indicated range."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorToSectionWithinRange("
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail, String section, int range)"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "        CourseRoster roster \u003d new CourseRoster("
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "                studentsLogic.getStudentsForCourse(courseId),"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "                instructorsLogic.getInstructorsForCourse(courseId));"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_IS_INCLUDE_RESPONSE_STATUS, \"true\");"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_IN_SECTION, \"false\");"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_FROM_SECTION, \"false\");"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_TO_SECTION, \"true\");"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_SECTION, section);"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "        if (range \u003e 0) {"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "            params.put(PARAM_RANGE, String.valueOf(range));"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "        return getFeedbackSessionResultsForUserWithParams(feedbackSessionName, courseId, userEmail,"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "                                                          UserRole.INSTRUCTOR, roster, params, SectionDetail.NOT_APPLICABLE);"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets results of a feedback session to show to an instructor."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructor("
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail)"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "        return getFeedbackSessionResultsForInstructorInSection(feedbackSessionName, courseId, userEmail, null,"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "                SectionDetail.NOT_APPLICABLE);"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets results of a feedback session to show to an instructor for a specific section."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorInSection("
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail,"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "            String section, SectionDetail sectionDetail)"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "        CourseRoster roster \u003d new CourseRoster("
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "                studentsLogic.getStudentsForCourse(courseId),"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "                instructorsLogic.getInstructorsForCourse(courseId));"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e params \u003d initializeParamsWithSelectedSectionDetail(sectionDetail);"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_IS_INCLUDE_RESPONSE_STATUS, \"true\");"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "        params.put(PARAM_SECTION, section);"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "        return getFeedbackSessionResultsForUserWithParams(feedbackSessionName,"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "                courseId, userEmail, UserRole.INSTRUCTOR, roster, params, sectionDetail);"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets results of a feedback session to show to a student."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionResultsBundle getFeedbackSessionResultsForStudent("
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail)"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "        return getFeedbackSessionResultsForUserInSectionByQuestions("
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "                feedbackSessionName, courseId, userEmail,"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "                UserRole.STUDENT, null);"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackSessionResultsSummaryAsCsv("
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail,"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "            String questionId, boolean isMissingResponsesShown, boolean isStatsShown)"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException, ExceedingRangeException {"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "        return getFeedbackSessionResultsSummaryInSectionAsCsv("
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "                feedbackSessionName, courseId, userEmail, null, SectionDetail.NOT_APPLICABLE,"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "                questionId, isMissingResponsesShown, isStatsShown);"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackSessionResultsSummaryInSectionAsCsv("
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail, String section,"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "            SectionDetail sectionDetail, String questionId, boolean isMissingResponsesShown, boolean isStatsShown)"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException, ExceedingRangeException {"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionResultsBundle results;"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "        int indicatedRange \u003d section \u003d\u003d null ? Const.INSTRUCTOR_VIEW_RESPONSE_LIMIT : -1;"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "        if (questionId \u003d\u003d null) {"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "            results \u003d getFeedbackSessionResultsForInstructorInSectionWithinRangeFromView("
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "                feedbackSessionName, courseId, userEmail, section, sectionDetail,"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "                indicatedRange, Const.FeedbackSessionResults.GRQ_SORT_TYPE);"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (section \u003d\u003d null) {"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "            results \u003d getFeedbackSessionResultsForInstructorFromQuestion("
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "                    feedbackSessionName, courseId, userEmail, questionId);"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "            results \u003d getFeedbackSessionResultsForInstructorFromQuestionInSection("
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "                    feedbackSessionName, courseId, userEmail, questionId, section, sectionDetail);"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!results.isComplete) {"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ExceedingRangeException(ERROR_NUMBER_OF_RESPONSES_EXCEEDS_RANGE);"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "        // sort responses by giver \u003e recipient \u003e qnNumber"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "        results.responses.sort(results.compareByGiverRecipientQuestion);"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder exportBuilder \u003d new StringBuilder(100);"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "        exportBuilder.append(String.format(\"Course,%s\","
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "                             SanitizationHelper.sanitizeForCsv(results.feedbackSession.getCourseId())))"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "                     .append(System.lineSeparator())"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "                     .append(String.format(\"Session Name,%s\","
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "                             SanitizationHelper.sanitizeForCsv(results.feedbackSession.getFeedbackSessionName())))"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "                     .append(System.lineSeparator());"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "        if (section !\u003d null) {"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "            exportBuilder.append(String.format(\"Section Name,%s\", SanitizationHelper.sanitizeForCsv(section)))"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "                         .append(System.lineSeparator());"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "        if (sectionDetail !\u003d SectionDetail.NOT_APPLICABLE) {"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "            exportBuilder.append(String.format(\"Section View Detail,%s\", SanitizationHelper.sanitizeForCsv("
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "                    sectionDetail.getSectionDetail()))).append(System.lineSeparator());"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "        exportBuilder.append(System.lineSeparator()).append(System.lineSeparator());"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cEntry\u003cFeedbackQuestionAttributes, List\u003cFeedbackResponseAttributes\u003e\u003e\u003e entrySet \u003d"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "                results.getQuestionResponseMap().entrySet();"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Map.Entry\u003cFeedbackQuestionAttributes, List\u003cFeedbackResponseAttributes\u003e\u003e entry : entrySet) {"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "            exportBuilder.append(getFeedbackSessionResultsForQuestionInCsvFormat("
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "                    results, entry, isMissingResponsesShown, isStatsShown, section));"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "        return exportBuilder.toString();"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "    private StringBuilder getFeedbackSessionResultsForQuestionInCsvFormat("
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackSessionResultsBundle fsrBundle,"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "            Map.Entry\u003cFeedbackQuestionAttributes, List\u003cFeedbackResponseAttributes\u003e\u003e entry,"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isMissingResponsesShown, boolean isStatsShown, String section) {"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackQuestionAttributes question \u003d entry.getKey();"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackQuestionDetails questionDetails \u003d question.getQuestionDetails();"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackResponseAttributes\u003e allResponses \u003d entry.getValue();"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder exportBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "        exportBuilder.append(\"Question \" + Integer.toString(question.questionNumber) + \",\""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "                + SanitizationHelper.sanitizeForCsv(questionDetails.getQuestionText())"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "                + System.lineSeparator() + System.lineSeparator());"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "        String statistics \u003d questionDetails.getQuestionResultStatisticsCsv(allResponses,"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "                                    question, fsrBundle);"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!statistics.isEmpty() \u0026\u0026 isStatsShown) {"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "            exportBuilder.append(\"Summary Statistics,\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "            exportBuilder.append(statistics).append(System.lineSeparator());"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e possibleGiversWithoutResponses \u003d fsrBundle.getPossibleGiversInSection(question, section);"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e possibleRecipientsForGiver \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "        String prevGiver \u003d \"\";"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "        int maxNumOfInstructorComments \u003d getMaxNumberOfInstructorComments(allResponses, fsrBundle.getResponseComments());"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "        exportBuilder.append(questionDetails.getCsvDetailedResponsesHeader(maxNumOfInstructorComments));"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackResponseAttributes response : allResponses) {"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!fsrBundle.isRecipientVisible(response) || !fsrBundle.isGiverVisible(response)) {"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "                possibleGiversWithoutResponses.clear();"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "                possibleRecipientsForGiver.clear();"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "            // keep track of possible recipients with no responses"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "            removeParticipantIdentifierFromList(question.giverType,"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "                    possibleGiversWithoutResponses, response.giver, fsrBundle);"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isNewGiver \u003d !prevGiver.equals(response.giver);"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "            // print missing responses from the current giver"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isNewGiver \u0026\u0026 isMissingResponsesShown) {"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "                exportBuilder.append(getRowsOfPossibleRecipientsInCsvFormat(fsrBundle,"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "                        question, questionDetails,"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "                        possibleRecipientsForGiver, prevGiver));"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "                String giverIdentifier \u003d question.giverType \u003d\u003d FeedbackParticipantType.TEAMS"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "                                             ? fsrBundle.getFullNameFromRoster(response.giver)"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "                                             : response.giver;"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "                possibleRecipientsForGiver \u003d fsrBundle.getPossibleRecipients(question, giverIdentifier);"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "            removeParticipantIdentifierFromList(question.recipientType, possibleRecipientsForGiver,"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "                                                response.recipient, fsrBundle);"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "            prevGiver \u003d response.giver;"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "            exportBuilder.append(questionDetails.getCsvDetailedResponsesRow(fsrBundle, response, question));"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "        // add the rows for the possible givers and recipients who have missing responses"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isMissingResponsesShown) {"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "            exportBuilder.append("
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "                    getRemainingRowsInCsvFormat("
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "                            fsrBundle, entry, question, questionDetails,"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "                            possibleGiversWithoutResponses, possibleRecipientsForGiver, prevGiver));"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "        exportBuilder.append(System.lineSeparator() + System.lineSeparator());"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "        return exportBuilder;"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "    private int getMaxNumberOfInstructorComments(List\u003cFeedbackResponseAttributes\u003e allResponses,"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "            Map\u003cString, List\u003cFeedbackResponseCommentAttributes\u003e\u003e responseComments) {"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "        if (allResponses \u003d\u003d null || allResponses.isEmpty()) {"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "        int maxCommentsNum \u003d 0;"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackResponseAttributes response : allResponses) {"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cFeedbackResponseCommentAttributes\u003e commentAttributes \u003d responseComments.get(response.getId());"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commentAttributes !\u003d null) {"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "                commentAttributes \u003d commentAttributes.stream()"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "                                            .filter(comment -\u003e !comment.isCommentFromFeedbackParticipant)"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "                                            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "                if (maxCommentsNum \u003c commentAttributes.size()) {"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "                    maxCommentsNum \u003d commentAttributes.size();"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "        return maxCommentsNum;"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "     * Given a participantIdentifier, remove it from participantIdentifierList."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eBefore removal, {@link FeedbackSessionResultsBundle#getFullNameFromRoster} is used to"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "     * convert the identifier into a canonical form if the participantIdentifierType is TEAMS."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeParticipantIdentifierFromList("
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackParticipantType participantIdentifierType,"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cString\u003e participantIdentifierList, String participantIdentifier,"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackSessionResultsBundle bundle) {"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "        if (participantIdentifierType \u003d\u003d FeedbackParticipantType.TEAMS) {"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "            participantIdentifierList.remove(bundle.getFullNameFromRoster(participantIdentifier));"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "            participantIdentifierList.remove(participantIdentifier);"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generate rows of missing responses for the remaining possible givers and recipients."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eIf for the prevGiver, possibleRecipientsForGiver is not empty,"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "     * the remaining missing responses for the prevGiver will be generated first."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the remaining rows of missing responses in csv format"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "    private StringBuilder getRemainingRowsInCsvFormat("
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackSessionResultsBundle results,"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "            Map.Entry\u003cFeedbackQuestionAttributes, List\u003cFeedbackResponseAttributes\u003e\u003e entry,"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackQuestionAttributes question,"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackQuestionDetails questionDetails,"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cString\u003e remainingPossibleGivers,"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cString\u003e possibleRecipientsForGiver, String prevGiver) {"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder exportBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "        if (possibleRecipientsForGiver !\u003d null) {"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "            exportBuilder.append(getRowsOfPossibleRecipientsInCsvFormat(results,"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "                    question, questionDetails, possibleRecipientsForGiver,"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "                    prevGiver));"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "        removeParticipantIdentifierFromList(question.giverType, remainingPossibleGivers, prevGiver, results);"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String possibleGiverWithNoResponses : remainingPossibleGivers) {"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cString\u003e possibleRecipientsForRemainingGiver \u003d"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "                    results.getPossibleRecipients(entry.getKey(), possibleGiverWithNoResponses);"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "            exportBuilder.append(getRowsOfPossibleRecipientsInCsvFormat(results,"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "                    question, questionDetails, possibleRecipientsForRemainingGiver,"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "                    possibleGiverWithNoResponses));"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "        return exportBuilder;"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "     * For a giver and a list of possibleRecipientsForGiver, generate rows"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "     * of missing responses between the giver and the possible recipients."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "    private StringBuilder getRowsOfPossibleRecipientsInCsvFormat("
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackSessionResultsBundle results,"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackQuestionAttributes question,"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackQuestionDetails questionDetails,"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cString\u003e possibleRecipientsForGiver, String giver) {"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder exportBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String possibleRecipient : possibleRecipientsForGiver) {"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "            String giverName \u003d results.getFullNameFromRoster(giver);"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "            String giverLastName \u003d results.getLastNameFromRoster(giver);"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "            String giverEmail \u003d results.getDisplayableEmailFromRoster(giver);"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "            String possibleRecipientName \u003d results.getFullNameFromRoster(possibleRecipient);"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "            String possibleRecipientLastName \u003d results.getLastNameFromRoster(possibleRecipient);"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "            String possibleRecipientEmail \u003d results.getDisplayableEmailFromRoster(possibleRecipient);"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "            if (questionDetails.shouldShowNoResponseText(question)) {"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "                exportBuilder.append(SanitizationHelper.sanitizeForCsv(results.getTeamNameFromRoster(giver))"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \",\" + SanitizationHelper.sanitizeForCsv(StringHelper.removeExtraSpace(giverName))"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \",\" + SanitizationHelper.sanitizeForCsv(StringHelper.removeExtraSpace(giverLastName))"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \",\" + SanitizationHelper.sanitizeForCsv(StringHelper.removeExtraSpace(giverEmail))"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \",\" + SanitizationHelper.sanitizeForCsv(results.getTeamNameFromRoster(possibleRecipient))"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \",\" + SanitizationHelper.sanitizeForCsv(StringHelper.removeExtraSpace(possibleRecipientName))"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \",\" + SanitizationHelper.sanitizeForCsv(StringHelper.removeExtraSpace(possibleRecipientLastName))"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \",\" + SanitizationHelper.sanitizeForCsv(StringHelper.removeExtraSpace(possibleRecipientEmail))"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \",\" + questionDetails.getNoResponseTextInCsv(giver, possibleRecipient, results, question)"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "                        + System.lineSeparator());"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "        return exportBuilder;"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "     * Criteria: must be published, publishEmail must be enabled and"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "     * resultsVisibleTime must be custom."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return returns a list of sessions that require automated emails to be"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "     *         sent as they are published"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getFeedbackSessionsWhichNeedAutomatedPublishedEmailsToBeSent() {"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e sessions \u003d fsDb.getFeedbackSessionsPossiblyNeedingPublishedEmail();"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e sessionsToSendEmailsFor \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackSessionAttributes session : sessions) {"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "            // automated emails are required only for custom publish times"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!coursesLogic.getCourse(session.getCourseId()).isCourseDeleted()"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 session.isPublished()"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 !TimeHelper.isSpecialTime(session.getResultsVisibleFromTime())) {"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "                sessionsToSendEmailsFor.add(session);"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "        return sessionsToSendEmailsFor;"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getFeedbackSessionsWhichNeedOpenEmailsToBeSent() {"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e sessions \u003d fsDb.getFeedbackSessionsPossiblyNeedingOpenEmail();"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e sessionsToSendEmailsFor \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackSessionAttributes session : sessions) {"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!coursesLogic.getCourse(session.getCourseId()).isCourseDeleted() \u0026\u0026 session.isOpened()) {"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "                sessionsToSendEmailsFor.add(session);"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "        return sessionsToSendEmailsFor;"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isCreatorOfSession(String feedbackSessionName, String courseId, String userEmail) {"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes fs \u003d getFeedbackSession(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "        return fs.getCreatorEmail().equals(userEmail);"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFeedbackSessionExists(String feedbackSessionName, String courseId) {"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "        return fsDb.getFeedbackSession(courseId, feedbackSessionName) !\u003d null;"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFeedbackSessionHasQuestionForStudents("
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName,"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "            String courseId) throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFeedbackSessionExists(feedbackSessionName, courseId)) {"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EntityDoesNotExistException(ERROR_NON_EXISTENT_FS_CHECK + courseId + \"/\" + feedbackSessionName);"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackQuestionAttributes\u003e allQuestions \u003d"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "                fqLogic.getFeedbackQuestionsForStudents(feedbackSessionName,"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "                        courseId);"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "        return !allQuestions.isEmpty();"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFeedbackSessionCompletedByStudent(FeedbackSessionAttributes fsa, String userEmail) {"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "        if (fsa.getRespondingStudentList().contains(userEmail)) {"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "        String feedbackSessionName \u003d fsa.getFeedbackSessionName();"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "        String courseId \u003d fsa.getCourseId();"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackQuestionAttributes\u003e allQuestions \u003d"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "                fqLogic.getFeedbackQuestionsForStudents(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "        // if there is no question for students, session is complete"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "        return allQuestions.isEmpty();"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFeedbackSessionCompletedByInstructor(FeedbackSessionAttributes fsa, String userEmail)"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "        if (fsa.getRespondingInstructorList().contains(userEmail)) {"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "        String feedbackSessionName \u003d fsa.getFeedbackSessionName();"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "        String courseId \u003d fsa.getCourseId();"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackQuestionAttributes\u003e allQuestions \u003d"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "                fqLogic.getFeedbackQuestionsForInstructor(feedbackSessionName, courseId, userEmail);"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "        // if there is no question for instructor, session is complete"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "        return allQuestions.isEmpty();"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the details of a feedback session by {@link FeedbackSessionAttributes.UpdateOptions}."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eAdjust email sending status if necessary."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return updated feedback session"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidParametersException if attributes to update are not valid"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EntityDoesNotExistException if the feedback session cannot be found"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionAttributes updateFeedbackSession(FeedbackSessionAttributes.UpdateOptions updateOptions)"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes oldSession \u003d"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "                fsDb.getFeedbackSession(updateOptions.getCourseId(), updateOptions.getFeedbackSessionName());"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (oldSession \u003d\u003d null) {"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EntityDoesNotExistException(ERROR_NON_EXISTENT_FS_UPDATE + updateOptions.getCourseId()"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"/\" + updateOptions.getFeedbackSessionName());"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes newSession \u003d oldSession.getCopy();"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "        newSession.update(updateOptions);"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes.UpdateOptions.Builder newUpdateOptions \u003d"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder(updateOptions);"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "        // adjust email sending status"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "        // reset sentOpenEmail if the session has opened but is being un-opened"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "        // now, or else leave it as sent if so."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (oldSession.isSentOpenEmail()) {"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "            newUpdateOptions.withSentOpenEmail(newSession.isOpened());"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "        // reset sentClosedEmail if the session has closed but is being un-closed"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "        // now, or else leave it as sent if so."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (oldSession.isSentClosedEmail()) {"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "            newUpdateOptions.withSentClosedEmail(newSession.isClosed());"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "            // also reset sentClosingEmail"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "            newUpdateOptions.withSentClosingEmail("
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "                    newSession.isClosed()"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "                            || newSession.isClosedAfter(SystemParams.NUMBER_OF_HOURS_BEFORE_CLOSING_ALERT));"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "        // reset sentPublishedEmail if the session has been published but is"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "        // going to be unpublished now, or else leave it as sent if so."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (oldSession.isSentPublishedEmail()) {"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "            newUpdateOptions.withSentPublishedEmail(newSession.isPublished());"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "        return fsDb.updateFeedbackSession(newUpdateOptions.build());"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates all feedback sessions of {@code courseId} to have be in {@code courseTimeZone}."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFeedbackSessionsTimeZoneForCourse(String courseId, ZoneId courseTimeZone) {"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(Const.StatusCodes.NULL_PARAMETER, courseId);"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(Const.StatusCodes.NULL_PARAMETER, courseTimeZone);"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e fsForCourse \u003d fsDb.getFeedbackSessionsForCourse(courseId);"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "        fsForCourse.forEach(fs -\u003e {"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "                fsDb.updateFeedbackSession("
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "                        FeedbackSessionAttributes.updateOptionsBuilder(fs.getFeedbackSessionName(), fs.getCourseId())"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "                                .withTimeZone(courseTimeZone)"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "                                .build());"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (EntityDoesNotExistException | InvalidParametersException e) {"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "                log.severe(\"Cannot adjust timezone of courses: \" + e.getMessage());"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the instructor with {@code oldEmail} to {@code newEmail} in the instructor respondent list"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "     * in all feedback session of course {@code courseId}."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateRespondentsForInstructor(String oldEmail, String newEmail, String courseId)"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e feedbackSessions \u003d getFeedbackSessionsForCourse(courseId);"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackSessionAttributes session : feedbackSessions) {"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "            fsDb.updateFeedbackSession("
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "                    FeedbackSessionAttributes.updateOptionsBuilder(session.getFeedbackSessionName(), session.getCourseId())"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "                            .withUpdatingInstructorRespondent(oldEmail, newEmail)"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "                            .build());"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the student with {@code oldEmail} to {@code newEmail} in the student respondent list"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "     * in all feedback session of course {@code courseId}."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateRespondentsForStudent(String oldEmail, String newEmail, String courseId)"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e feedbackSessions \u003d getFeedbackSessionsForCourse(courseId);"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackSessionAttributes session : feedbackSessions) {"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "            fsDb.updateFeedbackSession("
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "                    FeedbackSessionAttributes.updateOptionsBuilder(session.getFeedbackSessionName(), session.getCourseId())"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "                            .withUpdatingStudentRespondent(oldEmail, newEmail)"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "                            .build());"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the instructor\u0027s email from the instructor respondents set of all feedback sessions"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the corresponding course."
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteInstructorFromRespondentsList(String courseId, String email) {"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e sessionsToUpdate \u003d"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "                fsDb.getFeedbackSessionsForCourse(courseId);"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackSessionAttributes session : sessionsToUpdate) {"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "                deleteInstructorRespondent(email, session.getFeedbackSessionName(), session.getCourseId());"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (InvalidParametersException | EntityDoesNotExistException e) {"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "                Assumption.fail(ASSUMPTION_FAIL_DELETE_INSTRUCTOR + session.getFeedbackSessionName());"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the student\u0027s email from the student respondents set of all feedback sessions"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the corresponding course."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteStudentFromRespondentsList(String courseId, String email) {"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e sessionsToUpdate \u003d"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "                fsDb.getFeedbackSessionsForCourse(courseId);"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackSessionAttributes session : sessionsToUpdate) {"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "                deleteStudentFromRespondentList(email, session.getFeedbackSessionName(), session.getCourseId());"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (InvalidParametersException | EntityDoesNotExistException e) {"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "                Assumption.fail(ASSUMPTION_FAIL_DELETE_INSTRUCTOR + session.getFeedbackSessionName());"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds an instructor in the instructor respondent set of a feedback session."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addInstructorRespondent(String email, String feedbackSessionName, String courseId)"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException, InvalidParametersException {"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(Const.StatusCodes.NULL_PARAMETER, feedbackSessionName);"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(Const.StatusCodes.NULL_PARAMETER, courseId);"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(Const.StatusCodes.NULL_PARAMETER, email);"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "        fsDb.updateFeedbackSession("
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder(feedbackSessionName, courseId)"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withAddingInstructorRespondent(email)"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a student in the instructor respondent set of a feedback session."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addStudentRespondent(String email, String feedbackSessionName, String courseId)"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException, InvalidParametersException {"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(Const.StatusCodes.NULL_PARAMETER, feedbackSessionName);"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(Const.StatusCodes.NULL_PARAMETER, courseId);"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(Const.StatusCodes.NULL_PARAMETER, email);"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "        fsDb.updateFeedbackSession("
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder(feedbackSessionName, courseId)"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withAddingStudentRespondent(email)"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes an instructor in the instructor respondent set of a feedback session."
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteInstructorRespondent(String email, String feedbackSessionName, String courseId)"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException, InvalidParametersException {"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(Const.StatusCodes.NULL_PARAMETER, feedbackSessionName);"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(Const.StatusCodes.NULL_PARAMETER, courseId);"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(Const.StatusCodes.NULL_PARAMETER, email);"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "        fsDb.updateFeedbackSession("
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder(feedbackSessionName, courseId)"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withRemovingInstructorRespondent(email)"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes a student in the instructor respondent set of a feedback session."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteStudentFromRespondentList(String email, String feedbackSessionName, String courseId)"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException, InvalidParametersException {"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(Const.StatusCodes.NULL_PARAMETER, feedbackSessionName);"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(Const.StatusCodes.NULL_PARAMETER, courseId);"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(Const.StatusCodes.NULL_PARAMETER, email);"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "        fsDb.updateFeedbackSession("
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder(feedbackSessionName, courseId)"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withRemovingStudentRespondent(email)"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "     * Publishes a feedback session."
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @return the published feedback session"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidParametersException if session is already published"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @throws EntityDoesNotExistException if the feedback session cannot be found"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public FeedbackSessionAttributes publishFeedbackSession(String feedbackSessionName, String courseId)"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException, InvalidParametersException {"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        FeedbackSessionAttributes sessionToPublish \u003d getFeedbackSession(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (sessionToPublish \u003d\u003d null) {"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new EntityDoesNotExistException(ERROR_NON_EXISTENT_FS_UPDATE + courseId + \"/\" + feedbackSessionName);"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "        if (sessionToPublish.isPublished()) {"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InvalidParametersException(ERROR_FS_ALREADY_PUBLISH);"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return updateFeedbackSession("
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "                        .updateOptionsBuilder(sessionToPublish.getFeedbackSessionName(), sessionToPublish.getCourseId())"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withResultsVisibleFromTime(Instant.now())"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "     * Unpublishes a feedback session."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @return the unpublished feedback session"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidParametersException if session is already unpublished"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @throws EntityDoesNotExistException if the feedback session cannot be found"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public FeedbackSessionAttributes unpublishFeedbackSession(String feedbackSessionName, String courseId)"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException, InvalidParametersException {"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        FeedbackSessionAttributes sessionToUnpublish \u003d getFeedbackSession(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (sessionToUnpublish \u003d\u003d null) {"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new EntityDoesNotExistException(ERROR_NON_EXISTENT_FS_UPDATE + courseId + \"/\" + feedbackSessionName);"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!sessionToUnpublish.isPublished()) {"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InvalidParametersException(ERROR_FS_ALREADY_UNPUBLISH);"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return updateFeedbackSession("
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "                        .updateOptionsBuilder(sessionToUnpublish.getFeedbackSessionName(), sessionToUnpublish.getCourseId())"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withResultsVisibleFromTime(Const.TIME_REPRESENTS_LATER)"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getFeedbackSessionsClosingWithinTimeLimit() {"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e requiredSessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e sessions \u003d fsDb.getFeedbackSessionsPossiblyNeedingClosingEmail();"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackSessionAttributes session : sessions) {"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!coursesLogic.getCourse(session.getCourseId()).isCourseDeleted()"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 session.isClosingWithinTimeLimit(SystemParams.NUMBER_OF_HOURS_BEFORE_CLOSING_ALERT)) {"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "                requiredSessions.add(session);"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "        return requiredSessions;"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns returns a list of sessions that were closed within past hour."
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFeedbackSessionAttributes\u003e getFeedbackSessionsClosedWithinThePastHour() {"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e requiredSessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e sessions \u003d fsDb.getFeedbackSessionsPossiblyNeedingClosedEmail();"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackSessionAttributes session : sessions) {"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "            // is session closed in the past 1 hour"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!coursesLogic.getCourse(session.getCourseId()).isCourseDeleted() \u0026\u0026 session.isClosedWithinPastHour()) {"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "                requiredSessions.add(session);"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "        return requiredSessions;"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes a feedback session cascade to its associated questions, responses and comments."
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteFeedbackSessionCascade(String feedbackSessionName, String courseId) {"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "        AttributesDeletionQuery query \u003d AttributesDeletionQuery.builder()"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "                .withCourseId(courseId)"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "                .withFeedbackSessionName(feedbackSessionName)"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "        frcLogic.deleteFeedbackResponseComments(query);"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "        frLogic.deleteFeedbackResponses(query);"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "        fqLogic.deleteFeedbackQuestions(query);"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "        fsDb.deleteFeedbackSession(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes sessions using {@link AttributesDeletionQuery}."
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteFeedbackSessions(AttributesDeletionQuery query) {"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "        fsDb.deleteFeedbackSessions(query);"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "     * Soft-deletes a specific feedback session to Recycle Bin."
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the time when the feedback session is moved to the recycle bin"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "    public Instant moveFeedbackSessionToRecycleBin(String feedbackSessionName, String courseId)"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "        return fsDb.softDeleteFeedbackSession(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores a specific feedback session from Recycle Bin."
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": "    public void restoreFeedbackSessionFromRecycleBin(String feedbackSessionName, String courseId)"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "        fsDb.restoreDeletedFeedbackSession(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores all feedback sessions from Recycle Bin."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "    public void restoreAllFeedbackSessionsFromRecycleBin(List\u003cInstructorAttributes\u003e instructorList)"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "        Assumption.assertNotNull(\"Supplied parameter was null\", instructorList);"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e feedbackSessionsList \u003d"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": "                getSoftDeletedFeedbackSessionsListForInstructors(instructorList);"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackSessionAttributes session : feedbackSessionsList) {"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": "            restoreFeedbackSessionFromRecycleBin(session.getFeedbackSessionName(), session.getCourseId());"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionDetailsBundle getFeedbackSessionDetails(String feedbackSessionName, String courseId)"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes fsa \u003d getFeedbackSession(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "        if (fsa \u003d\u003d null) {"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EntityDoesNotExistException(\"Feedback session does not exist\");"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": "        return getFeedbackSessionDetails(fsa);"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "    public FeedbackSessionDetailsBundle getFeedbackSessionDetails(FeedbackSessionAttributes fsa) {"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionDetailsBundle details \u003d"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": "                new FeedbackSessionDetailsBundle(fsa);"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": "        details.stats.expectedTotal \u003d 0;"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "        details.stats.submittedTotal \u003d 0;"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cStudentAttributes\u003e students \u003d studentsLogic.getStudentsForCourse(fsa.getCourseId());"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cInstructorAttributes\u003e instructors \u003d instructorsLogic.getInstructorsForCourse(fsa.getCourseId());"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackQuestionAttributes\u003e questions \u003d"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": "                fqLogic.getFeedbackQuestionsForSession(fsa.getFeedbackSessionName(), fsa.getCourseId());"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackQuestionAttributes\u003e studentQns \u003d fqLogic.getFeedbackQuestionsForStudents(questions);"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!studentQns.isEmpty()) {"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": "            details.stats.expectedTotal +\u003d students.size();"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": "        for (InstructorAttributes instructor : instructors) {"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cFeedbackQuestionAttributes\u003e instructorQns \u003d"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": "                    fqLogic.getFeedbackQuestionsForInstructor(questions, fsa.isCreator(instructor.email));"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!instructorQns.isEmpty()) {"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": "                details.stats.expectedTotal +\u003d 1;"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": "        details.stats.submittedTotal +\u003d fsa.getRespondingStudentList().size() + fsa.getRespondingInstructorList().size();"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Get the feedback results for user in a section iterated by questions */"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": "    private FeedbackSessionResultsBundle getFeedbackSessionResultsForUserInSectionByQuestions("
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail,"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": "            UserRole role, String section)"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": "        // Load details of students and instructors once and pass it to callee"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": "        // methods"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": "        // (rather than loading them many times)."
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": "        CourseRoster roster \u003d new CourseRoster("
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": "                studentsLogic.getStudentsForCourse(courseId),"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": "                instructorsLogic.getInstructorsForCourse(courseId));"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": "        return getFeedbackSessionResultsForUserInSectionByQuestions("
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": "                feedbackSessionName, courseId, userEmail, role, section, roster);"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Get the feedback results for user in a section iterated by questions */"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": "    private FeedbackSessionResultsBundle getFeedbackSessionResultsForUserInSectionByQuestions("
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail,"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": "            UserRole role, String section, CourseRoster roster)"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session \u003d fsDb.getFeedbackSession("
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": "                courseId, feedbackSessionName);"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": "        if (session \u003d\u003d null) {"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EntityDoesNotExistException(ERROR_NON_EXISTENT_FS_VIEW + courseId + \"/\" + feedbackSessionName);"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": "        // create empty data containers to store results"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackResponseAttributes\u003e responses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, FeedbackQuestionAttributes\u003e relevantQuestions \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e emailNameTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e emailLastNameTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e emailTeamNameTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, Set\u003cString\u003e\u003e sectionTeamNameTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, boolean[]\u003e visibilityTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, List\u003cFeedbackResponseCommentAttributes\u003e\u003e responseComments \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionResponseStatus responseStatus \u003d new FeedbackSessionResponseStatus();"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackQuestionAttributes\u003e allQuestions \u003d fqLogic.getFeedbackQuestionsForSession("
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                    feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, FeedbackResponseAttributes\u003e relevantResponse \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackQuestionAttributes question : allQuestions) {"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cFeedbackResponseAttributes\u003e responsesForThisQn;"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": "            responsesForThisQn \u003d frLogic.getViewableFeedbackResponsesForQuestionInSection("
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": "                    question, userEmail, role, section, null);"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean hasResponses \u003d !responsesForThisQn.isEmpty();"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": "            if (hasResponses) {"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": "                relevantQuestions.put(question.getId(), question);"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": "                responses.addAll(responsesForThisQn);"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": "                for (FeedbackResponseAttributes response : responsesForThisQn) {"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": "                    relevantResponse.put(response.getId(), response);"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "                    addEmailNamePairsToTable(emailNameTable, response,"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": "                            question, roster);"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": "                    addEmailLastNamePairsToTable(emailLastNameTable, response,"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": "                            question, roster);"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": "                    addEmailTeamNamePairsToTable(emailTeamNameTable, response,"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": "                            question, roster);"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": "                    addVisibilityToTable(visibilityTable, question, response,"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": "                            userEmail, role, roster);"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": "        StudentAttributes student \u003d null;"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cString\u003e studentsEmailInTeam \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isStudent(role)) {"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": "            student \u003d studentsLogic.getStudentForEmail(courseId, userEmail);"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cStudentAttributes\u003e studentsInTeam \u003d studentsLogic"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "                    .getStudentsForTeam(student.team, courseId);"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": "            for (StudentAttributes teammates : studentsInTeam) {"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": "                studentsEmailInTeam.add(teammates.email);"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackResponseCommentAttributes\u003e allResponseComments \u003d"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": "                frcLogic.getFeedbackResponseCommentForSession(courseId,"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": "                        feedbackSessionName);"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackResponseCommentAttributes frc : allResponseComments) {"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackResponseAttributes relatedResponse \u003d relevantResponse.get(frc.feedbackResponseId);"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackQuestionAttributes relatedQuestion \u003d relevantQuestions.get(frc.feedbackQuestionId);"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isVisibleResponseComment \u003d frcLogic.isResponseCommentVisibleForUser(userEmail,"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": "                    role, student, studentsEmailInTeam, relatedResponse, relatedQuestion, frc);"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isVisibleResponseComment) {"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!frcLogic.isNameVisibleToUser(frc, relatedResponse, userEmail, roster)) {"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": "                    frc.commentGiver \u003d Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT;"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "-"
        },
        "content": "                responseComments.computeIfAbsent(frc.feedbackResponseId, string -\u003e new ArrayList\u003c\u003e())"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": "                        .add(frc);"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": "        for (List\u003cFeedbackResponseCommentAttributes\u003e responseCommentList : responseComments"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": "                .values()) {"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": "            sortByCreatedDate(responseCommentList);"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": "        addSectionTeamNamesToTable(sectionTeamNameTable, roster, courseId, userEmail, role, feedbackSessionName, section);"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FeedbackSessionResultsBundle("
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": "                        session, responses, relevantQuestions, emailNameTable,"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": "                        emailLastNameTable, emailTeamNameTable, sectionTeamNameTable,"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": "                        visibilityTable, responseStatus, roster, responseComments);"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": "    private Map\u003cString, String\u003e initializeParamsWithSelectedSectionDetail(SectionDetail sectionDetail) {"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "-"
        },
        "content": "        switch(sectionDetail) {"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": "        // default for \u0027all\u0027 section selected will be EITHER case"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": "        case NOT_APPLICABLE:"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": "        case EITHER:"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": "            // either giver or recipient needs to be in the selected section"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": "            params.put(PARAM_IN_SECTION, \"true\");"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": "            params.put(PARAM_FROM_SECTION, \"false\");"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": "            params.put(PARAM_TO_SECTION, \"false\");"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": "        case GIVER:"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": "            params.put(PARAM_IN_SECTION, \"false\");"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": "            params.put(PARAM_FROM_SECTION, \"true\");"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": "            params.put(PARAM_TO_SECTION, \"false\");"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": "        case EVALUEE:"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": "            params.put(PARAM_IN_SECTION, \"false\");"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": "            params.put(PARAM_FROM_SECTION, \"false\");"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": "            params.put(PARAM_TO_SECTION, \"true\");"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": "        case BOTH:"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": "            // both giver and recipient must be from the selected section"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": "            params.put(PARAM_IN_SECTION, \"false\");"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": "            params.put(PARAM_FROM_SECTION, \"true\");"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": "            params.put(PARAM_TO_SECTION, \"true\");"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "-"
        },
        "content": "            Assumption.fail(\"Invalid section detail entered.\");"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "-"
        },
        "content": "        return params;"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "-"
        },
        "content": "    private FeedbackSessionResultsBundle getFeedbackSessionResultsForUserWithParams("
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail,"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "-"
        },
        "content": "            UserRole role, CourseRoster roster, Map\u003cString, String\u003e params, SectionDetail sectionDetail)"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session \u003d fsDb.getFeedbackSession(courseId, feedbackSessionName);"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "-"
        },
        "content": "        if (session \u003d\u003d null) {"
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EntityDoesNotExistException(ERROR_NON_EXISTENT_FS_VIEW + courseId + \"/\" + feedbackSessionName);"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackQuestionAttributes\u003e allQuestions \u003d"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "-"
        },
        "content": "                fqLogic.getFeedbackQuestionsForSession(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "-"
        },
        "content": "        //Show all questions even if no responses, unless is an ajax request for a specific question."
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, FeedbackQuestionAttributes\u003e relevantQuestions \u003d getAllQuestions(role, params, allQuestions);"
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isIncludeResponseStatus \u003d Boolean.parseBoolean(params.get(PARAM_IS_INCLUDE_RESPONSE_STATUS));"
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "-"
        },
        "content": "        String section \u003d params.get(PARAM_SECTION);"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "-"
        },
        "content": "        String questionId \u003d params.get(PARAM_QUESTION_ID);"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "-"
        },
        "content": "        if (questionId !\u003d null) {"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "-"
        },
        "content": "            return getFeedbackSessionResultsForQuestionId(feedbackSessionName, courseId, userEmail, role, roster, session,"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "-"
        },
        "content": "                    allQuestions, relevantQuestions, isIncludeResponseStatus, section, sectionDetail, questionId);"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, FeedbackQuestionAttributes\u003e allQuestionsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "-"
        },
        "content": "        putQuestionsIntoMap(allQuestions, allQuestionsMap);"
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackResponseAttributes\u003e allResponses \u003d getAllResponses(feedbackSessionName, courseId, params, section);"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "-"
        },
        "content": "        String rangeString \u003d params.get(PARAM_RANGE);"
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isComplete \u003d rangeString \u003d\u003d null || allResponses.size() \u003c\u003d Integer.parseInt(rangeString);"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isComplete) {"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "-"
        },
        "content": "            putQuestionsIntoMap(allQuestions, relevantQuestions);"
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "-"
        },
        "content": "        // create empty data containers to store results"
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackResponseAttributes\u003e responses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e emailNameTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e emailLastNameTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e emailTeamNameTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, Set\u003cString\u003e\u003e sectionTeamNameTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, boolean[]\u003e visibilityTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionResponseStatus responseStatus \u003d section \u003d\u003d null \u0026\u0026 isIncludeResponseStatus"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "-"
        },
        "content": "                                                     ? getFeedbackSessionResponseStatus(session, roster, allQuestions)"
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "-"
        },
        "content": "                                                     : null;"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "-"
        },
        "content": "        StudentAttributes student \u003d getStudent(courseId, userEmail, role);"
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cString\u003e studentsEmailInTeam \u003d getTeammateEmails(courseId, student);"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "-"
        },
        "content": "        InstructorAttributes instructor \u003d getInstructor(courseId, userEmail, role);"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, FeedbackResponseAttributes\u003e relevantResponse \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackResponseAttributes response : allResponses) {"
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackQuestionAttributes relatedQuestion \u003d allQuestionsMap.get(response.feedbackQuestionId);"
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "-"
        },
        "content": "            if (relatedQuestion !\u003d null) {"
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "-"
        },
        "content": "                boolean isVisibleResponse \u003d isResponseVisibleForUser("
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "-"
        },
        "content": "                        userEmail, role, student, studentsEmailInTeam, response, relatedQuestion, instructor);"
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isVisibleResponse) {"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "-"
        },
        "content": "                    responses.add(response);"
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "-"
        },
        "content": "                    relevantResponse.put(response.getId(), response);"
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "-"
        },
        "content": "                    relevantQuestions.put(relatedQuestion.getId(), relatedQuestion);"
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "-"
        },
        "content": "                    addEmailNamePairsToTable(emailNameTable, response, relatedQuestion, roster);"
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "-"
        },
        "content": "                    addEmailLastNamePairsToTable(emailLastNameTable, response, relatedQuestion, roster);"
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "-"
        },
        "content": "                    addEmailTeamNamePairsToTable(emailTeamNameTable, response, relatedQuestion, roster);"
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "-"
        },
        "content": "                    addVisibilityToTable(visibilityTable, relatedQuestion, response, userEmail, role, roster);"
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, List\u003cFeedbackResponseCommentAttributes\u003e\u003e responseComments \u003d getResponseComments("
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "-"
        },
        "content": "                feedbackSessionName, courseId, userEmail, role, roster, relevantQuestions, section, student,"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "-"
        },
        "content": "                studentsEmailInTeam, relevantResponse);"
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "-"
        },
        "content": "        addSectionTeamNamesToTable(sectionTeamNameTable, roster, courseId, userEmail, role, feedbackSessionName, section);"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FeedbackSessionResultsBundle("
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "-"
        },
        "content": "                session, responses, relevantQuestions, emailNameTable,"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "-"
        },
        "content": "                emailLastNameTable, emailTeamNameTable, sectionTeamNameTable,"
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "-"
        },
        "content": "                visibilityTable, responseStatus, roster, responseComments, isComplete);"
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "-"
        },
        "content": "    private Map\u003cString, List\u003cFeedbackResponseCommentAttributes\u003e\u003e getResponseComments("
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName, String courseId, String userEmail, UserRole role, CourseRoster roster,"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "-"
        },
        "content": "            Map\u003cString, FeedbackQuestionAttributes\u003e relevantQuestions, String section, StudentAttributes student,"
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cString\u003e studentsEmailInTeam, Map\u003cString, FeedbackResponseAttributes\u003e relevantResponse) {"
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, List\u003cFeedbackResponseCommentAttributes\u003e\u003e responseComments \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackResponseCommentAttributes\u003e allResponseComments \u003d"
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "-"
        },
        "content": "                frcLogic.getFeedbackResponseCommentForSessionInSection(courseId, feedbackSessionName, section);"
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackResponseCommentAttributes frc : allResponseComments) {"
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackResponseAttributes relatedResponse \u003d relevantResponse.get(frc.feedbackResponseId);"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackQuestionAttributes relatedQuestion \u003d relevantQuestions.get(frc.feedbackQuestionId);"
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isVisibleResponseComment \u003d frcLogic.isResponseCommentVisibleForUser("
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "-"
        },
        "content": "                    userEmail, role, student, studentsEmailInTeam, relatedResponse, relatedQuestion, frc);"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isVisibleResponseComment) {"
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!frcLogic.isNameVisibleToUser(frc, relatedResponse, userEmail, roster)) {"
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "-"
        },
        "content": "                    frc.commentGiver \u003d Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT;"
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "-"
        },
        "content": "                List\u003cFeedbackResponseCommentAttributes\u003e frcList \u003d responseComments.get(frc.feedbackResponseId);"
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "-"
        },
        "content": "                if (frcList \u003d\u003d null) {"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "-"
        },
        "content": "                    frcList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "-"
        },
        "content": "                    frcList.add(frc);"
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "-"
        },
        "content": "                    responseComments.put(frc.feedbackResponseId, frcList);"
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "-"
        },
        "content": "                    frcList.add(frc);"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "-"
        },
        "content": "        for (List\u003cFeedbackResponseCommentAttributes\u003e responseCommentList : responseComments.values()) {"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "-"
        },
        "content": "            sortByCreatedDate(responseCommentList);"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "-"
        },
        "content": "        return responseComments;"
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "-"
        },
        "content": "    private void putQuestionsIntoMap("
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cFeedbackQuestionAttributes\u003e questions, Map\u003cString, FeedbackQuestionAttributes\u003e questionMap) {"
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackQuestionAttributes qn : questions) {"
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "-"
        },
        "content": "            questionMap.put(qn.getId(), qn);"
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "-"
        },
        "content": "    private InstructorAttributes getInstructor(String courseId, String userEmail, UserRole role) {"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isInstructor(role)) {"
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "-"
        },
        "content": "            return instructorsLogic.getInstructorForEmail(courseId, userEmail);"
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "-"
        },
        "content": "    * Gets emails of student\u0027s teammates if student is not null, else returns an empty Set\u003cString\u003e"
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cString\u003e getTeammateEmails(String courseId, StudentAttributes student) {"
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cString\u003e studentsEmailInTeam \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "-"
        },
        "content": "        if (student !\u003d null) {"
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cStudentAttributes\u003e studentsInTeam \u003d studentsLogic.getStudentsForTeam(student.team, courseId);"
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "-"
        },
        "content": "            for (StudentAttributes teammates : studentsInTeam) {"
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "-"
        },
        "content": "                studentsEmailInTeam.add(teammates.email);"
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "-"
        },
        "content": "        return studentsEmailInTeam;"
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "-"
        },
        "content": "    private StudentAttributes getStudent(String courseId, String userEmail, UserRole role) {"
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isStudent(role)) {"
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "-"
        },
        "content": "            return studentsLogic.getStudentForEmail(courseId, userEmail);"
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "-"
        },
        "content": "    private FeedbackSessionResultsBundle getFeedbackSessionResultsForQuestionId(String feedbackSessionName,"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "-"
        },
        "content": "                String courseId, String userEmail, UserRole role, CourseRoster roster, FeedbackSessionAttributes session,"
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "-"
        },
        "content": "                List\u003cFeedbackQuestionAttributes\u003e allQuestions, Map\u003cString, FeedbackQuestionAttributes\u003e relevantQuestions,"
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "-"
        },
        "content": "                boolean isIncludeResponseStatus, String section, SectionDetail sectionDetail, String questionId) {"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackResponseAttributes\u003e responses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e emailNameTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e emailLastNameTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e emailTeamNameTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, Set\u003cString\u003e\u003e sectionTeamNameTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, boolean[]\u003e visibilityTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, List\u003cFeedbackResponseCommentAttributes\u003e\u003e responseComments \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionResponseStatus responseStatus \u003d new FeedbackSessionResponseStatus();"
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isQueryingResponseRateStatus \u003d questionId.equals(QUESTION_ID_FOR_RESPONSE_RATE);"
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isQueryingResponseRateStatus) {"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "-"
        },
        "content": "            responseStatus \u003d section \u003d\u003d null \u0026\u0026 isIncludeResponseStatus"
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "-"
        },
        "content": "                           ? getFeedbackSessionResponseStatus(session, roster, allQuestions)"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "-"
        },
        "content": "                           : null;"
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackQuestionAttributes question \u003d fqLogic.getFeedbackQuestion(questionId);"
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "-"
        },
        "content": "            if (question !\u003d null) {"
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "-"
        },
        "content": "                relevantQuestions.put(question.getId(), question);"
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "-"
        },
        "content": "                List\u003cFeedbackResponseAttributes\u003e responsesForThisQn;"
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "-"
        },
        "content": "                responsesForThisQn \u003d frLogic.getViewableFeedbackResponsesForQuestionInSection("
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "-"
        },
        "content": "                                                question, userEmail, UserRole.INSTRUCTOR, section, sectionDetail);"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "-"
        },
        "content": "                StudentAttributes student \u003d getStudent(courseId, userEmail, role);"
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "-"
        },
        "content": "                Set\u003cString\u003e studentsEmailInTeam \u003d getTeammateEmails(courseId, student);"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "-"
        },
        "content": "                boolean hasResponses \u003d !responsesForThisQn.isEmpty();"
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "-"
        },
        "content": "                if (hasResponses) {"
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "-"
        },
        "content": "                    Map\u003cString, FeedbackResponseAttributes\u003e relevantResponse \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "-"
        },
        "content": "                    for (FeedbackResponseAttributes response : responsesForThisQn) {"
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "-"
        },
        "content": "                        InstructorAttributes instructor \u003d getInstructor(courseId, userEmail, role);"
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "-"
        },
        "content": "                        boolean isVisibleResponse \u003d isResponseVisibleForUser(userEmail, role, null, null, response,"
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                             question, instructor);"
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (isVisibleResponse) {"
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "-"
        },
        "content": "                            relevantResponse.put(response.getId(), response);"
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "-"
        },
        "content": "                            relevantQuestions.put(question.getId(), question);"
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "-"
        },
        "content": "                            responses.add(response);"
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "-"
        },
        "content": "                            addEmailNamePairsToTable(emailNameTable, response, question, roster);"
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "-"
        },
        "content": "                            addEmailLastNamePairsToTable(emailLastNameTable, response, question, roster);"
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "-"
        },
        "content": "                            addEmailTeamNamePairsToTable(emailTeamNameTable, response, question, roster);"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "-"
        },
        "content": "                            addVisibilityToTable(visibilityTable, question, response, userEmail, role, roster);"
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "-"
        },
        "content": "                    responseComments \u003d getResponseComments("
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "-"
        },
        "content": "                            feedbackSessionName, courseId, userEmail, role, roster, relevantQuestions, section, student,"
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "-"
        },
        "content": "                            studentsEmailInTeam, relevantResponse);"
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "-"
        },
        "content": "        addSectionTeamNamesToTable("
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "-"
        },
        "content": "                sectionTeamNameTable, roster, courseId, userEmail, role, feedbackSessionName, section);"
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FeedbackSessionResultsBundle("
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "-"
        },
        "content": "                session, responses, relevantQuestions, emailNameTable,"
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "-"
        },
        "content": "                emailLastNameTable, emailTeamNameTable, sectionTeamNameTable,"
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "-"
        },
        "content": "                visibilityTable, responseStatus, roster, responseComments, true);"
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "-"
        },
        "content": "    private Map\u003cString, FeedbackQuestionAttributes\u003e getAllQuestions("
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "-"
        },
        "content": "            UserRole role, Map\u003cString, String\u003e params, List\u003cFeedbackQuestionAttributes\u003e allQuestions) {"
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, FeedbackQuestionAttributes\u003e relevantQuestions \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isInstructor(role) \u0026\u0026 !params.containsKey(PARAM_QUESTION_ID)) {"
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "-"
        },
        "content": "            putQuestionsIntoMap(allQuestions, relevantQuestions);"
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "-"
        },
        "content": "        return relevantQuestions;"
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isStudent(UserRole role) {"
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "-"
        },
        "content": "        return role \u003d\u003d UserRole.STUDENT;"
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isInstructor(UserRole role) {"
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "-"
        },
        "content": "        return role \u003d\u003d UserRole.INSTRUCTOR;"
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cFeedbackResponseAttributes\u003e getAllResponses(String feedbackSessionName, String courseId,"
      },
      {
        "lineNumber": 1869,
        "author": {
          "gitId": "-"
        },
        "content": "            Map\u003cString, String\u003e params, String section) {"
      },
      {
        "lineNumber": 1870,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isInSection \u003d Boolean.parseBoolean(params.get(PARAM_IN_SECTION));"
      },
      {
        "lineNumber": 1871,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isToSection \u003d Boolean.parseBoolean(params.get(PARAM_TO_SECTION));"
      },
      {
        "lineNumber": 1872,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isFromSection \u003d Boolean.parseBoolean(params.get(PARAM_FROM_SECTION));"
      },
      {
        "lineNumber": 1873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1874,
        "author": {
          "gitId": "-"
        },
        "content": "        if (params.get(PARAM_RANGE) \u003d\u003d null) {"
      },
      {
        "lineNumber": 1875,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isFromSection \u0026\u0026 isToSection) {"
      },
      {
        "lineNumber": 1876,
        "author": {
          "gitId": "-"
        },
        "content": "                return frLogic.getFeedbackResponsesForSessionInGiverAndRecipientSection(feedbackSessionName,"
      },
      {
        "lineNumber": 1877,
        "author": {
          "gitId": "-"
        },
        "content": "                        courseId, section);"
      },
      {
        "lineNumber": 1878,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (isInSection) {"
      },
      {
        "lineNumber": 1879,
        "author": {
          "gitId": "-"
        },
        "content": "                return frLogic.getFeedbackResponsesForSessionInSection(feedbackSessionName, courseId, section);"
      },
      {
        "lineNumber": 1880,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (isFromSection) {"
      },
      {
        "lineNumber": 1881,
        "author": {
          "gitId": "-"
        },
        "content": "                return frLogic.getFeedbackResponsesForSessionFromSection(feedbackSessionName, courseId, section);"
      },
      {
        "lineNumber": 1882,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (isToSection) {"
      },
      {
        "lineNumber": 1883,
        "author": {
          "gitId": "-"
        },
        "content": "                return frLogic.getFeedbackResponsesForSessionToSection(feedbackSessionName, courseId, section);"
      },
      {
        "lineNumber": 1884,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 1885,
        "author": {
          "gitId": "-"
        },
        "content": "                Assumption.fail(ASSUMPTION_FAIL_RESPONSE_ORIGIN);"
      },
      {
        "lineNumber": 1886,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1887,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 1888,
        "author": {
          "gitId": "-"
        },
        "content": "            int range \u003d Integer.parseInt(params.get(PARAM_RANGE));"
      },
      {
        "lineNumber": 1889,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isInSection) {"
      },
      {
        "lineNumber": 1890,
        "author": {
          "gitId": "-"
        },
        "content": "                return frLogic.getFeedbackResponsesForSessionInSectionWithinRange("
      },
      {
        "lineNumber": 1891,
        "author": {
          "gitId": "-"
        },
        "content": "                        feedbackSessionName, courseId, section, range);"
      },
      {
        "lineNumber": 1892,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (isFromSection) {"
      },
      {
        "lineNumber": 1893,
        "author": {
          "gitId": "-"
        },
        "content": "                return frLogic.getFeedbackResponsesForSessionFromSectionWithinRange("
      },
      {
        "lineNumber": 1894,
        "author": {
          "gitId": "-"
        },
        "content": "                        feedbackSessionName, courseId, section, range);"
      },
      {
        "lineNumber": 1895,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (isToSection) {"
      },
      {
        "lineNumber": 1896,
        "author": {
          "gitId": "-"
        },
        "content": "                return frLogic.getFeedbackResponsesForSessionToSectionWithinRange("
      },
      {
        "lineNumber": 1897,
        "author": {
          "gitId": "-"
        },
        "content": "                        feedbackSessionName, courseId, section, range);"
      },
      {
        "lineNumber": 1898,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 1899,
        "author": {
          "gitId": "-"
        },
        "content": "                Assumption.fail(ASSUMPTION_FAIL_RESPONSE_ORIGIN);"
      },
      {
        "lineNumber": 1900,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1901,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1902,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1903,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1905,
        "author": {
          "gitId": "-"
        },
        "content": "    private void addSectionTeamNamesToTable(Map\u003cString, Set\u003cString\u003e\u003e sectionTeamNameTable,"
      },
      {
        "lineNumber": 1906,
        "author": {
          "gitId": "-"
        },
        "content": "                                    CourseRoster roster, String courseId, String userEmail, UserRole role,"
      },
      {
        "lineNumber": 1907,
        "author": {
          "gitId": "-"
        },
        "content": "                                    String feedbackSessionName, String sectionToView) {"
      },
      {
        "lineNumber": 1908,
        "author": {
          "gitId": "-"
        },
        "content": "        InstructorAttributes instructor \u003d getInstructor(courseId, userEmail, role);"
      },
      {
        "lineNumber": 1909,
        "author": {
          "gitId": "-"
        },
        "content": "        if (instructor !\u003d null) {"
      },
      {
        "lineNumber": 1910,
        "author": {
          "gitId": "-"
        },
        "content": "            for (StudentAttributes student : roster.getStudents()) {"
      },
      {
        "lineNumber": 1911,
        "author": {
          "gitId": "-"
        },
        "content": "                boolean isVisibleResponse \u003d"
      },
      {
        "lineNumber": 1912,
        "author": {
          "gitId": "-"
        },
        "content": "                        instructor.isAllowedForPrivilege("
      },
      {
        "lineNumber": 1913,
        "author": {
          "gitId": "-"
        },
        "content": "                                           student.section,"
      },
      {
        "lineNumber": 1914,
        "author": {
          "gitId": "-"
        },
        "content": "                                           feedbackSessionName,"
      },
      {
        "lineNumber": 1915,
        "author": {
          "gitId": "-"
        },
        "content": "                                           Const.ParamsNames.INSTRUCTOR_PERMISSION_VIEW_SESSION_IN_SECTIONS);"
      },
      {
        "lineNumber": 1916,
        "author": {
          "gitId": "-"
        },
        "content": "                boolean isStudentInSelectedSection \u003d student.section.equals(sectionToView);"
      },
      {
        "lineNumber": 1917,
        "author": {
          "gitId": "-"
        },
        "content": "                boolean isViewingAllSections \u003d sectionToView \u003d\u003d null;"
      },
      {
        "lineNumber": 1918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1919,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isVisibleResponse \u0026\u0026 (isViewingAllSections"
      },
      {
        "lineNumber": 1920,
        "author": {
          "gitId": "-"
        },
        "content": "                                          || isStudentInSelectedSection)) {"
      },
      {
        "lineNumber": 1921,
        "author": {
          "gitId": "-"
        },
        "content": "                    String section \u003d student.section;"
      },
      {
        "lineNumber": 1922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1923,
        "author": {
          "gitId": "-"
        },
        "content": "                    sectionTeamNameTable.computeIfAbsent(section, key -\u003e new HashSet\u003c\u003e())"
      },
      {
        "lineNumber": 1924,
        "author": {
          "gitId": "-"
        },
        "content": "                                        .add(student.team);"
      },
      {
        "lineNumber": 1925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1926,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1927,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1928,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1929,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1931,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isResponseVisibleForUser(String userEmail,"
      },
      {
        "lineNumber": 1932,
        "author": {
          "gitId": "-"
        },
        "content": "            UserRole role, StudentAttributes student,"
      },
      {
        "lineNumber": 1933,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cString\u003e studentsEmailInTeam,"
      },
      {
        "lineNumber": 1934,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackResponseAttributes response,"
      },
      {
        "lineNumber": 1935,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackQuestionAttributes relatedQuestion, InstructorAttributes instructor) {"
      },
      {
        "lineNumber": 1936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1937,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isVisibleResponse \u003d false;"
      },
      {
        "lineNumber": 1938,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isInstructor(role) \u0026\u0026 relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.INSTRUCTORS)"
      },
      {
        "lineNumber": 1939,
        "author": {
          "gitId": "-"
        },
        "content": "                || response.recipient.equals(userEmail)"
      },
      {
        "lineNumber": 1940,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.RECEIVER)"
      },
      {
        "lineNumber": 1941,
        "author": {
          "gitId": "-"
        },
        "content": "                || response.giver.equals(userEmail)"
      },
      {
        "lineNumber": 1942,
        "author": {
          "gitId": "-"
        },
        "content": "                || isStudent(role) \u0026\u0026 relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.STUDENTS)) {"
      },
      {
        "lineNumber": 1943,
        "author": {
          "gitId": "-"
        },
        "content": "            isVisibleResponse \u003d true;"
      },
      {
        "lineNumber": 1944,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (studentsEmailInTeam !\u003d null \u0026\u0026 isStudent(role)) {"
      },
      {
        "lineNumber": 1945,
        "author": {
          "gitId": "-"
        },
        "content": "            if (relatedQuestion.recipientType \u003d\u003d FeedbackParticipantType.TEAMS"
      },
      {
        "lineNumber": 1946,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.RECEIVER)"
      },
      {
        "lineNumber": 1947,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 response.recipient.equals(student.team)) {"
      },
      {
        "lineNumber": 1948,
        "author": {
          "gitId": "-"
        },
        "content": "                isVisibleResponse \u003d true;"
      },
      {
        "lineNumber": 1949,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (relatedQuestion.giverType \u003d\u003d FeedbackParticipantType.TEAMS"
      },
      {
        "lineNumber": 1950,
        "author": {
          "gitId": "-"
        },
        "content": "                       \u0026\u0026 studentsEmailInTeam.contains(response.giver)) {"
      },
      {
        "lineNumber": 1951,
        "author": {
          "gitId": "-"
        },
        "content": "                isVisibleResponse \u003d true;"
      },
      {
        "lineNumber": 1952,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.OWN_TEAM_MEMBERS)"
      },
      {
        "lineNumber": 1953,
        "author": {
          "gitId": "-"
        },
        "content": "                       \u0026\u0026 studentsEmailInTeam.contains(response.giver)) {"
      },
      {
        "lineNumber": 1954,
        "author": {
          "gitId": "-"
        },
        "content": "                isVisibleResponse \u003d true;"
      },
      {
        "lineNumber": 1955,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS)"
      },
      {
        "lineNumber": 1956,
        "author": {
          "gitId": "-"
        },
        "content": "                       \u0026\u0026 studentsEmailInTeam.contains(response.recipient)) {"
      },
      {
        "lineNumber": 1957,
        "author": {
          "gitId": "-"
        },
        "content": "                isVisibleResponse \u003d true;"
      },
      {
        "lineNumber": 1958,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1959,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1960,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isVisibleResponse \u0026\u0026 instructor !\u003d null) {"
      },
      {
        "lineNumber": 1961,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isGiverSectionRestricted \u003d"
      },
      {
        "lineNumber": 1962,
        "author": {
          "gitId": "-"
        },
        "content": "                    !instructor.isAllowedForPrivilege(response.giverSection,"
      },
      {
        "lineNumber": 1963,
        "author": {
          "gitId": "-"
        },
        "content": "                                                      response.feedbackSessionName,"
      },
      {
        "lineNumber": 1964,
        "author": {
          "gitId": "-"
        },
        "content": "                                                      Const.ParamsNames.INSTRUCTOR_PERMISSION_VIEW_SESSION_IN_SECTIONS);"
      },
      {
        "lineNumber": 1965,
        "author": {
          "gitId": "-"
        },
        "content": "            // If instructors are not restricted to view the giver\u0027s section,"
      },
      {
        "lineNumber": 1966,
        "author": {
          "gitId": "-"
        },
        "content": "            // they are allowed to view responses to GENERAL, subject to visibility options"
      },
      {
        "lineNumber": 1967,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isRecipientSectionRestricted \u003d"
      },
      {
        "lineNumber": 1968,
        "author": {
          "gitId": "-"
        },
        "content": "                    relatedQuestion.recipientType !\u003d FeedbackParticipantType.NONE"
      },
      {
        "lineNumber": 1969,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 !instructor.isAllowedForPrivilege(response.recipientSection,"
      },
      {
        "lineNumber": 1970,
        "author": {
          "gitId": "-"
        },
        "content": "                                                         response.feedbackSessionName,"
      },
      {
        "lineNumber": 1971,
        "author": {
          "gitId": "-"
        },
        "content": "                                                         Const.ParamsNames.INSTRUCTOR_PERMISSION_VIEW_SESSION_IN_SECTIONS);"
      },
      {
        "lineNumber": 1972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1973,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isNotAllowedForInstructor \u003d isGiverSectionRestricted || isRecipientSectionRestricted;"
      },
      {
        "lineNumber": 1974,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isNotAllowedForInstructor) {"
      },
      {
        "lineNumber": 1975,
        "author": {
          "gitId": "-"
        },
        "content": "                isVisibleResponse \u003d false;"
      },
      {
        "lineNumber": 1976,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1977,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1978,
        "author": {
          "gitId": "-"
        },
        "content": "        return isVisibleResponse;"
      },
      {
        "lineNumber": 1979,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1981,
        "author": {
          "gitId": "-"
        },
        "content": "    private void sortByCreatedDate(List\u003cFeedbackResponseCommentAttributes\u003e responseCommentList) {"
      },
      {
        "lineNumber": 1982,
        "author": {
          "gitId": "-"
        },
        "content": "        responseCommentList.sort(Comparator.comparing(responseComment -\u003e responseComment.createdAt));"
      },
      {
        "lineNumber": 1983,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1985,
        "author": {
          "gitId": "-"
        },
        "content": "    private void addVisibilityToTable(Map\u003cString, boolean[]\u003e visibilityTable,"
      },
      {
        "lineNumber": 1986,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackQuestionAttributes question,"
      },
      {
        "lineNumber": 1987,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackResponseAttributes response,"
      },
      {
        "lineNumber": 1988,
        "author": {
          "gitId": "-"
        },
        "content": "            String userEmail,"
      },
      {
        "lineNumber": 1989,
        "author": {
          "gitId": "-"
        },
        "content": "            UserRole role,"
      },
      {
        "lineNumber": 1990,
        "author": {
          "gitId": "-"
        },
        "content": "            CourseRoster roster) {"
      },
      {
        "lineNumber": 1991,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean[] visibility \u003d new boolean[2];"
      },
      {
        "lineNumber": 1992,
        "author": {
          "gitId": "-"
        },
        "content": "        visibility[Const.VISIBILITY_TABLE_GIVER] \u003d frLogic.isNameVisibleToUser("
      },
      {
        "lineNumber": 1993,
        "author": {
          "gitId": "-"
        },
        "content": "                question, response, userEmail, role, true, roster);"
      },
      {
        "lineNumber": 1994,
        "author": {
          "gitId": "-"
        },
        "content": "        visibility[Const.VISIBILITY_TABLE_RECIPIENT] \u003d frLogic.isNameVisibleToUser("
      },
      {
        "lineNumber": 1995,
        "author": {
          "gitId": "-"
        },
        "content": "                question, response, userEmail, role, false, roster);"
      },
      {
        "lineNumber": 1996,
        "author": {
          "gitId": "-"
        },
        "content": "        visibilityTable.put(response.getId(), visibility);"
      },
      {
        "lineNumber": 1997,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1999,
        "author": {
          "gitId": "-"
        },
        "content": "    private void addEmailNamePairsToTable(Map\u003cString, String\u003e emailNameTable,"
      },
      {
        "lineNumber": 2000,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackResponseAttributes response,"
      },
      {
        "lineNumber": 2001,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackQuestionAttributes question, CourseRoster roster) {"
      },
      {
        "lineNumber": 2002,
        "author": {
          "gitId": "-"
        },
        "content": "        // keys of emailNameTable are participantIdentifiers,"
      },
      {
        "lineNumber": 2003,
        "author": {
          "gitId": "-"
        },
        "content": "        // which consists of students\u0027 email, instructors\u0027 email, team names, or %GENERAL%."
      },
      {
        "lineNumber": 2004,
        "author": {
          "gitId": "-"
        },
        "content": "        // participants identifiers of anonymous responses are not anonymised in the tables"
      },
      {
        "lineNumber": 2005,
        "author": {
          "gitId": "-"
        },
        "content": "        addEmailNamePairsToTable(emailNameTable, response, question, roster,"
      },
      {
        "lineNumber": 2006,
        "author": {
          "gitId": "-"
        },
        "content": "                EMAIL_NAME_PAIR);"
      },
      {
        "lineNumber": 2007,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2009,
        "author": {
          "gitId": "-"
        },
        "content": "    private void addEmailNamePairsToTable(Map\u003cString, String\u003e emailNameTable,"
      },
      {
        "lineNumber": 2010,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackResponseAttributes response,"
      },
      {
        "lineNumber": 2011,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackQuestionAttributes question, CourseRoster roster,"
      },
      {
        "lineNumber": 2012,
        "author": {
          "gitId": "-"
        },
        "content": "            int pairType) {"
      },
      {
        "lineNumber": 2013,
        "author": {
          "gitId": "-"
        },
        "content": "        if (question.giverType \u003d\u003d FeedbackParticipantType.TEAMS"
      },
      {
        "lineNumber": 2014,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 roster.isStudentInCourse(response.giver)) {"
      },
      {
        "lineNumber": 2015,
        "author": {
          "gitId": "-"
        },
        "content": "            emailNameTable.putIfAbsent("
      },
      {
        "lineNumber": 2016,
        "author": {
          "gitId": "-"
        },
        "content": "                        response.giver + Const.TEAM_OF_EMAIL_OWNER,"
      },
      {
        "lineNumber": 2017,
        "author": {
          "gitId": "-"
        },
        "content": "                        getNameTeamNamePairForEmail(question.giverType,"
      },
      {
        "lineNumber": 2018,
        "author": {
          "gitId": "-"
        },
        "content": "                                response.giver, roster)[pairType]);"
      },
      {
        "lineNumber": 2019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2020,
        "author": {
          "gitId": "-"
        },
        "content": "            StudentAttributes studentGiver \u003d roster.getStudentForEmail(response.giver);"
      },
      {
        "lineNumber": 2021,
        "author": {
          "gitId": "-"
        },
        "content": "            if (studentGiver !\u003d null) {"
      },
      {
        "lineNumber": 2022,
        "author": {
          "gitId": "-"
        },
        "content": "                emailNameTable.putIfAbsent(studentGiver.team, getNameTeamNamePairForEmail("
      },
      {
        "lineNumber": 2023,
        "author": {
          "gitId": "-"
        },
        "content": "                        question.giverType,"
      },
      {
        "lineNumber": 2024,
        "author": {
          "gitId": "-"
        },
        "content": "                        response.giver, roster)[pairType]);"
      },
      {
        "lineNumber": 2025,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2026,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 2027,
        "author": {
          "gitId": "-"
        },
        "content": "            emailNameTable.putIfAbsent("
      },
      {
        "lineNumber": 2028,
        "author": {
          "gitId": "-"
        },
        "content": "                    response.giver,"
      },
      {
        "lineNumber": 2029,
        "author": {
          "gitId": "-"
        },
        "content": "                    getNameTeamNamePairForEmail(question.giverType,"
      },
      {
        "lineNumber": 2030,
        "author": {
          "gitId": "-"
        },
        "content": "                            response.giver, roster)[pairType]);"
      },
      {
        "lineNumber": 2031,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2033,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackParticipantType recipientType \u003d null;"
      },
      {
        "lineNumber": 2034,
        "author": {
          "gitId": "-"
        },
        "content": "        if (question.recipientType \u003d\u003d FeedbackParticipantType.SELF) {"
      },
      {
        "lineNumber": 2035,
        "author": {
          "gitId": "-"
        },
        "content": "            recipientType \u003d question.giverType;"
      },
      {
        "lineNumber": 2036,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 2037,
        "author": {
          "gitId": "-"
        },
        "content": "            recipientType \u003d question.recipientType;"
      },
      {
        "lineNumber": 2038,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2040,
        "author": {
          "gitId": "-"
        },
        "content": "        emailNameTable.putIfAbsent("
      },
      {
        "lineNumber": 2041,
        "author": {
          "gitId": "-"
        },
        "content": "                    response.recipient,"
      },
      {
        "lineNumber": 2042,
        "author": {
          "gitId": "-"
        },
        "content": "                    getNameTeamNamePairForEmail(recipientType,"
      },
      {
        "lineNumber": 2043,
        "author": {
          "gitId": "-"
        },
        "content": "                            response.recipient, roster)[pairType]);"
      },
      {
        "lineNumber": 2044,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2046,
        "author": {
          "gitId": "-"
        },
        "content": "    private void addEmailLastNamePairsToTable(Map\u003cString, String\u003e emailLastNameTable,"
      },
      {
        "lineNumber": 2047,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackResponseAttributes response,"
      },
      {
        "lineNumber": 2048,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackQuestionAttributes question, CourseRoster roster) {"
      },
      {
        "lineNumber": 2049,
        "author": {
          "gitId": "-"
        },
        "content": "        addEmailNamePairsToTable(emailLastNameTable, response, question, roster,"
      },
      {
        "lineNumber": 2050,
        "author": {
          "gitId": "-"
        },
        "content": "                EMAIL_LASTNAME_PAIR);"
      },
      {
        "lineNumber": 2051,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2053,
        "author": {
          "gitId": "-"
        },
        "content": "    private void addEmailTeamNamePairsToTable("
      },
      {
        "lineNumber": 2054,
        "author": {
          "gitId": "-"
        },
        "content": "            Map\u003cString, String\u003e emailTeamNameTable,"
      },
      {
        "lineNumber": 2055,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackResponseAttributes response,"
      },
      {
        "lineNumber": 2056,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackQuestionAttributes question, CourseRoster roster) {"
      },
      {
        "lineNumber": 2057,
        "author": {
          "gitId": "-"
        },
        "content": "        addEmailNamePairsToTable(emailTeamNameTable, response, question,"
      },
      {
        "lineNumber": 2058,
        "author": {
          "gitId": "-"
        },
        "content": "                roster, EMAIL_TEAMNAME_PAIR);"
      },
      {
        "lineNumber": 2059,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2061,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cFeedbackSessionDetailsBundle\u003e getFeedbackSessionDetailsForCourse(String courseId)"
      },
      {
        "lineNumber": 2062,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 2063,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionDetailsBundle\u003e fsDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 2064,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e fsInCourse \u003d"
      },
      {
        "lineNumber": 2065,
        "author": {
          "gitId": "-"
        },
        "content": "                fsDb.getFeedbackSessionsForCourse(courseId);"
      },
      {
        "lineNumber": 2066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2067,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackSessionAttributes fsa : fsInCourse) {"
      },
      {
        "lineNumber": 2068,
        "author": {
          "gitId": "-"
        },
        "content": "            fsDetails.add(getFeedbackSessionDetails(fsa));"
      },
      {
        "lineNumber": 2069,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2071,
        "author": {
          "gitId": "-"
        },
        "content": "        return fsDetails;"
      },
      {
        "lineNumber": 2072,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2074,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cFeedbackSessionAttributes\u003e getFeedbackSessionsListForCourse(String courseId) {"
      },
      {
        "lineNumber": 2075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2076,
        "author": {
          "gitId": "-"
        },
        "content": "        return fsDb.getFeedbackSessionsForCourse(courseId);"
      },
      {
        "lineNumber": 2077,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2079,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cFeedbackSessionAttributes\u003e getSoftDeletedFeedbackSessionsListForCourse(String courseId) {"
      },
      {
        "lineNumber": 2080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2081,
        "author": {
          "gitId": "-"
        },
        "content": "        return fsDb.getSoftDeletedFeedbackSessionsForCourse(courseId);"
      },
      {
        "lineNumber": 2082,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2084,
        "author": {
          "gitId": "-"
        },
        "content": "    // return a pair of String that contains Giver/Recipient\u0027sName (at index 0)"
      },
      {
        "lineNumber": 2085,
        "author": {
          "gitId": "-"
        },
        "content": "    // and TeamName (at index 1)"
      },
      {
        "lineNumber": 2086,
        "author": {
          "gitId": "-"
        },
        "content": "    private String[] getNameTeamNamePairForEmail(FeedbackParticipantType type,"
      },
      {
        "lineNumber": 2087,
        "author": {
          "gitId": "-"
        },
        "content": "            String email, CourseRoster roster) {"
      },
      {
        "lineNumber": 2088,
        "author": {
          "gitId": "-"
        },
        "content": "        String giverRecipientName \u003d null;"
      },
      {
        "lineNumber": 2089,
        "author": {
          "gitId": "-"
        },
        "content": "        String giverRecipientLastName \u003d null;"
      },
      {
        "lineNumber": 2090,
        "author": {
          "gitId": "-"
        },
        "content": "        String teamName \u003d null;"
      },
      {
        "lineNumber": 2091,
        "author": {
          "gitId": "-"
        },
        "content": "        String name \u003d null;"
      },
      {
        "lineNumber": 2092,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastName \u003d null;"
      },
      {
        "lineNumber": 2093,
        "author": {
          "gitId": "-"
        },
        "content": "        String team \u003d null;"
      },
      {
        "lineNumber": 2094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2095,
        "author": {
          "gitId": "-"
        },
        "content": "        StudentAttributes student \u003d roster.getStudentForEmail(email);"
      },
      {
        "lineNumber": 2096,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isStudent \u003d student !\u003d null;"
      },
      {
        "lineNumber": 2097,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isStudent) {"
      },
      {
        "lineNumber": 2098,
        "author": {
          "gitId": "-"
        },
        "content": "            name \u003d student.name;"
      },
      {
        "lineNumber": 2099,
        "author": {
          "gitId": "-"
        },
        "content": "            team \u003d student.team;"
      },
      {
        "lineNumber": 2100,
        "author": {
          "gitId": "-"
        },
        "content": "            lastName \u003d student.lastName;"
      },
      {
        "lineNumber": 2101,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 2102,
        "author": {
          "gitId": "-"
        },
        "content": "            InstructorAttributes instructor \u003d roster"
      },
      {
        "lineNumber": 2103,
        "author": {
          "gitId": "-"
        },
        "content": "                    .getInstructorForEmail(email);"
      },
      {
        "lineNumber": 2104,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isInstructor \u003d instructor !\u003d null;"
      },
      {
        "lineNumber": 2105,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isInstructor) {"
      },
      {
        "lineNumber": 2106,
        "author": {
          "gitId": "-"
        },
        "content": "                name \u003d instructor.name;"
      },
      {
        "lineNumber": 2107,
        "author": {
          "gitId": "-"
        },
        "content": "                lastName \u003d instructor.name;"
      },
      {
        "lineNumber": 2108,
        "author": {
          "gitId": "-"
        },
        "content": "                team \u003d Const.USER_TEAM_FOR_INSTRUCTOR;"
      },
      {
        "lineNumber": 2109,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 2110,
        "author": {
          "gitId": "-"
        },
        "content": "                if (email.equals(Const.GENERAL_QUESTION)) {"
      },
      {
        "lineNumber": 2111,
        "author": {
          "gitId": "-"
        },
        "content": "                    // Email represents that there is no specific recipient."
      },
      {
        "lineNumber": 2112,
        "author": {
          "gitId": "-"
        },
        "content": "                    name \u003d Const.USER_IS_NOBODY;"
      },
      {
        "lineNumber": 2113,
        "author": {
          "gitId": "-"
        },
        "content": "                    lastName \u003d Const.USER_IS_NOBODY;"
      },
      {
        "lineNumber": 2114,
        "author": {
          "gitId": "-"
        },
        "content": "                    team \u003d email;"
      },
      {
        "lineNumber": 2115,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 2116,
        "author": {
          "gitId": "-"
        },
        "content": "                    // The email represents a missing *Attribute."
      },
      {
        "lineNumber": 2117,
        "author": {
          "gitId": "-"
        },
        "content": "                    // It might be a team name or the *Attribute has been deleted."
      },
      {
        "lineNumber": 2118,
        "author": {
          "gitId": "-"
        },
        "content": "                    name \u003d Const.USER_IS_MISSING;"
      },
      {
        "lineNumber": 2119,
        "author": {
          "gitId": "-"
        },
        "content": "                    lastName \u003d Const.USER_IS_MISSING;"
      },
      {
        "lineNumber": 2120,
        "author": {
          "gitId": "-"
        },
        "content": "                    team \u003d email;"
      },
      {
        "lineNumber": 2121,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 2122,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (type \u003d\u003d FeedbackParticipantType.TEAMS || type \u003d\u003d FeedbackParticipantType.OWN_TEAM) {"
      },
      {
        "lineNumber": 2126,
        "author": {
          "gitId": "-"
        },
        "content": "            giverRecipientName \u003d team;"
      },
      {
        "lineNumber": 2127,
        "author": {
          "gitId": "-"
        },
        "content": "            giverRecipientLastName \u003d team;"
      },
      {
        "lineNumber": 2128,
        "author": {
          "gitId": "-"
        },
        "content": "            teamName \u003d \"\";"
      },
      {
        "lineNumber": 2129,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 2130,
        "author": {
          "gitId": "-"
        },
        "content": "            giverRecipientName \u003d name;"
      },
      {
        "lineNumber": 2131,
        "author": {
          "gitId": "-"
        },
        "content": "            giverRecipientLastName \u003d lastName;"
      },
      {
        "lineNumber": 2132,
        "author": {
          "gitId": "-"
        },
        "content": "            if (name.equals(Const.USER_IS_NOBODY) || name.equals(Const.USER_IS_MISSING)) {"
      },
      {
        "lineNumber": 2133,
        "author": {
          "gitId": "-"
        },
        "content": "                teamName \u003d \"\";"
      },
      {
        "lineNumber": 2134,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 2135,
        "author": {
          "gitId": "-"
        },
        "content": "                teamName \u003d team;"
      },
      {
        "lineNumber": 2136,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2138,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String[] { giverRecipientName, giverRecipientLastName, teamName };"
      },
      {
        "lineNumber": 2139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2141,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFeedbackSessionFullyCompletedByStudent("
      },
      {
        "lineNumber": 2142,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedbackSessionName,"
      },
      {
        "lineNumber": 2143,
        "author": {
          "gitId": "-"
        },
        "content": "            String courseId, String userEmail)"
      },
      {
        "lineNumber": 2144,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 2145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFeedbackSessionExists(feedbackSessionName, courseId)) {"
      },
      {
        "lineNumber": 2147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EntityDoesNotExistException(ERROR_NON_EXISTENT_FS_CHECK + courseId + \"/\" + feedbackSessionName);"
      },
      {
        "lineNumber": 2148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2150,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackQuestionAttributes\u003e allQuestions \u003d"
      },
      {
        "lineNumber": 2151,
        "author": {
          "gitId": "-"
        },
        "content": "                fqLogic.getFeedbackQuestionsForStudents(feedbackSessionName,"
      },
      {
        "lineNumber": 2152,
        "author": {
          "gitId": "-"
        },
        "content": "                        courseId);"
      },
      {
        "lineNumber": 2153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2154,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackQuestionAttributes question : allQuestions) {"
      },
      {
        "lineNumber": 2155,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!fqLogic.isQuestionFullyAnsweredByUser(question, userEmail)) {"
      },
      {
        "lineNumber": 2156,
        "author": {
          "gitId": "-"
        },
        "content": "                // If any question is not completely answered, session is not"
      },
      {
        "lineNumber": 2157,
        "author": {
          "gitId": "-"
        },
        "content": "                // completed"
      },
      {
        "lineNumber": 2158,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 2159,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2161,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 2162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 2165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether the feedback session is viewable to the specified user."
      },
      {
        "lineNumber": 2166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 2167,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isFeedbackSessionViewableTo("
      },
      {
        "lineNumber": 2168,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackSessionAttributes session,"
      },
      {
        "lineNumber": 2169,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isInstructorOfCourse) {"
      },
      {
        "lineNumber": 2170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2171,
        "author": {
          "gitId": "-"
        },
        "content": "        // Allow all instructors to view always"
      },
      {
        "lineNumber": 2172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isInstructorOfCourse) {"
      },
      {
        "lineNumber": 2173,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 2174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2176,
        "author": {
          "gitId": "-"
        },
        "content": "        // Allow viewing if session is viewable to students"
      },
      {
        "lineNumber": 2177,
        "author": {
          "gitId": "-"
        },
        "content": "        return isFeedbackSessionViewableToStudents(session);"
      },
      {
        "lineNumber": 2178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2180,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFeedbackSessionViewableToStudents("
      },
      {
        "lineNumber": 2181,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackSessionAttributes session) {"
      },
      {
        "lineNumber": 2182,
        "author": {
          "gitId": "-"
        },
        "content": "        // Allow students to view the feedback session if there are questions for them"
      },
      {
        "lineNumber": 2183,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackQuestionAttributes\u003e questionsToAnswer \u003d"
      },
      {
        "lineNumber": 2184,
        "author": {
          "gitId": "-"
        },
        "content": "                fqLogic.getFeedbackQuestionsForStudents("
      },
      {
        "lineNumber": 2185,
        "author": {
          "gitId": "-"
        },
        "content": "                        session.getFeedbackSessionName(), session.getCourseId());"
      },
      {
        "lineNumber": 2186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2187,
        "author": {
          "gitId": "-"
        },
        "content": "        if (session.isVisible() \u0026\u0026 !questionsToAnswer.isEmpty()) {"
      },
      {
        "lineNumber": 2188,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 2189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2191,
        "author": {
          "gitId": "-"
        },
        "content": "        // Allow students to view the feedback session"
      },
      {
        "lineNumber": 2192,
        "author": {
          "gitId": "-"
        },
        "content": "        // if there are any questions for instructors to answer"
      },
      {
        "lineNumber": 2193,
        "author": {
          "gitId": "-"
        },
        "content": "        // where the responses of the questions are visible to the students"
      },
      {
        "lineNumber": 2194,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackQuestionAttributes\u003e questionsWithVisibleResponses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 2195,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackQuestionAttributes\u003e questionsForInstructors \u003d"
      },
      {
        "lineNumber": 2196,
        "author": {
          "gitId": "-"
        },
        "content": "                                        fqLogic.getFeedbackQuestionsForCreatorInstructor(session);"
      },
      {
        "lineNumber": 2197,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackQuestionAttributes question : questionsForInstructors) {"
      },
      {
        "lineNumber": 2198,
        "author": {
          "gitId": "-"
        },
        "content": "            if (frLogic.isResponseOfFeedbackQuestionVisibleToStudent(question)) {"
      },
      {
        "lineNumber": 2199,
        "author": {
          "gitId": "-"
        },
        "content": "                questionsWithVisibleResponses.add(question);"
      },
      {
        "lineNumber": 2200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2203,
        "author": {
          "gitId": "-"
        },
        "content": "        return session.isVisible() \u0026\u0026 !questionsWithVisibleResponses.isEmpty();"
      },
      {
        "lineNumber": 2204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 2207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if there are any questions for students to answer."
      },
      {
        "lineNumber": 2208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 2209,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFeedbackSessionForStudentsToAnswer(FeedbackSessionAttributes session) {"
      },
      {
        "lineNumber": 2210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2211,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackQuestionAttributes\u003e questionsToAnswer \u003d"
      },
      {
        "lineNumber": 2212,
        "author": {
          "gitId": "-"
        },
        "content": "                fqLogic.getFeedbackQuestionsForStudents("
      },
      {
        "lineNumber": 2213,
        "author": {
          "gitId": "-"
        },
        "content": "                        session.getFeedbackSessionName(), session.getCourseId());"
      },
      {
        "lineNumber": 2214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2215,
        "author": {
          "gitId": "-"
        },
        "content": "        return session.isVisible() \u0026\u0026 !questionsToAnswer.isEmpty();"
      },
      {
        "lineNumber": 2216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2218,
        "author": {
          "gitId": "-"
        },
        "content": "    private void normalizeMaximumResponseEntities("
      },
      {
        "lineNumber": 2219,
        "author": {
          "gitId": "-"
        },
        "content": "            FeedbackQuestionAttributes question,"
      },
      {
        "lineNumber": 2220,
        "author": {
          "gitId": "-"
        },
        "content": "            Map\u003cString, String\u003e recipients) {"
      },
      {
        "lineNumber": 2221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2222,
        "author": {
          "gitId": "-"
        },
        "content": "        // change constant to actual maximum size."
      },
      {
        "lineNumber": 2223,
        "author": {
          "gitId": "-"
        },
        "content": "        if (question.numberOfEntitiesToGiveFeedbackTo \u003d\u003d Const.MAX_POSSIBLE_RECIPIENTS) {"
      },
      {
        "lineNumber": 2224,
        "author": {
          "gitId": "-"
        },
        "content": "            question.numberOfEntitiesToGiveFeedbackTo \u003d recipients.size();"
      },
      {
        "lineNumber": 2225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 20,
      "-": 2208
    }
  },
  {
    "path": "src/main/java/teammates/ui/webapi/action/PublishFeedbackSessionAction.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package teammates.ui.webapi.action;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.apache.http.HttpStatus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.InstructorAttributes;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.exception.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.exception.InvalidParametersException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.util.Const;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.ui.webapi.output.FeedbackSessionData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Publish a feedback session."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PublishFeedbackSessionAction extends Action {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AuthType getMinAuthLevel() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return AuthType.LOGGED_IN;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkSpecificAccessControl() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String courseId \u003d getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String feedbackSessionName \u003d getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        InstructorAttributes instructor \u003d logic.getInstructorForGoogleId(courseId, userInfo.getId());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session \u003d logic.getFeedbackSession(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        gateKeeper.verifyAccessible(instructor, session,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ActionResult execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String courseId \u003d getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String feedbackSessionName \u003d getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            FeedbackSessionAttributes publishFeedbackSession \u003d logic.publishFeedbackSession(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            if (publishFeedbackSession.isPublishedEmailEnabled()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                taskQueuer.scheduleFeedbackSessionPublishedEmail(publishFeedbackSession.getCourseId(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                        publishFeedbackSession.getFeedbackSessionName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return new JsonResult(new FeedbackSessionData(publishFeedbackSession));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (EntityDoesNotExistException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new JsonResult(e.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidParametersException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new JsonResult(e.getMessage(), HttpStatus.SC_BAD_REQUEST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 7,
      "-": 47
    }
  },
  {
    "path": "src/main/java/teammates/ui/webapi/action/UnpublishFeedbackSessionAction.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package teammates.ui.webapi.action;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.apache.http.HttpStatus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.InstructorAttributes;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.exception.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.exception.InvalidParametersException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.util.Const;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.ui.webapi.output.FeedbackSessionData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Unpublish a feedback session."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UnpublishFeedbackSessionAction extends Action {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AuthType getMinAuthLevel() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return AuthType.LOGGED_IN;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkSpecificAccessControl() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String courseId \u003d getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String feedbackSessionName \u003d getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        InstructorAttributes instructor \u003d logic.getInstructorForGoogleId(courseId, userInfo.getId());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session \u003d logic.getFeedbackSession(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        gateKeeper.verifyAccessible(instructor, session,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ActionResult execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String courseId \u003d getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String feedbackSessionName \u003d getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            FeedbackSessionAttributes unpublishFeedbackSession \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    logic.unpublishFeedbackSession(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            if (unpublishFeedbackSession.isPublishedEmailEnabled()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                taskQueuer.scheduleFeedbackSessionUnpublishedEmail(unpublishFeedbackSession.getCourseId(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                        unpublishFeedbackSession.getFeedbackSessionName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return new JsonResult(new FeedbackSessionData(unpublishFeedbackSession));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (EntityDoesNotExistException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new JsonResult(e.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidParametersException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new JsonResult(e.getMessage(), HttpStatus.SC_BAD_REQUEST);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/teammates/test/cases/automated/FeedbackSessionPublishedRemindersActionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package teammates.test.cases.automated;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testng.annotations.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.util.Const;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.util.TimeHelper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.logic.core.FeedbackSessionsLogic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.ui.automated.FeedbackSessionPublishedRemindersAction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * SUT: {@link FeedbackSessionPublishedRemindersAction}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FeedbackSessionPublishedRemindersActionTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        extends BaseAutomatedActionTest\u003cFeedbackSessionPublishedRemindersAction\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final FeedbackSessionsLogic fsLogic \u003d FeedbackSessionsLogic.inst();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String getActionUri() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return Const.CronJobURIs.AUTOMATED_FEEDBACK_PUBLISHED_REMINDERS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void allTests() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"default state of typical data bundle: 1 session published with email unsent\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionPublishedRemindersAction action \u003d getAction();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        action.execute();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        verifySpecifiedTasksAdded(action, Const.TaskQueue.FEEDBACK_SESSION_PUBLISHED_EMAIL_QUEUE_NAME, 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"1 session published by moving automated publish time, \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                 + \"1 session published similarly with disabled published reminder, \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                 + \"1 session published manually\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // Publish session by moving automated publish time"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session1 \u003d dataBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        session1.setResultsVisibleFromTime(TimeHelper.getInstantDaysOffsetFromNow(-1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                        .updateOptionsBuilder(session1.getFeedbackSessionName(), session1.getCourseId())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withResultsVisibleFromTime(session1.getResultsVisibleFromTime())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyPresentInDatastore(session1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Publish session by moving automated publish time and disable publish reminder"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session2 \u003d dataBundle.feedbackSessions.get(\"session2InCourse1\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        session2.setResultsVisibleFromTime(TimeHelper.getInstantDaysOffsetFromNow(-1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        session2.setPublishedEmailEnabled(false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                        .updateOptionsBuilder(session2.getFeedbackSessionName(), session2.getCourseId())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withResultsVisibleFromTime(session2.getResultsVisibleFromTime())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withIsPublishedEmailEnabled(session2.isPublishedEmailEnabled())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyPresentInDatastore(session2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Do a manual publish"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session3 \u003d dataBundle.feedbackSessions.get(\"gracePeriodSession\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                        .updateOptionsBuilder(session3.getFeedbackSessionName(), session3.getCourseId())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withResultsVisibleFromTime(Const.TIME_REPRESENTS_LATER)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        fsLogic.publishFeedbackSession(session3.getFeedbackSessionName(), session3.getCourseId());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        session3.setResultsVisibleFromTime("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSession(session3.getFeedbackSessionName(), session3.getCourseId())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                        .getResultsVisibleFromTime());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyPresentInDatastore(session3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        action.execute();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        verifySpecifiedTasksAdded(action, Const.TaskQueue.FEEDBACK_SESSION_PUBLISHED_EMAIL_QUEUE_NAME, 4);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"1 session unpublished manually\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        fsLogic.unpublishFeedbackSession(session3.getFeedbackSessionName(), session3.getCourseId());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        action.execute();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        verifySpecifiedTasksAdded(action, Const.TaskQueue.FEEDBACK_SESSION_PUBLISHED_EMAIL_QUEUE_NAME, 3);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"1 session published with emails sent\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        session1.setSentPublishedEmail(true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                        .updateOptionsBuilder(session1.getFeedbackSessionName(), session1.getCourseId())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withSentPublishedEmail(session1.isSentPublishedEmail())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        action.execute();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        verifySpecifiedTasksAdded(action, Const.TaskQueue.FEEDBACK_SESSION_PUBLISHED_EMAIL_QUEUE_NAME, 2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "-": 104
    }
  },
  {
    "path": "src/test/java/teammates/test/cases/logic/FeedbackSessionsLogicTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package teammates.test.cases.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testng.annotations.BeforeMethod;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testng.annotations.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.AttributesDeletionQuery;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.DataBundle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.FeedbackParticipantType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.FeedbackSessionDetailsBundle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.FeedbackSessionQuestionsBundle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.FeedbackSessionResultsBundle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.FeedbackSessionStats;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.SectionDetail;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.CourseAttributes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.InstructorAttributes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.StudentAttributes;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.questions.FeedbackTextQuestionDetails;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.exception.EntityAlreadyExistsException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.exception.EntityDoesNotExistException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.exception.InvalidParametersException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.util.Const;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.util.JsonUtils;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.util.TimeHelper;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.logic.core.CoursesLogic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.logic.core.FeedbackQuestionsLogic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.logic.core.FeedbackResponseCommentsLogic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.logic.core.FeedbackResponsesLogic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.logic.core.FeedbackSessionsLogic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.storage.api.FeedbackSessionsDb;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.test.driver.AssertHelper;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.test.driver.CsvChecker;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.test.driver.TimeHelperExtension;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " * SUT: {@link FeedbackSessionsLogic}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class FeedbackSessionsLogicTest extends BaseLogicTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static CoursesLogic coursesLogic \u003d CoursesLogic.inst();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FeedbackSessionsLogic fsLogic \u003d FeedbackSessionsLogic.inst();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FeedbackQuestionsLogic fqLogic \u003d FeedbackQuestionsLogic.inst();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FeedbackResponsesLogic frLogic \u003d FeedbackResponsesLogic.inst();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FeedbackResponseCommentsLogic frcLogic \u003d FeedbackResponseCommentsLogic.inst();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void prepareTestData() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // see beforeMethod()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeMethod"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void beforeMethod() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        dataBundle \u003d loadDataBundle(\"/FeedbackSessionsLogicTest.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        removeAndRestoreDataBundle(dataBundle);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testDeleteFeedbackSessionCascade_deleteSessionNotInRecycleBin_shouldDoCascadeDeletion()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throws EntityDoesNotExistException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes fsa \u003d dataBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(fsLogic.getFeedbackSession(fsa.getFeedbackSessionName(), fsa.getCourseId()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNull(fsLogic.getFeedbackSessionFromRecycleBin(fsa.getFeedbackSessionName(), fsa.getCourseId()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                fqLogic.getFeedbackQuestionsForSession(fsa.getFeedbackSessionName(), fsa.getCourseId()).isEmpty());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                frLogic.getFeedbackResponsesForSession(fsa.getFeedbackSessionName(), fsa.getCourseId()).isEmpty());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                frcLogic.getFeedbackResponseCommentForSession(fsa.getCourseId(), fsa.getFeedbackSessionName()).isEmpty());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete existing feedback session directly"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.deleteFeedbackSessionCascade(fsa.getFeedbackSessionName(), fsa.getCourseId());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNull(fsLogic.getFeedbackSession(fsa.getFeedbackSessionName(), fsa.getCourseId()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNull(fsLogic.getFeedbackSessionFromRecycleBin(fsa.getFeedbackSessionName(), fsa.getCourseId()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                fqLogic.getFeedbackQuestionsForSession(fsa.getFeedbackSessionName(), fsa.getCourseId()).isEmpty());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                frLogic.getFeedbackResponsesForSession(fsa.getFeedbackSessionName(), fsa.getCourseId()).isEmpty());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                frcLogic.getFeedbackResponseCommentForSession(fsa.getCourseId(), fsa.getFeedbackSessionName()).isEmpty());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testDeleteFeedbackSessionCascade_deleteSessionInRecycleBin_shouldDoCascadeDeletion()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityDoesNotExistException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes fsa \u003d dataBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                fqLogic.getFeedbackQuestionsForSession(fsa.getFeedbackSessionName(), fsa.getCourseId()).isEmpty());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                frLogic.getFeedbackResponsesForSession(fsa.getFeedbackSessionName(), fsa.getCourseId()).isEmpty());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                frcLogic.getFeedbackResponseCommentForSession(fsa.getCourseId(), fsa.getFeedbackSessionName()).isEmpty());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.moveFeedbackSessionToRecycleBin(fsa.getFeedbackSessionName(), fsa.getCourseId());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNull(fsLogic.getFeedbackSession(fsa.getFeedbackSessionName(), fsa.getCourseId()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(fsLogic.getFeedbackSessionFromRecycleBin(fsa.getFeedbackSessionName(), fsa.getCourseId()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete feedback session in recycle bin"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.deleteFeedbackSessionCascade(fsa.getFeedbackSessionName(), fsa.getCourseId());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNull(fsLogic.getFeedbackSession(fsa.getFeedbackSessionName(), fsa.getCourseId()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNull(fsLogic.getFeedbackSessionFromRecycleBin(fsa.getFeedbackSessionName(), fsa.getCourseId()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                fqLogic.getFeedbackQuestionsForSession(fsa.getFeedbackSessionName(), fsa.getCourseId()).isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                frLogic.getFeedbackResponsesForSession(fsa.getFeedbackSessionName(), fsa.getCourseId()).isEmpty());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                frcLogic.getFeedbackResponseCommentForSession(fsa.getCourseId(), fsa.getFeedbackSessionName()).isEmpty());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testDeleteFeedbackSessions_byCourseId_shouldDeleteAllSessionsUnderCourse() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session1InCourse1 \u003d dataBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSession(session1InCourse1.getFeedbackSessionName(), session1InCourse1.getCourseId()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session2InCourse1 \u003d dataBundle.feedbackSessions.get(\"session2InCourse1\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSession(session2InCourse1.getFeedbackSessionName(), session2InCourse1.getCourseId()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // they are in the same course"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(session1InCourse1.getCourseId(), session2InCourse1.getCourseId());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session1InCourse2 \u003d dataBundle.feedbackSessions.get(\"session1InCourse2\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSession(session1InCourse2.getFeedbackSessionName(), session1InCourse2.getCourseId()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete all session under the course"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.deleteFeedbackSessions("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                AttributesDeletionQuery.builder()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withCourseId(session1InCourse1.getCourseId())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // they should gone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNull("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSession(session1InCourse1.getFeedbackSessionName(), session1InCourse1.getCourseId()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNull("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSession(session2InCourse1.getFeedbackSessionName(), session2InCourse1.getCourseId()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // sessions in different courses should not be affected"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSession(session1InCourse2.getFeedbackSessionName(), session1InCourse2.getCourseId()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testDeleteInstructorFromRespondentsList_typicalData_emailShouldBeRemoved() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session1InCourse1 \u003d dataBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.addInstructorRespondent(\"test@email.com\","
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                session1InCourse1.getFeedbackSessionName(), session1InCourse1.getCourseId());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session2InCourse1 \u003d dataBundle.feedbackSessions.get(\"session2InCourse1\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.addInstructorRespondent(\"test@email.com\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                session2InCourse1.getFeedbackSessionName(), session2InCourse1.getCourseId());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // they are in the same course"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(session1InCourse1.getCourseId(), session2InCourse1.getCourseId());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSession(session1InCourse1.getFeedbackSessionName(), session1InCourse1.getCourseId())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                        .getRespondingInstructorList()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                        .contains(\"test@email.com\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSession(session2InCourse1.getFeedbackSessionName(), session2InCourse1.getCourseId())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                        .getRespondingInstructorList()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                        .contains(\"test@email.com\"));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // remove email from all respondents list"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.deleteInstructorFromRespondentsList(session1InCourse1.getCourseId(), \"test@email.com\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // the email should not appear"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSession(session1InCourse1.getFeedbackSessionName(), session1InCourse1.getCourseId())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                        .getRespondingInstructorList()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                        .contains(\"test@email.com\"));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSession(session2InCourse1.getFeedbackSessionName(), session2InCourse1.getCourseId())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                        .getRespondingInstructorList()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                        .contains(\"test@email.com\"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testDeleteStudentFromRespondentsList_typicalData_emailShouldBeRemoved() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session1InCourse1 \u003d dataBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.addStudentRespondent(\"test@email.com\","
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                session1InCourse1.getFeedbackSessionName(), session1InCourse1.getCourseId());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session2InCourse1 \u003d dataBundle.feedbackSessions.get(\"session2InCourse1\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.addStudentRespondent(\"test@email.com\","
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                session2InCourse1.getFeedbackSessionName(), session2InCourse1.getCourseId());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // they are in the same course"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(session1InCourse1.getCourseId(), session2InCourse1.getCourseId());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSession(session1InCourse1.getFeedbackSessionName(), session1InCourse1.getCourseId())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                        .getRespondingStudentList()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                        .contains(\"test@email.com\"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSession(session2InCourse1.getFeedbackSessionName(), session2InCourse1.getCourseId())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                        .getRespondingStudentList()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                        .contains(\"test@email.com\"));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        // remove email from all respondents list"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.deleteStudentFromRespondentsList(session1InCourse1.getCourseId(), \"test@email.com\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        // the email should not appear"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSession(session1InCourse1.getFeedbackSessionName(), session1InCourse1.getCourseId())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                        .getRespondingStudentList()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                        .contains(\"test@email.com\"));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSession(session2InCourse1.getFeedbackSessionName(), session2InCourse1.getCourseId())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                        .getRespondingStudentList()"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                        .contains(\"test@email.com\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testDeleteInstructorRespondent_typicalData_shouldRemoveFromRespondentList() throws Exception {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session1InCourse1 \u003d dataBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.addInstructorRespondent(\"test@email.com\","
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                session1InCourse1.getFeedbackSessionName(), session1InCourse1.getCourseId());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSession(session1InCourse1.getFeedbackSessionName(), session1InCourse1.getCourseId())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                        .getRespondingInstructorList()"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                        .contains(\"test@email.com\"));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete the instructor from the list"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.deleteInstructorRespondent(\"test@email.com\","
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                session1InCourse1.getFeedbackSessionName(), session1InCourse1.getCourseId());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSession(session1InCourse1.getFeedbackSessionName(), session1InCourse1.getCourseId())"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                        .getRespondingInstructorList()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                        .contains(\"test@email.com\"));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testDeleteStudentRespondent_typicalData_shouldRemoveFromRespondentList() throws Exception {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session1InCourse1 \u003d dataBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.addStudentRespondent(\"test@email.com\","
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                session1InCourse1.getFeedbackSessionName(), session1InCourse1.getCourseId());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSession(session1InCourse1.getFeedbackSessionName(), session1InCourse1.getCourseId())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                        .getRespondingStudentList()"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "                        .contains(\"test@email.com\"));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete the student from the list"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.deleteStudentFromRespondentList(\"test@email.com\","
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                session1InCourse1.getFeedbackSessionName(), session1InCourse1.getCourseId());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSession(session1InCourse1.getFeedbackSessionName(), session1InCourse1.getCourseId())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                        .getRespondingStudentList()"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                        .contains(\"test@email.com\"));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testFeedbackSessionNotification() throws Exception {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        testGetFeedbackSessionsClosingWithinTimeLimit();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        testGetFeedbackSessionsClosedWithinThePastHour();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        testGetFeedbackSessionsWhichNeedOpenMailsToBeSent();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        testGetFeedbackSessionWhichNeedPublishedEmailsToBeSent();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testAll() throws Exception {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        testGetFeedbackSessionsForCourse();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        testGetFeedbackSessionsListForInstructor();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        testGetSoftDeletedFeedbackSessionsListForInstructor();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        testGetSoftDeletedFeedbackSessionsListForInstructors();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        testGetFeedbackSessionDetailsForInstructor();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        testGetFeedbackSessionQuestionsForStudent();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        testGetFeedbackSessionQuestionsForInstructor();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        testGetFeedbackSessionResultsForUser();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        testGetFeedbackSessionResultsSummaryAsCsv();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        testIsFeedbackSessionViewableToStudents();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        testCreateAndDeleteFeedbackSession();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        testUpdateFeedbackSession();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        testPublishUnpublishFeedbackSession();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        testIsFeedbackSessionHasQuestionForStudents();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        testIsFeedbackSessionCompletedByStudent();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        testIsFeedbackSessionCompletedByInstructor();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        testIsFeedbackSessionFullyCompletedByStudent();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        testMoveFeedbackSessionToRecycleBin();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        testRestoreFeedbackSessionFromRecycleBin();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        testRestoreAllFeedbackSessionsFromRecycleBin();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testGetFeedbackSessionsListForInstructor() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e finalFsa \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cFeedbackSessionAttributes\u003e allFsa \u003d dataBundle.feedbackSessions.values();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        String courseId \u003d dataBundle.courses.get(\"typicalCourse1\").getId();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        String instructorGoogleId \u003d dataBundle.instructors.get(\"instructor1OfCourse1\").googleId;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackSessionAttributes fsa : allFsa) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fsa.getCourseId().equals(courseId)) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "                finalFsa.add(fsa);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        AssertHelper.assertSameContentIgnoreOrder("
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "                finalFsa, fsLogic.getFeedbackSessionsListForInstructor(instructorGoogleId, false));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testGetSoftDeletedFeedbackSessionsListForInstructor() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e softDeletedFsa \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cFeedbackSessionAttributes\u003e allFsa \u003d dataBundle.feedbackSessions.values();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        String courseId \u003d dataBundle.courses.get(\"typicalCourse3\").getId();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        InstructorAttributes instructor \u003d dataBundle.instructors.get(\"instructor1OfCourse3\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackSessionAttributes fsa : allFsa) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fsa.getCourseId().equals(courseId) \u0026\u0026 fsa.isSessionDeleted()) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "                softDeletedFsa.add(fsa);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        AssertHelper.assertSameContentIgnoreOrder("
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "                softDeletedFsa, fsLogic.getSoftDeletedFeedbackSessionsListForInstructor(instructor));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testGetSoftDeletedFeedbackSessionsListForInstructors() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e softDeletedFsa \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cFeedbackSessionAttributes\u003e allFsa \u003d dataBundle.feedbackSessions.values();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        String courseId \u003d dataBundle.courses.get(\"typicalCourse3\").getId();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        InstructorAttributes instructor \u003d dataBundle.instructors.get(\"instructor1OfCourse3\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cInstructorAttributes\u003e instructors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        instructors.add(instructor);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackSessionAttributes fsa : allFsa) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fsa.getCourseId().equals(courseId) \u0026\u0026 fsa.isSessionDeleted()) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "                softDeletedFsa.add(fsa);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        AssertHelper.assertSameContentIgnoreOrder("
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "                softDeletedFsa, fsLogic.getSoftDeletedFeedbackSessionsListForInstructors(instructors));"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testIsFeedbackSessionHasQuestionForStudents() throws Exception {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        // no need to removeAndRestoreTypicalDataInDatastore() as the previous test does not change the db"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes sessionWithStudents \u003d dataBundle.feedbackSessions.get(\"gracePeriodSession\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes sessionWithoutStudents \u003d dataBundle.feedbackSessions.get(\"closedSession\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"non-existent session/courseId\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        EntityDoesNotExistException ednee \u003d assertThrows(EntityDoesNotExistException.class,"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "                () -\u003e fsLogic.isFeedbackSessionHasQuestionForStudents(\"nOnEXistEnT session\", \"someCourse\"));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Trying to check a non-existent feedback session: someCourse/nOnEXistEnT session\","
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "                ednee.getMessage());"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"session contains students\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fsLogic.isFeedbackSessionHasQuestionForStudents(sessionWithStudents.getFeedbackSessionName(),"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                   sessionWithStudents.getCourseId()));"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"session does not contain students\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fsLogic.isFeedbackSessionHasQuestionForStudents(sessionWithoutStudents.getFeedbackSessionName(),"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                    sessionWithoutStudents.getCourseId()));"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testGetFeedbackSessionsClosingWithinTimeLimit() throws Exception {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"init : 0 standard sessions closing within time-limit\");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e sessionList \u003d fsLogic.getFeedbackSessionsClosingWithinTimeLimit();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, sessionList.size());"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"case : 1 open session in undeleted course closing within time-limit\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session \u003d getNewFeedbackSession();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setTimeZone(ZoneId.of(\"UTC\"));"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setSessionVisibleFromTime(TimeHelper.getInstantDaysOffsetFromNow(-1));"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setStartTime(TimeHelper.getInstantDaysOffsetFromNow(-1));"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setEndTime(TimeHelper.getInstantDaysOffsetFromNow(1));"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.createFeedbackSession(session);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        coursesLogic.createCourse("
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "                CourseAttributes.builder(session.getCourseId())"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withName(\"Test Course\")"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withTimezone(ZoneId.of(\"UTC\"))"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionList \u003d fsLogic.getFeedbackSessionsClosingWithinTimeLimit();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, sessionList.size());"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(session.getFeedbackSessionName(), sessionList.get(0).getFeedbackSessionName());"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"case : 1 open session in deleted course closing within time-limit\");"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        coursesLogic.moveCourseToRecycleBin(session.getCourseId());"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionList \u003d fsLogic.getFeedbackSessionsClosingWithinTimeLimit();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, sessionList.size());"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore the new course from Recycle Bin, and delete the newly added session as"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        // removeAndRestoreTypicalDataInDatastore() wont do it"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        coursesLogic.restoreCourseFromRecycleBin(session.getCourseId());"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.deleteFeedbackSessionCascade(session.getFeedbackSessionName(), session.getCourseId());"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testGetFeedbackSessionsClosedWithinThePastHour() throws Exception {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"init : 0 standard sessions closed within the past hour\");"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e sessionList \u003d fsLogic.getFeedbackSessionsClosedWithinThePastHour();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, sessionList.size());"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"case : 1 closed session in undeleted course within the past hour\");"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session \u003d getNewFeedbackSession();"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setTimeZone(ZoneId.of(\"UTC\"));"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setSessionVisibleFromTime(TimeHelper.getInstantDaysOffsetFromNow(-1));"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setStartTime(TimeHelper.getInstantDaysOffsetFromNow(-1));"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setEndTime(TimeHelperExtension.getInstantMinutesOffsetFromNow(-59));"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.createFeedbackSession(session);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionList \u003d fsLogic.getFeedbackSessionsClosedWithinThePastHour();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, sessionList.size());"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(session.getFeedbackSessionName(), sessionList.get(0).getFeedbackSessionName());"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"case : 1 closed session in deleted course within the past hour\");"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        coursesLogic.moveCourseToRecycleBin(session.getCourseId());"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionList \u003d fsLogic.getFeedbackSessionsClosedWithinThePastHour();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, sessionList.size());"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore the new course from Recycle Bin, and delete the newly added session as"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        // removeAndRestoreTypicalDataInDatastore() wont do it"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "        coursesLogic.restoreCourseFromRecycleBin(session.getCourseId());"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.deleteFeedbackSessionCascade(session.getFeedbackSessionName(), session.getCourseId());"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testGetFeedbackSessionsWhichNeedOpenMailsToBeSent() throws Exception {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"init : 0 open sessions\");"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e sessionList \u003d fsLogic.getFeedbackSessionsWhichNeedOpenEmailsToBeSent();"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, sessionList.size());"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"case : 1 open session in undeleted course with mail unsent\");"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session \u003d getNewFeedbackSession();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setTimeZone(ZoneId.of(\"UTC\"));"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setSessionVisibleFromTime(TimeHelper.getInstantDaysOffsetFromNow(-2));"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setStartTime(TimeHelperExtension.getInstantHoursOffsetFromNow(-23));"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setEndTime(TimeHelper.getInstantDaysOffsetFromNow(1));"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setSentOpenEmail(false);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.createFeedbackSession(session);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionList \u003d fsLogic.getFeedbackSessionsWhichNeedOpenEmailsToBeSent();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, sessionList.size());"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(sessionList.get(0).getFeedbackSessionName(), session.getFeedbackSessionName());"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"case : 1 open session in undeleted course with mail sent\");"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setSentOpenEmail(true);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder(session.getFeedbackSessionName(), session.getCourseId())"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withSentOpenEmail(session.isSentOpenEmail())"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionList \u003d fsLogic.getFeedbackSessionsWhichNeedOpenEmailsToBeSent();"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, sessionList.size());"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"case : 1 closed session in undeleted course with mail unsent\");"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setSentOpenEmail(false);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setEndTime(TimeHelperExtension.getInstantHoursOffsetFromNow(-1));"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder(session.getFeedbackSessionName(), session.getCourseId())"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withSentOpenEmail(session.isSentOpenEmail())"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withEndTime(session.getEndTime())"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionList \u003d fsLogic.getFeedbackSessionsWhichNeedOpenEmailsToBeSent();"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, sessionList.size());"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"case : 1 open session in deleted course with mail unsent\");"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "        coursesLogic.moveCourseToRecycleBin(session.getCourseId());"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setEndTime(TimeHelperExtension.getInstantHoursOffsetFromNow(1));"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder(session.getFeedbackSessionName(), session.getCourseId())"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withEndTime(session.getEndTime())"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionList \u003d fsLogic.getFeedbackSessionsWhichNeedOpenEmailsToBeSent();"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, sessionList.size());"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"case : 1 open session in deleted course with mail sent\");"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setSentOpenEmail(true);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder(session.getFeedbackSessionName(), session.getCourseId())"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withSentOpenEmail(session.isSentOpenEmail())"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionList \u003d fsLogic.getFeedbackSessionsWhichNeedOpenEmailsToBeSent();"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, sessionList.size());"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"case : 1 closed session in deleted course with mail unsent\");"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setSentOpenEmail(false);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setEndTime(TimeHelperExtension.getInstantHoursOffsetFromNow(-1));"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder(session.getFeedbackSessionName(), session.getCourseId())"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withSentOpenEmail(session.isSentOpenEmail())"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withEndTime(session.getEndTime())"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionList \u003d fsLogic.getFeedbackSessionsWhichNeedOpenEmailsToBeSent();"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, sessionList.size());"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore the new course from Recycle Bin, and delete the newly added session as"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "        // removeAndRestoreTypicalDataInDatastore() wont do it"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "        coursesLogic.restoreCourseFromRecycleBin(session.getCourseId());"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.deleteFeedbackSessionCascade(session.getFeedbackSessionName(), session.getCourseId());"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testGetFeedbackSessionWhichNeedPublishedEmailsToBeSent() throws Exception {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"init : no published sessions\");"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "        unpublishAllSessions();"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e sessionList \u003d fsLogic"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "                .getFeedbackSessionsWhichNeedAutomatedPublishedEmailsToBeSent();"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, sessionList.size());"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"case : 1 published session in undeleted course with mail unsent\");"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session \u003d dataBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setTimeZone(ZoneId.of(\"UTC\"));"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setStartTime(TimeHelper.getInstantDaysOffsetFromNow(-2));"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setEndTime(TimeHelper.getInstantDaysOffsetFromNow(-1));"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setResultsVisibleFromTime(TimeHelper.getInstantDaysOffsetFromNow(-1));"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setSentPublishedEmail(false);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder(session.getFeedbackSessionName(), session.getCourseId())"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withTimeZone(session.getTimeZone())"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withStartTime(session.getStartTime())"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withEndTime(session.getEndTime())"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withResultsVisibleFromTime(session.getResultsVisibleFromTime())"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withSentPublishedEmail(session.isSentPublishedEmail())"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionList \u003d fsLogic.getFeedbackSessionsWhichNeedAutomatedPublishedEmailsToBeSent();"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, sessionList.size());"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(sessionList.get(0).getFeedbackSessionName(), session.getFeedbackSessionName());"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"case : 1 published session in undeleted course with mail sent\");"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setSentPublishedEmail(true);"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder(session.getFeedbackSessionName(), session.getCourseId())"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withSentPublishedEmail(session.isSentPublishedEmail())"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionList \u003d fsLogic.getFeedbackSessionsWhichNeedAutomatedPublishedEmailsToBeSent();"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, sessionList.size());"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"case : 1 published session in deleted course with mail unsent\");"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "        coursesLogic.moveCourseToRecycleBin(session.getCourseId());"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setSentPublishedEmail(false);"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder(session.getFeedbackSessionName(), session.getCourseId())"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withSentPublishedEmail(session.isSentPublishedEmail())"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionList \u003d fsLogic.getFeedbackSessionsWhichNeedAutomatedPublishedEmailsToBeSent();"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, sessionList.size());"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"case : 1 published session in deleted course with mail sent\");"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "        session.setSentPublishedEmail(true);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder(session.getFeedbackSessionName(), session.getCourseId())"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withSentPublishedEmail(session.isSentPublishedEmail())"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionList \u003d fsLogic.getFeedbackSessionsWhichNeedAutomatedPublishedEmailsToBeSent();"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, sessionList.size());"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testCreateAndDeleteFeedbackSession() throws InvalidParametersException, EntityAlreadyExistsException {"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"test create\");"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes fs \u003d getNewFeedbackSession();"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.createFeedbackSession(fs);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyPresentInDatastore(fs);"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes finalFs \u003d fs;"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"test create with invalid session name\");"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "        fs.setFeedbackSessionName(\"test \u0026 test\");"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "        Exception e \u003d assertThrows(Exception.class, () -\u003e fsLogic.createFeedbackSession(finalFs));"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "                \"The provided feedback session name is not acceptable to TEAMMATES \""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"as it cannot contain the following special html characters in brackets: \""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"(\u0026lt; \u0026gt; \u0026quot; \u0026#x2f; \u0026#39; \u0026amp;)\","
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "                e.getMessage());"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "        fs.setFeedbackSessionName(\"test %| test\");"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "        e \u003d assertThrows(Exception.class, () -\u003e fsLogic.createFeedbackSession(finalFs));"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "                \"\\\"test %| test\\\" is not acceptable to TEAMMATES as a/an feedback session name \""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"because it contains invalid characters. A/An feedback session name \""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"must start with an alphanumeric character, and cannot contain \""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"any vertical bar (|) or percent sign (%).\","
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "                e.getMessage());"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"test delete\");"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "        fs \u003d getNewFeedbackSession();"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a question under the session to test for cascading during delete."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackQuestionAttributes fq \u003d FeedbackQuestionAttributes.builder()"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "                .withFeedbackSessionName(fs.getFeedbackSessionName())"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "                .withCourseId(fs.getCourseId())"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "                .withQuestionNumber(1)"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "                .withNumberOfEntitiesToGiveFeedbackTo(Const.MAX_POSSIBLE_RECIPIENTS)"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "                .withGiverType(FeedbackParticipantType.STUDENTS)"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "                .withRecipientType(FeedbackParticipantType.TEAMS)"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "                .withQuestionDetails(new FeedbackTextQuestionDetails(\"question to be deleted through cascade\"))"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "                .withShowResponsesTo(new ArrayList\u003c\u003e())"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "                .withShowRecipientNameTo(new ArrayList\u003c\u003e())"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "                .withShowGiverNameTo(new ArrayList\u003c\u003e())"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "        fqLogic.createFeedbackQuestion(fq);"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.deleteFeedbackSessionCascade(fs.getFeedbackSessionName(), fs.getCourseId());"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyAbsentInDatastore(fs);"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyAbsentInDatastore(fq);"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testGetFeedbackSessionDetailsForInstructor() throws Exception {"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "        // This file contains a session with a standard"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "        // session + a special session with all questions without recipients."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "        DataBundle newDataBundle \u003d loadDataBundle(\"/FeedbackSessionDetailsTest.json\");"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "        removeAndRestoreDataBundle(newDataBundle);"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, FeedbackSessionDetailsBundle\u003e detailsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "        String instrGoogleId \u003d newDataBundle.instructors.get(\"instructor1OfCourse1\").googleId;"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionDetailsBundle\u003e detailsList \u003d fsLogic.getFeedbackSessionDetailsForInstructor(instrGoogleId);"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e expectedSessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedSessions.add(newDataBundle.feedbackSessions.get(\"standard.session\").toString());"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedSessions.add(newDataBundle.feedbackSessions.get(\"no.responses.session\").toString());"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedSessions.add(newDataBundle.feedbackSessions.get(\"no.recipients.session\").toString());"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder actualSessionsBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackSessionDetailsBundle details : detailsList) {"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "            actualSessionsBuilder.append(details.feedbackSession.toString());"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "            detailsMap.put("
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "                    details.feedbackSession.getFeedbackSessionName() + \"%\" + details.feedbackSession.getCourseId(),"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "                    details);"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "        String actualSessions \u003d actualSessionsBuilder.toString();"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"standard session\");"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(3, detailsList.size());"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "        AssertHelper.assertContains(expectedSessions, actualSessions);"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionStats stats \u003d"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "                detailsMap.get(newDataBundle.feedbackSessions.get(\"standard.session\").getFeedbackSessionName() + \"%\""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "                               + newDataBundle.feedbackSessions.get(\"standard.session\").getCourseId()).stats;"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "        // 2 instructors, 6 students \u003d 8"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(8, stats.expectedTotal);"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "        // 1 instructor, 1 student, did not respond \u003d\u003e 8-2\u003d6"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, stats.submittedTotal);"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"No recipients session\");"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "        stats \u003d detailsMap.get(newDataBundle.feedbackSessions.get(\"no.recipients.session\").getFeedbackSessionName() + \"%\""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "                               + newDataBundle.feedbackSessions.get(\"no.recipients.session\").getCourseId()).stats;"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "        // 2 instructors, 6 students \u003d 8"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(8, stats.expectedTotal);"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "        // only 1 student responded"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, stats.submittedTotal);"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"No responses session\");"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "        stats \u003d detailsMap.get(newDataBundle.feedbackSessions.get(\"no.responses.session\").getFeedbackSessionName() + \"%\""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "                               + newDataBundle.feedbackSessions.get(\"no.responses.session\").getCourseId()).stats;"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "        // 1 instructors, 1 students \u003d 2"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(2, stats.expectedTotal);"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "        // no responses"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, stats.submittedTotal);"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"instructor does not exist\");"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fsLogic.getFeedbackSessionDetailsForInstructor(\"non-existent.google.id\").isEmpty());"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testGetFeedbackSessionsForCourse() throws Exception {"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e actualSessions \u003d null;"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"non-existent course\");"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "        EntityDoesNotExistException ednee \u003d assertThrows(EntityDoesNotExistException.class,"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "                () -\u003e fsLogic.getFeedbackSessionsForUserInCourse(\"NonExistentCourseId\", \"randomUserId\"));"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Error getting feedback session(s): Course does not exist.\", ednee.getMessage());"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"Student viewing: 2 visible, 1 awaiting, 1 no questions\");"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "        // 2 valid sessions in course 1, 0 in course 2."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "        actualSessions \u003d fsLogic.getFeedbackSessionsForUserInCourse(\"idOfTypicalCourse1\", \"student1InCourse1@gmail.tmt\");"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "        // Student can see sessions 1 and 2. Session 3 has no questions. Session 4 is not yet visible for students."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "        String expected \u003d"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "                dataBundle.feedbackSessions.get(\"session1InCourse1\").toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "                + dataBundle.feedbackSessions.get(\"session2InCourse1\").toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "                + dataBundle.feedbackSessions.get(\"gracePeriodSession\").toString() + System.lineSeparator();"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackSessionAttributes session : actualSessions) {"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "            AssertHelper.assertContains(session.toString(), expected);"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(3, actualSessions.size());"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "        // Course 2 only has an instructor session."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "        // The instructor session has questions where responses are visible"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "        actualSessions \u003d fsLogic.getFeedbackSessionsForUserInCourse(\"idOfTypicalCourse2\", \"student1InCourse2@gmail.tmt\");"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, actualSessions.size());"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"Instructor viewing\");"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "        // 3 valid sessions in course 1, 1 in course 2."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "        actualSessions \u003d fsLogic.getFeedbackSessionsForUserInCourse(\"idOfTypicalCourse1\", \"instructor1@course1.tmt\");"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "        // Instructors should be able to see all sessions for the course"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "        expected \u003d"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "                dataBundle.feedbackSessions.get(\"session1InCourse1\").toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "                + dataBundle.feedbackSessions.get(\"session2InCourse1\").toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "                + dataBundle.feedbackSessions.get(\"empty.session\").toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "                + dataBundle.feedbackSessions.get(\"awaiting.session\").toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "                + dataBundle.feedbackSessions.get(\"closedSession\").toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "                + dataBundle.feedbackSessions.get(\"gracePeriodSession\").toString() + System.lineSeparator();"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackSessionAttributes session : actualSessions) {"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "            AssertHelper.assertContains(session.toString(), expected);"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, actualSessions.size());"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "        // We should only have one session here as there is only one session in the course."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "        actualSessions \u003d fsLogic.getFeedbackSessionsForUserInCourse(\"idOfTypicalCourse2\", \"instructor2@course2.tmt\");"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(actualSessions.get(0).toString(),"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "                dataBundle.feedbackSessions.get(\"session1InCourse2\").toString());"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, actualSessions.size());"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"Feedback session without questions for students but with visible responses are visible\");"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "        actualSessions \u003d fsLogic.getFeedbackSessionsForUserInCourse(\"idOfArchivedCourse\", \"student1InCourse1@gmail.tmt\");"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "        AssertHelper.assertContains(dataBundle.feedbackSessions.get(\"archiveCourse.session1\").toString(),"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "                actualSessions.toString());"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testGetFeedbackSessionQuestionsForStudent() throws Exception {"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"standard test\");"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionQuestionsBundle actual \u003d"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSessionQuestionsForStudent("
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"First feedback session\", \"idOfTypicalCourse1\", \"student1InCourse1@gmail.tmt\");"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "        // We just test this once."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataBundle.feedbackSessions.get(\"session1InCourse1\").toString(), actual.feedbackSession.toString());"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "        // There should be 3 questions for students to do in session 1."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "        // Other questions are set for instructors."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(3, actual.questionResponseBundle.size());"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "        // Question 1"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackQuestionAttributes expectedQuestion \u003d"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "                getQuestionFromDatastore(\"qn1InSession1InCourse1\");"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(actual.questionResponseBundle.containsKey(expectedQuestion));"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResponsesString \u003d getResponseFromDatastore(\"response1ForQ1S1C1\", dataBundle).toString();"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e actualResponses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackResponseAttributes responsesForQn : actual.questionResponseBundle.get(expectedQuestion)) {"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "            actualResponses.add(responsesForQn.toString());"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, actualResponses.size());"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "        AssertHelper.assertContains(actualResponses, expectedResponsesString);"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "        // Comment on response 1 of question 1"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackResponseCommentAttributes\u003e frcList \u003d"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "                actual.commentsForResponses.get(actual.questionResponseBundle.get(expectedQuestion).get(0).getId());"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, frcList.size());"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedCommentString \u003d getCommentFromDatastore(\"comment1FromT1C1ToR1Q1S1C1\", dataBundle).toString();"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommentString, frcList.get(0).toString());"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "        // Question 2"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedQuestion \u003d getQuestionFromDatastore(\"qn2InSession1InCourse1\");"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(actual.questionResponseBundle.containsKey(expectedQuestion));"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResponsesString \u003d getResponseFromDatastore(\"response2ForQ2S1C1\", dataBundle).toString();"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "        actualResponses.clear();"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackResponseAttributes responsesForQn : actual.questionResponseBundle.get(expectedQuestion)) {"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "            actualResponses.add(responsesForQn.toString());"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, actualResponses.size());"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "        AssertHelper.assertContains(actualResponses, expectedResponsesString);"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "        // Comment on response 1 of question 2"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "        frcList \u003d actual.commentsForResponses.get(actual.questionResponseBundle.get(expectedQuestion).get(0).getId());"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, frcList.size());"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "        // Question for students to instructors"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedQuestion \u003d getQuestionFromDatastore(\"qn5InSession1InCourse1\");"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(actual.questionResponseBundle.containsKey(expectedQuestion));"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "        // Check that instructors (except the one who is not displayed to student) appear as recipients"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e recipients \u003d actual.recipientList.get(expectedQuestion.getId());"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(recipients.containsKey(\"instructor1@course1.tmt\"));"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(recipients.containsKey(\"instructor2@course1.tmt\"));"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(recipients.containsKey(\"instructor3@course1.tmt\"));"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(recipients.containsKey(\"instructorNotYetJoinedCourse1@email.tmt\"));"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(recipients.containsKey(\"helper@course1.tmt\"));"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"team feedback test\");"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "        // Check that student3 get team member\u0027s (student4) feedback response as well (for team question)."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "        actual \u003d fsLogic.getFeedbackSessionQuestionsForStudent("
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Second feedback session\", \"idOfTypicalCourse1\", \"student3InCourse1@gmail.tmt\");"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(2, actual.questionResponseBundle.size());"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "        // Question 1"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedQuestion \u003d getQuestionFromDatastore(\"team.feedback\");"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(actual.questionResponseBundle.containsKey(expectedQuestion));"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResponsesString \u003d getResponseFromDatastore("
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "                \"response1ForQ1S2C1\", dataBundle).toString();"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "        actualResponses.clear();"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackResponseAttributes responsesForQn : actual.questionResponseBundle"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "                .get(expectedQuestion)) {"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "            actualResponses.add(responsesForQn.toString());"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, actualResponses.size());"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "        AssertHelper.assertContains(actualResponses, expectedResponsesString);"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "        // Question 2, no responses from this student yet"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedQuestion \u003d getQuestionFromDatastore(\"team.members.feedback\");"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(actual.questionResponseBundle.containsKey(expectedQuestion));"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(actual.questionResponseBundle.get(expectedQuestion).isEmpty());"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"failure: invalid session\");"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "        EntityDoesNotExistException ednee \u003d assertThrows(EntityDoesNotExistException.class,"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "                () -\u003e fsLogic.getFeedbackSessionQuestionsForStudent("
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"invalid session\", \"idOfTypicalCourse1\", \"student3InCourse1@gmail.tmt\"));"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Trying to get a non-existent feedback session: idOfTypicalCourse1/invalid session\","
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "                ednee.getMessage());"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"failure: non-existent student\");"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "        ednee \u003d assertThrows(EntityDoesNotExistException.class,"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "                () -\u003e fsLogic.getFeedbackSessionQuestionsForStudent("
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Second feedback session\", \"idOfTypicalCourse1\", \"randomUserId\"));"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Error getting feedback session(s): Student does not exist.\", ednee.getMessage());"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testGetFeedbackSessionQuestionsForInstructor() throws Exception {"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"standard test\");"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionQuestionsBundle actual \u003d"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSessionQuestionsForInstructor("
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Instructor feedback session\", \"idOfTypicalCourse2\", \"instructor1@course2.tmt\");"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "        // We just test this once."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataBundle.feedbackSessions.get(\"session1InCourse2\").toString(),"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "                actual.feedbackSession.toString());"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "        // There should be 2 question for students to do in session 1."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "        // The final question is set for SELF (creator) only."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(2, actual.questionResponseBundle.size());"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "        // Question 1"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackQuestionAttributes expectedQuestion \u003d"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "                getQuestionFromDatastore(\"qn1InSession1InCourse2\");"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(actual.questionResponseBundle.containsKey(expectedQuestion));"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResponsesString \u003d getResponseFromDatastore(\"response1ForQ1S1C2\", dataBundle).toString();"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e actualResponses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackResponseAttributes responsesForQn : actual.questionResponseBundle.get(expectedQuestion)) {"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "            actualResponses.add(responsesForQn.toString());"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, actualResponses.size());"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "        AssertHelper.assertContains(actualResponses, expectedResponsesString);"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "        // Comment on response 1 of question 1"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackResponseCommentAttributes\u003e frcList \u003d"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "                actual.commentsForResponses.get(actual.questionResponseBundle.get(expectedQuestion).get(0).getId());"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, frcList.size());"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedCommentString \u003d getCommentFromDatastore(\"comment1FromT1C1ToR1Q1S1C2\", dataBundle).toString();"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommentString, frcList.get(0).toString());"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "        // Question 2"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedQuestion \u003d getQuestionFromDatastore(\"qn2InSession1InCourse2\");"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(actual.questionResponseBundle.containsKey(expectedQuestion));"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(actual.questionResponseBundle.get(expectedQuestion).isEmpty());"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"failure: invalid session\");"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "        EntityDoesNotExistException ednee \u003d assertThrows(EntityDoesNotExistException.class,"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "                () -\u003e fsLogic.getFeedbackSessionQuestionsForInstructor("
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"invalid session\", \"idOfTypicalCourse1\", \"instructor1@course1.tmt\"));"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Trying to get a non-existent feedback session: idOfTypicalCourse1/invalid session\","
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "                ednee.getMessage());"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testGetFeedbackSessionResultsForUser() throws Exception {"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "        // This file contains a session with a standard"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "        // session which needs to have enough qn/response combinations to cover as much"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "        // of the SUT as possible"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "        DataBundle responseBundle \u003d loadDataBundle(\"/FeedbackSessionResultsTest.json\");"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "        removeAndRestoreDataBundle(responseBundle);"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"standard session with varied visibilities\");"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session \u003d"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "                responseBundle.feedbackSessions.get(\"standard.session\");"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "        /*** Test result bundle for student1 ***/"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "        StudentAttributes student \u003d"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "                responseBundle.students.get(\"student1InCourse1\");"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionResultsBundle results \u003d"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSessionResultsForStudent(session.getFeedbackSessionName(),"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "                        session.getCourseId(), student.email);"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "        // We just check for correct session once"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(session.toString(), results.feedbackSession.toString());"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "        // Student can see responses: q1r1, q2r1,3, q3r1, qr4r2-3, q5r1, q7r1-2, q8r1-2"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "        // We don\u0027t check the actual IDs as this is also implicitly tested"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "        // later when checking the visibility table."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(11, results.responses.size());"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(7, results.questions.size());"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "        // Test the user email-name maps used for display purposes"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "        String mapString \u003d results.emailNameTable.toString();"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e expectedStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "        String student2AnonEmail \u003d getStudentAnonEmail(responseBundle, \"student2InCourse1\");"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "        String student2AnonName \u003d getStudentAnonName(responseBundle, \"student2InCourse1\");"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "        String student4AnonEmail \u003d getStudentAnonEmail(responseBundle, \"student4InCourse1\");"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "        String student4AnonName \u003d getStudentAnonName(responseBundle, \"student4InCourse1\");"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.addAll(expectedStrings,"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student1InCourse1@gmail.tmt\u003dstudent1 In Course1\","
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student2InCourse1@gmail.tmt\u003dstudent2 In Course1\","
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student4InCourse1@gmail.tmt\u003dstudent4 In Course1\","
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Team 1.1\u003c/td\u003e\u003c/div\u003e\u0027\\\"\u003dTeam 1.1\u003c/td\u003e\u003c/div\u003e\u0027\\\"\","
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Team 1.2\u003dTeam 1.2\","
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Team 1.3\u003dTeam 1.3\","
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Team 1.4\u003dTeam 1.4\","
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.instr1@course1.tmt\u003dInstructor1 Course1\","
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student1InCourse1@gmail.tmt\" + Const.TEAM_OF_EMAIL_OWNER + \"\u003dTeam 1.1\","
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student2InCourse1@gmail.tmt\" + Const.TEAM_OF_EMAIL_OWNER + \"\u003dTeam 1.1\","
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student4InCourse1@gmail.tmt\" + Const.TEAM_OF_EMAIL_OWNER + \"\u003dTeam 1.2\","
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "                student2AnonEmail + \"\u003d\" + student2AnonName,"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "                student4AnonEmail + \"\u003d\" + student4AnonName);"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "        AssertHelper.assertContains(expectedStrings, mapString);"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(13, results.emailNameTable.size());"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "        // Test the user email-teamName maps used for display purposes"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "        mapString \u003d results.emailTeamNameTable.toString();"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStrings.clear();"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.addAll(expectedStrings,"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student4InCourse1@gmail.tmt\u003dTeam 1.2\","
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student1InCourse1@gmail.tmt\u003dTeam 1.1\u003c/td\u003e\u003c/div\u003e\u0027\\\"\","
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student1InCourse1@gmail.tmt\u0027s Team\u003d\","
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student2InCourse1@gmail.tmt\u0027s Team\u003d\","
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student4InCourse1@gmail.tmt\u0027s Team\u003d\","
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student2InCourse1@gmail.tmt\u003dTeam 1.1\u003c/td\u003e\u003c/div\u003e\u0027\\\"\","
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Team 1.1\u003c/td\u003e\u003c/div\u003e\u0027\\\"\u003d\","
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Team 1.3\u003d\","
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Team 1.2\u003d\","
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Team 1.4\u003d\","
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.instr1@course1.tmt\u003dInstructors\","
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "                student2AnonEmail + \"\u003d\" + student2AnonName + Const.TEAM_OF_EMAIL_OWNER,"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "                student4AnonEmail + \"\u003d\" + student4AnonName + Const.TEAM_OF_EMAIL_OWNER);"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "        AssertHelper.assertContains(expectedStrings, mapString);"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(13, results.emailTeamNameTable.size());"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "        // Test \u0027Append TeamName to Name\u0027 for display purposes with Typical Cases"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStrings.clear();"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e actualStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackResponseAttributes response : results.responses) {"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "            String giverName \u003d results.getNameForEmail(response.giver);"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "            String giverTeamName \u003d results.getTeamNameForEmail(response.giver);"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "            giverName \u003d results.appendTeamNameToName(giverName, giverTeamName);"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "            String recipientName \u003d results.getNameForEmail(response.recipient);"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "            String recipientTeamName \u003d results.getTeamNameForEmail(response.recipient);"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "            recipientName \u003d results.appendTeamNameToName(recipientName, recipientTeamName);"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "            actualStrings.add(giverName);"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "            actualStrings.add(recipientName);"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.addAll(expectedStrings,"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "                getStudentAnonName(responseBundle, \"student2InCourse1\"),"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "                getStudentAnonName(responseBundle, \"student4InCourse1\"),"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "                \"student1 In Course1\u003c/td\u003e\u003c/div\u003e\u0027\\\" (Team 1.1\u003c/td\u003e\u003c/div\u003e\u0027\\\")\","
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "                \"student2 In Course1 (Team 1.1\u003c/td\u003e\u003c/div\u003e\u0027\\\")\","
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "                \"student4 In Course1 (Team 1.2)\","
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Instructor1 Course1 (Instructors)\","
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Team 1.1\u003c/td\u003e\u003c/div\u003e\u0027\\\"\","
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Team 1.2\","
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Team 1.3\","
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Team 1.4\");"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "        AssertHelper.assertContains(expectedStrings, actualStrings.toString());"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "        // Test \u0027Append TeamName to Name\u0027 for display purposes with Special Cases"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStrings.clear();"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "        actualStrings.clear();"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "        // case: Unknown User"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "        String unknownUserName \u003d Const.USER_UNKNOWN_TEXT;"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "        String someTeamName \u003d \"Some Team Name\";"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "        unknownUserName \u003d results.appendTeamNameToName(unknownUserName, someTeamName);"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "        actualStrings.add(unknownUserName);"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "        // case: Nobody"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "        String nobodyUserName \u003d Const.USER_NOBODY_TEXT;"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "        nobodyUserName \u003d results.appendTeamNameToName(nobodyUserName, someTeamName);"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "        actualStrings.add(nobodyUserName);"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "        // case: Anonymous User"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "        String anonymousUserName \u003d Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT + \" \" + System.currentTimeMillis();"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "        anonymousUserName \u003d results.appendTeamNameToName(anonymousUserName, someTeamName);"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "        actualStrings.add(anonymousUserName);"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.addAll(expectedStrings,"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.USER_UNKNOWN_TEXT,"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.USER_NOBODY_TEXT,"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "                anonymousUserName);"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedStrings.toString(), actualStrings.toString());"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "        // Test the generated response visibilityTable for userNames."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "        mapString \u003d tableToString(results.visibilityTable);"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStrings.clear();"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.addAll(expectedStrings,"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn1.resp1\", responseBundle) + \"\u003d{true,true}\","
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn2.resp1\", responseBundle) + \"\u003d{true,true}\","
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn2.resp3\", responseBundle) + \"\u003d{true,true}\","
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn3.resp1\", responseBundle) + \"\u003d{true,true}\","
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn4.resp2\", responseBundle) + \"\u003d{true,true}\","
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn4.resp3\", responseBundle) + \"\u003d{false,true}\","
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn5.resp1\", responseBundle) + \"\u003d{true,false}\","
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn7.resp1\", responseBundle) + \"\u003d{true,true}\","
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn7.resp2\", responseBundle) + \"\u003d{true,true}\","
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn8.resp1\", responseBundle) + \"\u003d{true,true}\","
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn8.resp2\", responseBundle) + \"\u003d{true,true}\");"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "        AssertHelper.assertContains(expectedStrings, mapString);"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(11, results.visibilityTable.size());"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "        /*** Test result bundle for instructor1 within a course ***/"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "        InstructorAttributes instructor \u003d"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "                responseBundle.instructors.get(\"instructor1OfCourse1\");"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "        results \u003d fsLogic.getFeedbackSessionResultsForInstructor("
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getFeedbackSessionName(),"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getCourseId(), instructor.email);"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "        // Instructor can see responses: q2r1-3, q3r1-2, q4r1-3, q5r1, q6r1"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, results.responses.size());"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "        //Instructor should still see all questions"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(8, results.questions.size());"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "        // Test the user email-name maps used for display purposes"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "        mapString \u003d results.emailNameTable.toString();"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStrings.clear();"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "        String student1AnonEmail \u003d getStudentAnonEmail(responseBundle, \"student1InCourse1\");"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "        String student1AnonName \u003d getStudentAnonName(responseBundle, \"student1InCourse1\");"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "        String student3AnonEmail \u003d getStudentAnonEmail(responseBundle, \"student3InCourse1\");"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "        String student3AnonName \u003d getStudentAnonName(responseBundle, \"student3InCourse1\");"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "        String student6AnonEmail \u003d getStudentAnonEmail(responseBundle, \"student6InCourse1\");"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "        String student6AnonName \u003d getStudentAnonName(responseBundle, \"student6InCourse1\");"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "        String instructor1AnonEmail \u003d FeedbackSessionResultsBundle.getAnonEmail("
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "                                          FeedbackParticipantType.INSTRUCTORS,"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "                                          responseBundle.instructors.get(\"instructor1OfCourse1\").name);"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "        String instructor1AnonName \u003d FeedbackSessionResultsBundle.getAnonName("
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "                                          FeedbackParticipantType.INSTRUCTORS,"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "                                          responseBundle.instructors.get(\"instructor1OfCourse1\").name);"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "        String instructor2AnonEmail \u003d FeedbackSessionResultsBundle.getAnonEmail("
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "                                          FeedbackParticipantType.INSTRUCTORS,"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "                                          responseBundle.instructors.get(\"instructor2OfCourse1\").name);"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "        String instructor2AnonName \u003d FeedbackSessionResultsBundle.getAnonName("
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "                                          FeedbackParticipantType.INSTRUCTORS,"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "                                          responseBundle.instructors.get(\"instructor2OfCourse1\").name);"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.addAll(expectedStrings,"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "                \"%GENERAL%\u003d%NOBODY%\","
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student1InCourse1@gmail.tmt\u003dstudent1 In Course1\u003c/td\u003e\u003c/div\u003e\u0027\\\"\","
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student2InCourse1@gmail.tmt\u003dstudent2 In Course1\","
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student3InCourse1@gmail.tmt\u003dstudent3 In Course1\","
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student4InCourse1@gmail.tmt\u003dstudent4 In Course1\","
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student5InCourse1@gmail.tmt\u003dstudent5 In Course1\","
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student6InCourse1@gmail.tmt\u003dstudent6 In Course1\","
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.instr1@course1.tmt\u003dInstructor1 Course1\","
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.instr2@course1.tmt\u003dInstructor2 Course1\","
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "                student1AnonEmail + \"\u003d\" + student1AnonName,"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "                student2AnonEmail + \"\u003d\" + student2AnonName,"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "                student3AnonEmail + \"\u003d\" + student3AnonName,"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "                student6AnonEmail + \"\u003d\" + student6AnonName,"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "                instructor1AnonEmail + \"\u003d\" + instructor1AnonName,"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "                instructor2AnonEmail + \"\u003d\" + instructor2AnonName,"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Team 1.2\u003dTeam 1.2\","
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Team 1.3\u003dTeam 1.3\","
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Team 1.4\u003dTeam 1.4\");"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "        AssertHelper.assertContains(expectedStrings, mapString);"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(18, results.emailNameTable.size());"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "        // Test the user email-teamName maps used for display purposes"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "        mapString \u003d results.emailTeamNameTable.toString();"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStrings.clear();"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.addAll(expectedStrings,"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "                \"%GENERAL%\u003d\","
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student1InCourse1@gmail.tmt\u003dTeam 1.1\u003c/td\u003e\u003c/div\u003e\u0027\\\"\","
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student2InCourse1@gmail.tmt\u003dTeam 1.1\u003c/td\u003e\u003c/div\u003e\u0027\\\"\","
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student3InCourse1@gmail.tmt\u003dTeam 1.2\","
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student4InCourse1@gmail.tmt\u003dTeam 1.2\","
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student5InCourse1@gmail.tmt\u003dTeam 1.3\","
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student6InCourse1@gmail.tmt\u003dTeam 1.4\","
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.instr2@course1.tmt\u003dInstructors\","
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.instr1@course1.tmt\u003dInstructors\","
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "                student1AnonEmail + \"\u003d\" + student1AnonName + Const.TEAM_OF_EMAIL_OWNER,"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "                student2AnonEmail + \"\u003d\" + student2AnonName + Const.TEAM_OF_EMAIL_OWNER,"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "                student3AnonEmail + \"\u003d\" + student3AnonName + Const.TEAM_OF_EMAIL_OWNER,"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "                student6AnonEmail + \"\u003d\" + student6AnonName + Const.TEAM_OF_EMAIL_OWNER,"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "                instructor1AnonEmail + \"\u003d\" + instructor1AnonName + Const.TEAM_OF_EMAIL_OWNER,"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "                instructor2AnonEmail + \"\u003d\" + instructor2AnonName + Const.TEAM_OF_EMAIL_OWNER,"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Team 1.3\u003d\","
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Team 1.2\u003d\","
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Team 1.4\u003d\");"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "        AssertHelper.assertContains(expectedStrings, mapString);"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(18, results.emailTeamNameTable.size());"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "        // Test the generated response visibilityTable for userNames."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "        mapString \u003d tableToString(results.visibilityTable);"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStrings.clear();"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.addAll(expectedStrings,"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn2.resp1\", responseBundle) + \"\u003d{false,false}\","
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn2.resp2\", responseBundle) + \"\u003d{false,false}\","
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn2.resp3\", responseBundle) + \"\u003d{false,false}\","
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn3.resp1\", responseBundle) + \"\u003d{true,false}\","
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn3.resp2\", responseBundle) + \"\u003d{false,false}\","
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn4.resp1\", responseBundle) + \"\u003d{true,true}\","
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn4.resp2\", responseBundle) + \"\u003d{true,true}\","
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn4.resp3\", responseBundle) + \"\u003d{true,true}\","
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn5.resp1\", responseBundle) + \"\u003d{false,true}\","
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn6.resp1\", responseBundle) + \"\u003d{true,true}\");"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "        AssertHelper.assertContains(expectedStrings, mapString);"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, results.visibilityTable.size());"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "        /*** Test result bundle for instructor1 within a section ***/"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"standard case to view by Section A with default section detail\");"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "        results \u003d fsLogic.getFeedbackSessionResultsForInstructorInSection("
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getFeedbackSessionName(),"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getCourseId(), instructor.email, \"Section A\", SectionDetail.EITHER);"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "        // Instructor can see responses: q2r1-3, q3r1-2, q4r1-3, q5r1, q6r1"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "        // after filtering by section, the number of responses seen by instructor will differ."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "        // Responses viewed by instructor after filtering: q2r1-3, q3r1, q4r2-3, q5r1"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(7, results.responses.size());"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "        //Instructor should still see all questions"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(8, results.questions.size());"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "        // Test the user email-name maps used for display purposes"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "        mapString \u003d results.emailNameTable.toString();"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStrings.clear();"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.addAll(expectedStrings,"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student1InCourse1@gmail.tmt\u003dstudent1 In Course1\","
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "                student1AnonEmail + \"\u003d\" + student1AnonName,"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "                student2AnonEmail + \"\u003d\" + student2AnonName,"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "                student3AnonEmail + \"\u003d\" + student3AnonName,"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "                student6AnonEmail + \"\u003d\" + student6AnonName,"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "                instructor1AnonEmail + \"\u003d\" + instructor1AnonName,"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student2InCourse1@gmail.tmt\u003dstudent2 In Course1\","
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Team 1.4\u003dTeam 1.4\","
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.instr1@course1.tmt\u003dInstructor1 Course1\");"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "        AssertHelper.assertContains(expectedStrings, mapString);"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(13, results.emailNameTable.size());"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "        // Test the user email-teamName maps used for display purposes"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "        mapString \u003d results.emailTeamNameTable.toString();"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStrings.clear();"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.addAll(expectedStrings,"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student1InCourse1@gmail.tmt\u003dTeam 1.1\u003c/td\u003e\u003c/div\u003e\u0027\\\"\","
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "                student1AnonEmail + \"\u003d\" + student1AnonName + Const.TEAM_OF_EMAIL_OWNER,"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "                student2AnonEmail + \"\u003d\" + student2AnonName + Const.TEAM_OF_EMAIL_OWNER,"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "                student3AnonEmail + \"\u003d\" + student3AnonName + Const.TEAM_OF_EMAIL_OWNER,"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "                student6AnonEmail + \"\u003d\" + student6AnonName + Const.TEAM_OF_EMAIL_OWNER,"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "                instructor1AnonEmail + \"\u003d\" + instructor1AnonName + Const.TEAM_OF_EMAIL_OWNER,"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.student2InCourse1@gmail.tmt\u003dTeam 1.1\u003c/td\u003e\u003c/div\u003e\u0027\\\"\","
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Team 1.4\u003d\","
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "                \"FSRTest.instr1@course1.tmt\u003dInstructors\");"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "        AssertHelper.assertContains(expectedStrings, mapString);"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(13, results.emailTeamNameTable.size());"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "        // Test the generated response visibilityTable for userNames."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "        mapString \u003d tableToString(results.visibilityTable);"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStrings.clear();"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.addAll(expectedStrings,"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn3.resp1\", responseBundle) + \"\u003d{true,false}\","
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn4.resp3\", responseBundle) + \"\u003d{true,true}\","
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn2.resp3\", responseBundle) + \"\u003d{false,false}\","
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "                getResponseId(\"qn2.resp1\", responseBundle) + \"\u003d{false,false}\");"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "        AssertHelper.assertContains(expectedStrings, mapString);"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(7, results.visibilityTable.size());"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: test student2 too."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"standard case to view by receiver in Section A\");"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "        results \u003d fsLogic.getFeedbackSessionResultsForInstructorInSection("
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getFeedbackSessionName(),"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getCourseId(), instructor.email, \"Section A\", SectionDetail.EVALUEE);"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "        // Responses viewed by instructor after filtering: q1r1, q2r1, q4r3"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(3, results.responses.size());"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(8, results.questions.size());"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"standard case to view by giver in Section A\");"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "        results \u003d fsLogic.getFeedbackSessionResultsForInstructorInSection("
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getFeedbackSessionName(),"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getCourseId(), instructor.email, \"Section A\", SectionDetail.GIVER);"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "        // Responses viewed by instructor after filtering: q2r1-3, q3r1, q4r2-3, q5r1"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(7, results.responses.size());"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(8, results.questions.size());"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"standard case to view by both giver and receiver in Section A\");"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "        results \u003d fsLogic.getFeedbackSessionResultsForInstructorInSection("
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getFeedbackSessionName(),"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getCourseId(), instructor.email, \"Section A\", SectionDetail.BOTH);"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "        // Responses viewed by instructor after filtering: q2r1, q2r3, q3r1, q4r3"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, results.responses.size());"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(8, results.questions.size());"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"failure: no session\");"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "        EntityDoesNotExistException ednee \u003d assertThrows(EntityDoesNotExistException.class,"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "                () -\u003e fsLogic.getFeedbackSessionResultsForInstructor("
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"invalid session\", session.getCourseId(), instructor.email));"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Trying to view a non-existent feedback session: \" + session.getCourseId() + \"/invalid session\","
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "                ednee.getMessage());"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "        //TODO: check for cases where a person is both a student and an instructor"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testGetFeedbackSessionResultsSummaryAsCsv() throws Exception {"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"typical case: get all results\");"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session \u003d dataBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "        InstructorAttributes instructor \u003d dataBundle.instructors.get(\"instructor1OfCourse1\");"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "        String export \u003d fsLogic.getFeedbackSessionResultsSummaryAsCsv("
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getFeedbackSessionName(), session.getCourseId(), instructor.email, null, true, true);"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "        CsvChecker.verifyCsvContent(export, \"/feedbackSessionResultsAllResults.csv\");"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"typical case: get all results with unchecked isMissingResponsesShown\");"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "        session \u003d dataBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "        instructor \u003d dataBundle.instructors.get(\"instructor1OfCourse1\");"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "        export \u003d fsLogic.getFeedbackSessionResultsSummaryAsCsv("
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getFeedbackSessionName(), session.getCourseId(), instructor.email, null, false, true);"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "        CsvChecker.verifyCsvContent(export, \"/feedbackSessionResultsHideMissingResponses.csv\");"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"typical case: get results for single question\");"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "        // results for single question with sectionDetail is tested in InstructorFeedbackResultsDownloadActionTest.java"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "        int questionNum \u003d dataBundle.feedbackQuestions.get(\"qn2InSession1InCourse1\").getQuestionNumber();"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "        String questionId \u003d fqLogic.getFeedbackQuestion(session.getFeedbackSessionName(),"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getCourseId(), questionNum).getId();"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "        export \u003d fsLogic.getFeedbackSessionResultsSummaryAsCsv("
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getFeedbackSessionName(), session.getCourseId(), instructor.email, questionId, true, true);"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "        CsvChecker.verifyCsvContent(export, \"/feedbackSessionResultsSingleQuestion.csv\");"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"MCQ results\");"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "        DataBundle newDataBundle \u003d loadDataBundle(\"/FeedbackSessionQuestionTypeTest.json\");"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "        removeAndRestoreDataBundle(newDataBundle);"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "        session \u003d newDataBundle.feedbackSessions.get(\"mcqSession\");"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "        instructor \u003d newDataBundle.instructors.get(\"instructor1OfCourse1\");"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "        export \u003d fsLogic.getFeedbackSessionResultsSummaryAsCsv("
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getFeedbackSessionName(), session.getCourseId(), instructor.email, null, true, true);"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "        CsvChecker.verifyCsvContent(export, \"/feedbackSessionResultsMcqResults.csv\");"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"MSQ results\");"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "        session \u003d newDataBundle.feedbackSessions.get(\"msqSession\");"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "        instructor \u003d newDataBundle.instructors.get(\"instructor1OfCourse1\");"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "        export \u003d fsLogic.getFeedbackSessionResultsSummaryAsCsv("
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getFeedbackSessionName(), session.getCourseId(), instructor.email, null, true, true);"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "        CsvChecker.verifyCsvContent(export, \"/feedbackSessionResultsMsqResults.csv\");"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"NUMSCALE results\");"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "        session \u003d newDataBundle.feedbackSessions.get(\"numscaleSession\");"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "        instructor \u003d newDataBundle.instructors.get(\"instructor1OfCourse1\");"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "        export \u003d fsLogic.getFeedbackSessionResultsSummaryAsCsv("
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getFeedbackSessionName(), session.getCourseId(), instructor.email, null, true, true);"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "        CsvChecker.verifyCsvContent(export, \"/feedbackSessionResultsNumscaleResults.csv\");"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"CONSTSUM results\");"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "        session \u003d newDataBundle.feedbackSessions.get(\"constSumSession\");"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "        instructor \u003d newDataBundle.instructors.get(\"instructor1OfCourse1\");"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "        export \u003d fsLogic.getFeedbackSessionResultsSummaryAsCsv("
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getFeedbackSessionName(), session.getCourseId(), instructor.email, null, true, true);"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "        CsvChecker.verifyCsvContent(export, \"/feedbackSessionResultsConstsumResults.csv\");"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"Instructor without privilege to view responses\");"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "        instructor \u003d newDataBundle.instructors.get(\"instructor2OfCourse1\");"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "        export \u003d fsLogic.getFeedbackSessionResultsSummaryAsCsv("
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getFeedbackSessionName(), session.getCourseId(), instructor.email, null, true, true);"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "        CsvChecker.verifyCsvContent(export, \"/feedbackSessionResultsConstsumResultsInstructorNoPrivilege.csv\");"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"CONTRIB results\");"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "        session \u003d newDataBundle.feedbackSessions.get(\"contribSession\");"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "        instructor \u003d newDataBundle.instructors.get(\"instructor1OfCourse1\");"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "        export \u003d fsLogic.getFeedbackSessionResultsSummaryAsCsv("
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getFeedbackSessionName(), session.getCourseId(), instructor.email, null, true, true);"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "        CsvChecker.verifyCsvContent(export, \"/feedbackSessionResultsContribResults.csv\");"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"CONTRIB summary visibility variations\");"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "        // instructor not allowed to see student"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "        session \u003d newDataBundle.feedbackSessions.get(\"contribSessionStudentAnonymised\");"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "        instructor \u003d newDataBundle.instructors.get(\"instructor1OfCourse1\");"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "        export \u003d fsLogic.getFeedbackSessionResultsSummaryAsCsv("
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getFeedbackSessionName(), session.getCourseId(), instructor.email, null, true, true);"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "        CsvChecker.verifyCsvContent(export, \"/feedbackSessionResultsContribResultsStudentsAnonymous.csv\");"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "        // instructor not allowed to view student responses in section"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "        session \u003d newDataBundle.feedbackSessions.get(\"contribSessionInstructorSectionRestricted\");"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "        instructor \u003d newDataBundle.instructors.get(\"instructor1OfCourseWithSections\");"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "        export \u003d fsLogic.getFeedbackSessionResultsSummaryAsCsv("
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getFeedbackSessionName(), session.getCourseId(), instructor.email, null, true, true);"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "        CsvChecker.verifyCsvContent(export, \"/feedbackSessionResultsContribResultsRestrictedSections.csv\");"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"RUBRIC results\");"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "        session \u003d newDataBundle.feedbackSessions.get(\"rubricSession\");"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "        instructor \u003d newDataBundle.instructors.get(\"instructor1OfCourse1\");"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "        export \u003d fsLogic.getFeedbackSessionResultsSummaryAsCsv("
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getFeedbackSessionName(), session.getCourseId(), instructor.email, null, true, true);"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "        CsvChecker.verifyCsvContent(export, \"/feedbackSessionResultsRubricResults.csv\");"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"RANK results\");"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "        session \u003d newDataBundle.feedbackSessions.get(\"rankSession\");"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "        instructor \u003d newDataBundle.instructors.get(\"instructor1OfCourse1\");"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "        export \u003d fsLogic.getFeedbackSessionResultsSummaryAsCsv("
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getFeedbackSessionName(), session.getCourseId(), instructor.email, null, true, true);"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "        CsvChecker.verifyCsvContent(export, \"/feedbackSessionResultsRankResults.csv\");"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"MSQ results without statistics\");"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "        session \u003d newDataBundle.feedbackSessions.get(\"msqSession\");"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "        instructor \u003d newDataBundle.instructors.get(\"instructor1OfCourse1\");"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "        export \u003d fsLogic.getFeedbackSessionResultsSummaryAsCsv("
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getFeedbackSessionName(), session.getCourseId(), instructor.email, null, true, false);"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(export.contains(\"Summary Statistics\"));"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"Non-existent Course/Session\");"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "        InstructorAttributes finalInstructor \u003d instructor;"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "        EntityDoesNotExistException ednee \u003d assertThrows(EntityDoesNotExistException.class,"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "                () -\u003e fsLogic.getFeedbackSessionResultsSummaryAsCsv("
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"non.existent\", \"no course\", finalInstructor.email, null, true, true));"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Trying to view a non-existent feedback session: no course/non.existent\","
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "                ednee.getMessage());"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getStudentAnonEmail(DataBundle dataBundle, String studentKey) {"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "        return FeedbackSessionResultsBundle.getAnonEmail(FeedbackParticipantType.STUDENTS,"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "                                                         dataBundle.students.get(studentKey).name);"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getStudentAnonName(DataBundle dataBundle, String studentKey) {"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "        return FeedbackSessionResultsBundle.getAnonName(FeedbackParticipantType.STUDENTS,"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": "                                                        dataBundle.students.get(studentKey).name);"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testIsFeedbackSessionViewableToStudents() {"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"Session with questions for students to answer\");"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session \u003d dataBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fsLogic.isFeedbackSessionViewableToStudents(session));"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"Session without questions for students, but with visible responses\");"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "        session \u003d dataBundle.feedbackSessions.get(\"archiveCourse.session1\");"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fsLogic.isFeedbackSessionViewableToStudents(session));"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": "        session \u003d dataBundle.feedbackSessions.get(\"session1InCourse2\");"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fsLogic.isFeedbackSessionViewableToStudents(session));"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"empty session\");"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": "        session \u003d dataBundle.feedbackSessions.get(\"empty.session\");"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fsLogic.isFeedbackSessionViewableToStudents(session));"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testUpdateFeedbackSession() throws Exception {"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"failure: non-existent session name\");"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes.UpdateOptions updateOptions \u003d"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder(\"asdf_randomName1423\", \"idOfTypicalCourse1\")"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withInstructions(\"test\")"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": "        EntityDoesNotExistException ednee \u003d assertThrows(EntityDoesNotExistException.class,"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": "                () -\u003e fsLogic.updateFeedbackSession(updateOptions));"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Trying to update a non-existent feedback session: \""
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "                        + updateOptions.getCourseId() + \"/\" + updateOptions.getFeedbackSessionName(),"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": "                ednee.getMessage());"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"success 1: typical case\");"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes fsa \u003d dataBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": "        fsa.setInstructions(\"test\");"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes updatedFeedbackSession \u003d fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder(fsa.getFeedbackSessionName(), fsa.getCourseId())"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withInstructions(fsa.getInstructions())"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(fsa.toString(), fsLogic.getFeedbackSession(fsa.getFeedbackSessionName(), fsa.getCourseId()).toString());"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(fsa.toString(), updatedFeedbackSession.toString());"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testUpdateFeedbackSession_shouldAdjustEmailSendingStatusAccordingly() throws Exception {"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionsDb fsDb \u003d new FeedbackSessionsDb();"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes typicalSession \u003d dataBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"open email sent, whether the updated session is open determines the open email sending status\");"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": "        fsDb.updateFeedbackSession("
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder("
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": "                        typicalSession.getFeedbackSessionName(), typicalSession.getCourseId())"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withSentOpenEmail(true)"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder("
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": "                        typicalSession.getFeedbackSessionName(), typicalSession.getCourseId())"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withStartTime(TimeHelper.getInstantDaysOffsetFromNow(-2))"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withEndTime(TimeHelper.getInstantDaysOffsetFromNow(-1))"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": "        // updated session not open, status set to false"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fsLogic.getFeedbackSession("
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": "                typicalSession.getFeedbackSessionName(), typicalSession.getCourseId()).isSentOpenEmail());"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": "        fsDb.updateFeedbackSession("
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder("
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": "                        typicalSession.getFeedbackSessionName(), typicalSession.getCourseId())"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withSentOpenEmail(true)"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder("
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": "                        typicalSession.getFeedbackSessionName(), typicalSession.getCourseId())"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withStartTime(TimeHelper.getInstantDaysOffsetFromNow(-1))"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withEndTime(TimeHelper.getInstantDaysOffsetFromNow(1))"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": "        // updated session open, status set to true"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fsLogic.getFeedbackSession("
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": "                typicalSession.getFeedbackSessionName(), typicalSession.getCourseId()).isSentOpenEmail());"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"closed email sent, whether the updated session is closed determines the \""
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"closed/closing email sending status\");"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": "        fsDb.updateFeedbackSession("
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder("
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": "                        typicalSession.getFeedbackSessionName(), typicalSession.getCourseId())"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withSentClosedEmail(true)"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder("
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": "                        typicalSession.getFeedbackSessionName(), typicalSession.getCourseId())"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withStartTime(TimeHelper.getInstantDaysOffsetFromNow(-2))"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withEndTime(TimeHelper.getInstantDaysOffsetFromNow(-1))"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": "        // updated session closed, status set to true"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fsLogic.getFeedbackSession("
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": "                typicalSession.getFeedbackSessionName(), typicalSession.getCourseId()).isSentClosedEmail());"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fsLogic.getFeedbackSession("
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": "                typicalSession.getFeedbackSessionName(), typicalSession.getCourseId()).isSentClosingEmail());"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "        fsDb.updateFeedbackSession("
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder("
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": "                        typicalSession.getFeedbackSessionName(), typicalSession.getCourseId())"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withSentClosedEmail(true)"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder("
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": "                        typicalSession.getFeedbackSessionName(), typicalSession.getCourseId())"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withStartTime(TimeHelper.getInstantDaysOffsetFromNow(-1))"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withEndTime(TimeHelper.getInstantDaysOffsetFromNow(2))"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": "        //  updated session not closed, status set to false"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fsLogic.getFeedbackSession("
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": "                typicalSession.getFeedbackSessionName(), typicalSession.getCourseId()).isSentClosedEmail());"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fsLogic.getFeedbackSession("
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": "                typicalSession.getFeedbackSessionName(), typicalSession.getCourseId()).isSentClosingEmail());"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": "        fsDb.updateFeedbackSession("
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder("
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": "                        typicalSession.getFeedbackSessionName(), typicalSession.getCourseId())"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withSentClosedEmail(true)"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder("
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": "                        typicalSession.getFeedbackSessionName(), typicalSession.getCourseId())"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withStartTime(TimeHelperExtension.getInstantMinutesOffsetFromNow(-10))"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withEndTime(TimeHelperExtension.getInstantMinutesOffsetFromNow(10))"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": "        // updated session not closed, status set to false"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fsLogic.getFeedbackSession("
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": "                typicalSession.getFeedbackSessionName(), typicalSession.getCourseId()).isSentClosedEmail());"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": "        // closed in 10 minutes, should not send closing email anymore"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fsLogic.getFeedbackSession("
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": "                typicalSession.getFeedbackSessionName(), typicalSession.getCourseId()).isSentClosingEmail());"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"published email sent, whether the updated session is published determines the \""
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"publish email sending status\");"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": "        fsDb.updateFeedbackSession("
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder("
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "-"
        },
        "content": "                        typicalSession.getFeedbackSessionName(), typicalSession.getCourseId())"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withSentPublishedEmail(true)"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder("
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": "                        typicalSession.getFeedbackSessionName(), typicalSession.getCourseId())"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withResultsVisibleFromTime(Const.TIME_REPRESENTS_NOW)"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": "        // updated session published, status set to true"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fsLogic.getFeedbackSession("
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": "                typicalSession.getFeedbackSessionName(), typicalSession.getCourseId()).isSentPublishedEmail());"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": "        fsDb.updateFeedbackSession("
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder("
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": "                        typicalSession.getFeedbackSessionName(), typicalSession.getCourseId())"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withSentPublishedEmail(true)"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes.updateOptionsBuilder("
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": "                        typicalSession.getFeedbackSessionName(), typicalSession.getCourseId())"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withResultsVisibleFromTime(Const.TIME_REPRESENTS_LATER)"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": "        // updated session not published, status set to false"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fsLogic.getFeedbackSession("
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": "                typicalSession.getFeedbackSessionName(), typicalSession.getCourseId()).isSentPublishedEmail());"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testPublishUnpublishFeedbackSession() throws Exception {"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"success: publish\");"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes sessionUnderTest \u003d dataBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": "        // set as manual publish"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionUnderTest.setResultsVisibleFromTime(Const.TIME_REPRESENTS_LATER);"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.updateFeedbackSession("
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": "                FeedbackSessionAttributes"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": "                        .updateOptionsBuilder(sessionUnderTest.getFeedbackSessionName(), sessionUnderTest.getCourseId())"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": "                        .withResultsVisibleFromTime(sessionUnderTest.getResultsVisibleFromTime())"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        fsLogic.publishFeedbackSession(sessionUnderTest.getFeedbackSessionName(), sessionUnderTest.getCourseId());"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set real time of publishing"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes sessionPublished \u003d"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSession(sessionUnderTest.getFeedbackSessionName(), sessionUnderTest.getCourseId());"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionUnderTest.setResultsVisibleFromTime(sessionPublished.getResultsVisibleFromTime());"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(sessionUnderTest.toString(), sessionPublished.toString());"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"failure: already published\");"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidParametersException ipe \u003d assertThrows(InvalidParametersException.class,"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                () -\u003e fsLogic.publishFeedbackSession("
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                        sessionUnderTest.getFeedbackSessionName(), sessionUnderTest.getCourseId()));"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Error publishing feedback session: Session has already been published.\", ipe.getMessage());"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"success: unpublish\");"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        fsLogic.unpublishFeedbackSession(sessionUnderTest.getFeedbackSessionName(), sessionUnderTest.getCourseId());"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionUnderTest.setResultsVisibleFromTime(Const.TIME_REPRESENTS_LATER);"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "-"
        },
        "content": "                sessionUnderTest.toString(),"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "-"
        },
        "content": "                fsLogic.getFeedbackSession("
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "-"
        },
        "content": "                        sessionUnderTest.getFeedbackSessionName(), sessionUnderTest.getCourseId()).toString());"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"failure: not published\");"
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        ipe \u003d assertThrows(InvalidParametersException.class,"
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                () -\u003e fsLogic.unpublishFeedbackSession("
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                        sessionUnderTest.getFeedbackSessionName(), sessionUnderTest.getCourseId()));"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Error unpublishing feedback session: Session has already been unpublished.\", ipe.getMessage());"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        ______TS(\"failure: publish/unpublish non-existent session\");"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNull(fsLogic.getFeedbackSession(\"randomName\", \"randomId\"));"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        EntityDoesNotExistException ednee \u003d assertThrows(EntityDoesNotExistException.class,"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                () -\u003e fsLogic.publishFeedbackSession(\"randomName\", \"randomId\"));"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(\"Trying to update a non-existent feedback session: randomId/randomName\", ednee.getMessage());"
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        ednee \u003d assertThrows(EntityDoesNotExistException.class,"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                () -\u003e fsLogic.unpublishFeedbackSession(\"randomName\", \"randomId\"));"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(\"Trying to update a non-existent feedback session: randomId/randomName\", ednee.getMessage());"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testIsFeedbackSessionCompletedByInstructor() throws Exception {"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"success: empty session\");"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes fs \u003d dataBundle.feedbackSessions.get(\"empty.session\");"
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "-"
        },
        "content": "        InstructorAttributes instructor \u003d dataBundle.instructors.get(\"instructor2OfCourse1\");"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fsLogic.isFeedbackSessionCompletedByInstructor(fs, instructor.email));"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testIsFeedbackSessionCompletedByStudent() {"
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"success: empty session\");"
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes fs \u003d dataBundle.feedbackSessions.get(\"empty.session\");"
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "-"
        },
        "content": "        StudentAttributes student \u003d dataBundle.students.get(\"student2InCourse1\");"
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fsLogic.isFeedbackSessionCompletedByStudent(fs, student.email));"
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testIsFeedbackSessionFullyCompletedByStudent() throws Exception {"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes fs \u003d dataBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "-"
        },
        "content": "        StudentAttributes student1OfCourse1 \u003d dataBundle.students.get(\"student1InCourse1\");"
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "-"
        },
        "content": "        StudentAttributes student3OfCourse1 \u003d dataBundle.students.get(\"student3InCourse1\");"
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"failure: non-existent feedback session for student\");"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "-"
        },
        "content": "        EntityDoesNotExistException ednee \u003d assertThrows(EntityDoesNotExistException.class,"
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "-"
        },
        "content": "                () -\u003e fsLogic.isFeedbackSessionFullyCompletedByStudent("
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"nonExistentFSName\", fs.getCourseId(), \"random.student@email\"));"
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Trying to check a non-existent feedback session: \" + fs.getCourseId() + \"/nonExistentFSName\","
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "-"
        },
        "content": "                ednee.getMessage());"
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"success case: fully done by student 1\");"
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fsLogic.isFeedbackSessionFullyCompletedByStudent(fs.getFeedbackSessionName(), fs.getCourseId(),"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                    student1OfCourse1.email));"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"success case: partially done by student 3\");"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fsLogic.isFeedbackSessionFullyCompletedByStudent(fs.getFeedbackSessionName(), fs.getCourseId(),"
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                     student3OfCourse1.email));"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "-"
        },
        "content": "    private FeedbackSessionAttributes getNewFeedbackSession() {"
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "-"
        },
        "content": "        return FeedbackSessionAttributes.builder(\"fsTest1\", \"testCourse\")"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "-"
        },
        "content": "                .withCreatorEmail(\"valid@email.tmt\")"
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "-"
        },
        "content": "                .withSessionVisibleFromTime(TimeHelperExtension.getInstantMinutesOffsetFromNow(-62))"
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "-"
        },
        "content": "                .withStartTime(TimeHelperExtension.getInstantHoursOffsetFromNow(-1))"
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEndTime(TimeHelperExtension.getInstantHoursOffsetFromNow(0))"
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "-"
        },
        "content": "                .withResultsVisibleFromTime(TimeHelperExtension.getInstantMinutesOffsetFromNow(1))"
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "-"
        },
        "content": "                .withGracePeriod(Duration.ofMinutes(5))"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "-"
        },
        "content": "                .withInstructions(\"Give feedback.\")"
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "-"
        },
        "content": "    private FeedbackQuestionAttributes getQuestionFromDatastore(String jsonId) {"
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackQuestionAttributes questionToGet \u003d dataBundle.feedbackQuestions.get(jsonId);"
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "-"
        },
        "content": "        questionToGet \u003d fqLogic.getFeedbackQuestion("
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "-"
        },
        "content": "                questionToGet.feedbackSessionName,"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "-"
        },
        "content": "                questionToGet.courseId,"
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "-"
        },
        "content": "                questionToGet.questionNumber);"
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "-"
        },
        "content": "        return questionToGet;"
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "-"
        },
        "content": "    // Extract response id from datastore based on json key."
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getResponseId(String jsonId, DataBundle bundle) {"
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "-"
        },
        "content": "        return getResponseFromDatastore(jsonId, bundle).getId();"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "-"
        },
        "content": "    private FeedbackResponseAttributes getResponseFromDatastore(String jsonId, DataBundle bundle) {"
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackResponseAttributes response \u003d bundle.feedbackResponses.get(jsonId);"
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "-"
        },
        "content": "        String questionId \u003d null;"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "-"
        },
        "content": "            int qnNumber \u003d Integer.parseInt(response.feedbackQuestionId);"
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "-"
        },
        "content": "            questionId \u003d fqLogic.getFeedbackQuestion("
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "-"
        },
        "content": "                        response.feedbackSessionName, response.courseId,"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "-"
        },
        "content": "                        qnNumber).getId();"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "-"
        },
        "content": "            questionId \u003d response.feedbackQuestionId;"
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "-"
        },
        "content": "        return frLogic.getFeedbackResponse(questionId,"
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "-"
        },
        "content": "                response.giver, response.recipient);"
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "-"
        },
        "content": "    private FeedbackResponseCommentAttributes getCommentFromDatastore(String jsonId, DataBundle bundle) {"
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackResponseCommentAttributes comment \u003d bundle.feedbackResponseComments.get(jsonId);"
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "-"
        },
        "content": "        return frcLogic.getFeedbackResponseComment(comment.feedbackResponseId, comment.commentGiver, comment.createdAt);"
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "-"
        },
        "content": "    private void unpublishAllSessions() throws InvalidParametersException, EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackSessionAttributes fs : dataBundle.feedbackSessions.values()) {"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fs.isPublished()) {"
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                fsLogic.unpublishFeedbackSession(fs.getFeedbackSessionName(), fs.getCourseId());"
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "-"
        },
        "content": "    // Stringifies the visibility table for easy testing/comparison."
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tableToString(Map\u003cString, boolean[]\u003e table) {"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "-"
        },
        "content": "        return table.entrySet().stream()"
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(entry -\u003e \"{\" + entry.getKey() + \"\u003d{\" + entry.getValue()[0] + \u0027,\u0027 + entry.getValue()[1] + \"}}\")"
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.joining(\",\"));"
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testMoveFeedbackSessionToRecycleBin() throws InvalidParametersException, EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes feedbackSession \u003d dataBundle.feedbackSessions.get(\"session2InCourse3\");"
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "-"
        },
        "content": "        String feedbackSessionName \u003d dataBundle.feedbackSessions.get(\"session2InCourse3\").getFeedbackSessionName();"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "-"
        },
        "content": "        String courseId \u003d dataBundle.courses.get(\"typicalCourse3\").getId();"
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(feedbackSession.isSessionDeleted());"
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "-"
        },
        "content": "        Instant deletedTime \u003d fsLogic.moveFeedbackSessionToRecycleBin(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "-"
        },
        "content": "        feedbackSession.setDeletedTime(deletedTime);"
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes actualFs \u003d fsLogic.getFeedbackSessionFromRecycleBin(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(JsonUtils.toJson(feedbackSession), JsonUtils.toJson(actualFs));"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(feedbackSession.isSessionDeleted());"
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testRestoreFeedbackSessionFromRecycleBin() throws InvalidParametersException, EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes feedbackSession \u003d dataBundle.feedbackSessions.get(\"session2InCourse3\");"
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "-"
        },
        "content": "        String feedbackSessionName \u003d dataBundle.feedbackSessions.get(\"session2InCourse3\").getFeedbackSessionName();"
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "-"
        },
        "content": "        String courseId \u003d dataBundle.courses.get(\"typicalCourse3\").getId();"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(feedbackSession.isSessionDeleted());"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.restoreFeedbackSessionFromRecycleBin(feedbackSessionName, courseId);"
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "-"
        },
        "content": "        feedbackSession.resetDeletedTime();"
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyPresentInDatastore(feedbackSession);"
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(feedbackSession.isSessionDeleted());"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "-"
        },
        "content": "    private void testRestoreAllFeedbackSessionsFromRecycleBin()"
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "-"
        },
        "content": "            throws InvalidParametersException, EntityDoesNotExistException {"
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "-"
        },
        "content": "        InstructorAttributes instructor \u003d dataBundle.instructors.get(\"instructor1OfCourse3\");"
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cInstructorAttributes\u003e instructors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "-"
        },
        "content": "        instructors.add(instructor);"
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackSessionAttributes\u003e softDeletedFsa \u003d fsLogic.getSoftDeletedFeedbackSessionsListForInstructor(instructor);"
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackSessionAttributes fsa : softDeletedFsa) {"
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(fsa.isSessionDeleted());"
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "-"
        },
        "content": "        fsLogic.restoreAllFeedbackSessionsFromRecycleBin(instructors);"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FeedbackSessionAttributes fsa : softDeletedFsa) {"
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "-"
        },
        "content": "            fsa.resetDeletedTime();"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "-"
        },
        "content": "            verifyPresentInDatastore(fsa);"
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(fsa.isSessionDeleted());"
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 19,
      "-": 1808
    }
  },
  {
    "path": "src/test/java/teammates/test/cases/webapi/CreateFeedbackResponseCommentActionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package teammates.test.cases.webapi;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.apache.http.HttpStatus;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testng.annotations.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.FeedbackParticipantType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.InstructorAttributes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.util.Const;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.logic.core.FeedbackSessionsLogic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.storage.api.FeedbackResponseCommentsDb;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.ui.webapi.action.CreateFeedbackResponseCommentAction;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.ui.webapi.action.JsonResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.ui.webapi.output.MessageOutput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.ui.webapi.request.FeedbackResponseCommentUpdateRequest;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * SUT: {@link CreateFeedbackResponseCommentAction}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CreateFeedbackResponseCommentActionTest extends BaseActionTest\u003cCreateFeedbackResponseCommentAction\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String getActionUri() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return Const.ResourceURIs.RESPONSE_COMMENT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String getRequestMethod() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return POST;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testExecute() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes session \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        int questionNumber \u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackQuestionAttributes question \u003d logic.getFeedbackQuestion("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                session.getFeedbackSessionName(), session.getCourseId(), questionNumber);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String giverEmail \u003d \"student1InCourse1@gmail.tmt\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String receiverEmail \u003d \"student1InCourse1@gmail.tmt\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackResponseAttributes response \u003d logic.getFeedbackResponse(question.getId(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                giverEmail, receiverEmail);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        InstructorAttributes instructor \u003d typicalBundle.instructors.get(\"instructor1OfCourse1\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        gaeSimulation.loginAsInstructor(instructor.googleId);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"Unsuccessful case: not enough parameters\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyHttpParameterFailure();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"typical successful case for unpublished session\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_ID, response.getId(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackResponseCommentUpdateRequest requestBody \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                new FeedbackResponseCommentUpdateRequest(\"Comment to first response\", null, \"GIVER,INSTRUCTORS\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        CreateFeedbackResponseCommentAction action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getJsonResult(action);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFeedbackResponseCommentAttributes\u003e frcList \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                getInstructorComments(response.getId(), \"Comment to first response\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, frcList.size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackResponseCommentAttributes frc \u003d frcList.get(0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FeedbackParticipantType.INSTRUCTORS, frc.commentGiverType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"instructor1@course1.tmt\", frc.commentGiver);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(frc.isCommentFromFeedbackParticipant);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(frc.isVisibilityFollowingFeedbackQuestion);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"typical successful case for unpublished session empty giver permissions\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_ID, response.getId(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d new FeedbackResponseCommentUpdateRequest(\"Empty giver permissions\", null, \"\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        getJsonResult(action);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"typical successful case for unpublished session shown to various recipients\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_ID, response.getId(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d new FeedbackResponseCommentUpdateRequest(\"Null comment permissions\", null, null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getJsonResult(action);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_ID, response.getId(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d new FeedbackResponseCommentUpdateRequest(\"Empty comment permissions\", \"\", \"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        getJsonResult(action);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_ID, response.getId(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d new FeedbackResponseCommentUpdateRequest(\"Comment shown to giver\", \"GIVER\", null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        getJsonResult(action);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_ID, response.getId(),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d new FeedbackResponseCommentUpdateRequest(\"Comment shown to receiver\", \"RECEIVER\", null);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        getJsonResult(action);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_ID, response.getId(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                new FeedbackResponseCommentUpdateRequest(\"Comment shown to own team members\", \"OWN_TEAM_MEMBERS\", null);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        getJsonResult(action);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_ID, response.getId(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d new FeedbackResponseCommentUpdateRequest("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Comment shown to receiver team members\", \"RECEIVER_TEAM_MEMBERS\", null);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        getJsonResult(action);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_ID, response.getId(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d new FeedbackResponseCommentUpdateRequest(\"Comment shown to students\", \"STUDENTS\", null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        getJsonResult(action);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"typical successful case for published session\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        FeedbackSessionsLogic.inst().publishFeedbackSession(session.getFeedbackSessionName(), session.getCourseId());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_ID, response.getId(),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d new FeedbackResponseCommentUpdateRequest("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Comment to first response, published session\", \"GIVER,INSTRUCTORS\", \"GIVER,INSTRUCTORS\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        getJsonResult(action);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        frcList \u003d getInstructorComments(response.getId(), \"Comment to first response, published session\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, frcList.size());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        frc \u003d frcList.get(0);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FeedbackParticipantType.INSTRUCTORS, frc.commentGiverType);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"instructor1@course1.tmt\", frc.commentGiver);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(frc.isCommentFromFeedbackParticipant);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(frc.isVisibilityFollowingFeedbackQuestion);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"Unsuccessful case: empty comment text\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_ID, response.getId(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d new FeedbackResponseCommentUpdateRequest(\"\", null, null);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonResult result \u003d getJsonResult(action);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        MessageOutput output \u003d (MessageOutput) result.getOutput();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(HttpStatus.SC_BAD_REQUEST, result.getStatusCode());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Const.StatusMessages.FEEDBACK_RESPONSE_COMMENT_EMPTY, output.getMessage());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void testAccessControl() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        int questionNumber \u003d 1;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackSessionAttributes fs \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackQuestionAttributes question \u003d logic.getFeedbackQuestion("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                fs.getFeedbackSessionName(), fs.getCourseId(), questionNumber);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        String giverEmail \u003d \"student1InCourse1@gmail.tmt\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        String receiverEmail \u003d \"student1InCourse1@gmail.tmt\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackResponseAttributes response \u003d logic.getFeedbackResponse(question.getId(),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                giverEmail, receiverEmail);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackResponseCommentAttributes comment \u003d FeedbackResponseCommentAttributes"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                .builder()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                .withCourseId(fs.getCourseId())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                .withFeedbackSessionName(fs.getFeedbackSessionName())"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                .withCommentGiver(giverEmail)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                .withCommentText(\"\")"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                .withFeedbackQuestionId(question.getId())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                .withFeedbackResponseId(response.getId())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_ID, comment.feedbackResponseId,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyInaccessibleWithoutSubmitSessionInSectionsPrivilege(submissionParams);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyInaccessibleWithoutLogin(submissionParams);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyInaccessibleForUnregisteredUsers(submissionParams);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyInaccessibleForStudents(submissionParams);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyAccessibleForInstructorsOfTheSameCourse(submissionParams);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyAccessibleForAdminToMasqueradeAsInstructor(submissionParams);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Filters instructor comments according to comment text from all comments on a response."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param responseId response id of response"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commentText comment text"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return instructor comments"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cFeedbackResponseCommentAttributes\u003e getInstructorComments(String responseId, String commentText) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackResponseCommentsDb frcDb \u003d new FeedbackResponseCommentsDb();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        return frcDb.getFeedbackResponseCommentsForResponse(responseId)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(comment -\u003e comment.commentText.equals(commentText))"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 232
    }
  },
  {
    "path": "src/test/java/teammates/test/cases/webapi/DeleteFeedbackSessionActionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package teammates.test.cases.webapi;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testng.annotations.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import teammates.common.datatransfer.attributes.CourseAttributes;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.util.Const;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.ui.webapi.action.DeleteFeedbackSessionAction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import teammates.ui.webapi.action.JsonResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import teammates.ui.webapi.output.MessageOutput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * SUT: {@link DeleteFeedbackSessionAction}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteFeedbackSessionActionTest extends BaseActionTest\u003cDeleteFeedbackSessionAction\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String getActionUri() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return Const.ResourceURIs.SESSION;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String getRequestMethod() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return DELETE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void testExecute() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // see test cases below"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void testDeleteFeedbackSessionAction_invalidParameters_shouldThrowHttpParameterException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        CourseAttributes course \u003d typicalBundle.courses.get(\"typicalCourse1\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        FeedbackSessionAttributes session \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        ______TS(\"No course ID\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        String[] noCourseIdParams \u003d new String[] {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                Const.ParamsNames.FEEDBACK_SESSION_NAME, session.getFeedbackSessionName(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        verifyHttpParameterFailure(noCourseIdParams);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        ______TS(\"No session name\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        String[] noSessionname \u003d new String[] {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                Const.ParamsNames.COURSE_ID, course.getId(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        verifyHttpParameterFailure(noSessionname);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        ______TS(\"Empty parameters\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        verifyHttpParameterFailure();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void testDeleteFeedbackSessionAction_typicalCase_shouldPass() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        ______TS(\"Delete session that has been soft deleted\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        CourseAttributes course \u003d typicalBundle.courses.get(\"typicalCourse1\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        FeedbackSessionAttributes session \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        String[] params \u003d new String[] {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                Const.ParamsNames.COURSE_ID, course.getId(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                Const.ParamsNames.FEEDBACK_SESSION_NAME, session.getFeedbackSessionName(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        };"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNotNull(logic.getFeedbackSession(session.getFeedbackSessionName(), course.getId()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        logic.moveFeedbackSessionToRecycleBin(session.getFeedbackSessionName(), course.getId());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNotNull(logic.getFeedbackSessionFromRecycleBin(session.getFeedbackSessionName(), course.getId()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        DeleteFeedbackSessionAction deleteFeedbackSessionAction \u003d getAction(params);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        JsonResult result \u003d getJsonResult(deleteFeedbackSessionAction);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MessageOutput messageOutput \u003d (MessageOutput) result.getOutput();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(messageOutput.getMessage(), \"The feedback session is deleted.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNull(logic.getFeedbackSessionFromRecycleBin(session.getFeedbackSessionName(), course.getId()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNull(logic.getFeedbackSession(session.getFeedbackSessionName(), course.getId()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        ______TS(\"Delete session not in recycle bin\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        FeedbackSessionAttributes session2 \u003d typicalBundle.feedbackSessions.get(\"session2InCourse1\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        params \u003d new String[] {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                Const.ParamsNames.COURSE_ID, course.getId(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                Const.ParamsNames.FEEDBACK_SESSION_NAME, session2.getFeedbackSessionName(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        };"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNull(logic.getFeedbackSessionFromRecycleBin(session2.getFeedbackSessionName(), course.getId()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNotNull(logic.getFeedbackSession(session2.getFeedbackSessionName(), course.getId()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        deleteFeedbackSessionAction \u003d getAction(params);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        result \u003d getJsonResult(deleteFeedbackSessionAction);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        messageOutput \u003d (MessageOutput) result.getOutput();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(messageOutput.getMessage(), \"The feedback session is deleted.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNull(logic.getFeedbackSessionFromRecycleBin(session2.getFeedbackSessionName(), course.getId()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNull(logic.getFeedbackSession(session2.getFeedbackSessionName(), course.getId()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void testDeleteFeedbackSession_failureCases_shouldFailSilently() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        CourseAttributes course \u003d typicalBundle.courses.get(\"typicalCourse1\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        FeedbackSessionAttributes session \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        ______TS(\"Delete session that has already been deleted\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        String[] params \u003d new String[] {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                Const.ParamsNames.COURSE_ID, course.getId(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                Const.ParamsNames.FEEDBACK_SESSION_NAME, session.getFeedbackSessionName(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        };"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNotNull(logic.getFeedbackSession(session.getFeedbackSessionName(), course.getId()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        DeleteFeedbackSessionAction deleteFeedbackSessionAction \u003d getAction(params);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // Delete once"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        getJsonResult(deleteFeedbackSessionAction);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNull(logic.getFeedbackSession(session.getFeedbackSessionName(), course.getId()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // Delete again"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // Will fail silently and not throw any exception"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        getJsonResult(deleteFeedbackSessionAction);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNull(logic.getFeedbackSession(session.getFeedbackSessionName(), course.getId()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        ______TS(\"Delete session that does not exist\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        params \u003d new String[] {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                Const.ParamsNames.COURSE_ID, course.getId(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                Const.ParamsNames.FEEDBACK_SESSION_NAME, \"randomName\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        };"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNull(logic.getFeedbackSession(\"randomName\", course.getId()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        deleteFeedbackSessionAction \u003d getAction(params);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // Will fail silently and not throw any exception"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        getJsonResult(deleteFeedbackSessionAction);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNull(logic.getFeedbackSession(session.getFeedbackSessionName(), course.getId()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void testAccessControl() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        CourseAttributes course \u003d typicalBundle.courses.get(\"typicalCourse1\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        FeedbackSessionAttributes session \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        String[] submissionParams \u003d {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                Const.ParamsNames.COURSE_ID, course.getId(),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                Const.ParamsNames.FEEDBACK_SESSION_NAME, session.getFeedbackSessionName(),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        };"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        logic.moveFeedbackSessionToRecycleBin(session.getFeedbackSessionName(), course.getId());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        verifyOnlyInstructorsOfTheSameCourseCanAccess(submissionParams);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        verifyInaccessibleWithoutModifyCoursePrivilege(submissionParams);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 123,
      "-": 32
    }
  },
  {
    "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseCommentActionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package teammates.test.cases.webapi;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.apache.http.HttpStatus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testng.annotations.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.FeedbackParticipantType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.datatransfer.attributes.InstructorAttributes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.exception.EntityNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.common.util.Const;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.logic.core.FeedbackSessionsLogic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.ui.webapi.action.JsonResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.ui.webapi.action.UpdateFeedbackResponseCommentAction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.ui.webapi.output.MessageOutput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import teammates.ui.webapi.request.FeedbackResponseCommentUpdateRequest;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * SUT: {@link UpdateFeedbackResponseCommentAction}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UpdateFeedbackResponseCommentActionTest extends BaseActionTest\u003cUpdateFeedbackResponseCommentAction\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String getActionUri() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return Const.ResourceURIs.RESPONSE_COMMENT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String getRequestMethod() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return PUT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testExecute() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        int questionNumber \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackQuestionAttributes feedbackQuestion \u003d logic.getFeedbackQuestion("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \"First feedback session\", \"idOfTypicalCourse1\", questionNumber);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String giverEmail \u003d \"student1InCourse1@gmail.tmt\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String receiverEmail \u003d \"student1InCourse1@gmail.tmt\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackResponseAttributes feedbackResponse \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                logic.getFeedbackResponse(feedbackQuestion.getId(), giverEmail, receiverEmail);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackResponseCommentAttributes feedbackResponseComment \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                typicalBundle.feedbackResponseComments.get(\"comment1FromT1C1ToR1Q1S1C1\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        feedbackResponseComment \u003d logic.getFeedbackResponseComment(feedbackResponse.getId(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                feedbackResponseComment.commentGiver, feedbackResponseComment.createdAt);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(\"response comment not found\", feedbackResponseComment);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        InstructorAttributes instructor \u003d typicalBundle.instructors.get(\"instructor1OfCourse1\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        gaeSimulation.loginAsInstructor(instructor.googleId);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"Unsuccessful csae: not enough parameters\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyHttpParameterFailure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"Typical successful case for unpublished session\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID, feedbackResponseComment.getId().toString(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackResponseCommentUpdateRequest requestBody \u003d new FeedbackResponseCommentUpdateRequest("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                feedbackResponseComment.commentText + \" (Edited)\", \"GIVER,INSTRUCTORS\", \"GIVER,INSTRUCTORS\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateFeedbackResponseCommentAction action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getJsonResult(action);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackResponseCommentAttributes frc \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                logic.getFeedbackResponseComment(feedbackResponseComment.getId());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(feedbackResponseComment.commentText + \" (Edited)\", frc.commentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FeedbackParticipantType.INSTRUCTORS, frc.commentGiverType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"instructor1@course1.tmt\", frc.commentGiver);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(frc.isCommentFromFeedbackParticipant);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"Null show comments and show giver permissions\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID, feedbackResponseComment.getId().toString(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                new FeedbackResponseCommentUpdateRequest(feedbackResponseComment.commentText + \" (Edited)\", null, null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        getJsonResult(action);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"Empty show comments and show giver permissions\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID, feedbackResponseComment.getId().toString(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d new FeedbackResponseCommentUpdateRequest(feedbackResponseComment.commentText + \" (Edited)\", \"\", \"\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getJsonResult(action);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"Typical successful case for unpublished session public to various recipients\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID, feedbackResponseComment.getId().toString(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d new FeedbackResponseCommentUpdateRequest(feedbackResponseComment.commentText + \" (Edited)\", \"\", null);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        getJsonResult(action);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID, feedbackResponseComment.getId().toString(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d new FeedbackResponseCommentUpdateRequest("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                feedbackResponseComment.commentText + \" (Edited)\", \"GIVER\", null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getJsonResult(action);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID, feedbackResponseComment.getId().toString(),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d new FeedbackResponseCommentUpdateRequest("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                feedbackResponseComment.commentText + \" (Edited)\", \"RECEIVER\", null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        getJsonResult(action);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID, feedbackResponseComment.getId().toString(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d new FeedbackResponseCommentUpdateRequest("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                feedbackResponseComment.commentText + \" (Edited)\", \"OWN_TEAM_MEMBERS\", null);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        getJsonResult(action);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID, feedbackResponseComment.getId().toString(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d new FeedbackResponseCommentUpdateRequest("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                feedbackResponseComment.commentText + \" (Edited)\", \"RECEIVER_TEAM_MEMBERS\", null);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        getJsonResult(action);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID, feedbackResponseComment.getId().toString(),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d new FeedbackResponseCommentUpdateRequest("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                feedbackResponseComment.commentText + \" (Edited)\", \"STUDENTS\", null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        getJsonResult(action);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"Non-existent feedback response comment id\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID, \"123123123123123\","
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d new FeedbackResponseCommentUpdateRequest("
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                feedbackResponseComment.commentText + \" (Edited)\", \"GIVER,INSTRUCTORS\", \"GIVER,INSTRUCTORS\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateFeedbackResponseCommentAction action0 \u003d action;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(EntityNotFoundException.class, () -\u003e getJsonResult(action0));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"Instructor is not feedback response comment giver\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        gaeSimulation.loginAsInstructor(\"idOfInstructor2OfCourse1\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID, feedbackResponseComment.getId().toString(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d new FeedbackResponseCommentUpdateRequest("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                feedbackResponseComment.commentText + \" (Edited)\", \"GIVER,INSTRUCTORS\", \"GIVER,INSTRUCTORS\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        getJsonResult(action);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        frc \u003d logic.getFeedbackResponseComment(feedbackResponseComment.getId());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(feedbackResponseComment.commentText + \" (Edited)\", frc.commentText);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FeedbackParticipantType.INSTRUCTORS, frc.commentGiverType);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"instructor1@course1.tmt\", frc.commentGiver);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"instructor2@course1.tmt\", frc.lastEditorEmail);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(frc.isCommentFromFeedbackParticipant);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"Typical successful case for published session\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        gaeSimulation.loginAsInstructor(instructor.googleId);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        FeedbackSessionsLogic.inst().publishFeedbackSession("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                feedbackResponseComment.feedbackSessionName, feedbackResponseComment.courseId);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID, feedbackResponseComment.getId().toString(),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d new FeedbackResponseCommentUpdateRequest("
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                feedbackResponseComment.commentText + \" (Edited for published session)\", \"GIVER,INSTRUCTORS\", null);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        getJsonResult(action);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        frc \u003d logic.getFeedbackResponseComment(feedbackResponseComment.getId());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(feedbackResponseComment.commentText + \" (Edited for published session)\","
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                frc.commentText);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FeedbackParticipantType.INSTRUCTORS, frc.commentGiverType);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"instructor1@course1.tmt\", frc.commentGiver);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(frc.isCommentFromFeedbackParticipant);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        ______TS(\"Unsuccessful case: empty comment text\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID, feedbackResponseComment.getId().toString(),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        requestBody \u003d new FeedbackResponseCommentUpdateRequest("
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                \"\", null, null);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        action \u003d getAction(requestBody, submissionParams);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonResult result \u003d getJsonResult(action);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        MessageOutput output \u003d (MessageOutput) result.getOutput();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(HttpStatus.SC_BAD_REQUEST, result.getStatusCode());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Const.StatusMessages.FEEDBACK_RESPONSE_COMMENT_EMPTY, output.getMessage());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void testAccessControl() throws Exception {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        int questionNumber \u003d 1;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackQuestionAttributes feedbackQuestion \u003d logic.getFeedbackQuestion("
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                \"First feedback session\", \"idOfTypicalCourse1\", questionNumber);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        String giverEmail \u003d \"student1InCourse1@gmail.tmt\";"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        String receiverEmail \u003d \"student1InCourse1@gmail.tmt\";"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackResponseAttributes feedbackResponse \u003d logic.getFeedbackResponse(feedbackQuestion.getId(),"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                giverEmail, receiverEmail);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        FeedbackResponseCommentAttributes feedbackResponseComment \u003d typicalBundle.feedbackResponseComments"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                .get(\"comment1FromT1C1ToR1Q1S1C1\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        feedbackResponseComment \u003d logic.getFeedbackResponseComment(feedbackResponse.getId(),"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                feedbackResponseComment.commentGiver, feedbackResponseComment.createdAt);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] submissionParams \u003d new String[] {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID, feedbackResponseComment.getId().toString(),"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        // this person is not the giver. so not accessible"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyInaccessibleWithoutModifySessionCommentInSectionsPrivilege(submissionParams);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyOnlyInstructorsCanAccess(submissionParams);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "-": 248
    }
  },
  {
    "path": "src/web/app/components/question-types/question-edit-answer-form/contribution-question-edit-answer-form.component.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"row\"\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv class\u003d\"col-5\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cselect class\u003d\"form-control\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            [ngClass]\u003d\"{\u0027color-positive\u0027: responseDetails.answer \u003e 100,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "              \u0027color-negative\u0027: responseDetails.answer \u003c 100 \u0026\u0026 responseDetails.answer !\u003d\u003d CONTRIBUTION_POINT_NOT_SURE \u0026\u0026 responseDetails.answer !\u003d\u003d CONTRIBUTION_POINT_NOT_SUBMITTED,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "              \u0027color-neutral\u0027: responseDetails.answer \u003d\u003d\u003d 100 || responseDetails.answer \u003d\u003d\u003d CONTRIBUTION_POINT_NOT_SURE}\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "            [ngModel]\u003d\"responseDetails.answer\" (ngModelChange)\u003d\"triggerResponseDetailsChange(\u0027answer\u0027, $event)\" [disabled]\u003d\"isDisabled\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003coption [ngValue]\u003d\"CONTRIBUTION_POINT_NOT_SUBMITTED\"\u003e\u003c/option\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "      \u003coption *ngFor\u003d\"let point of contributionQuestionPoints\" [ngValue]\u003d\"point\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "              [ngClass]\u003d\"{\u0027color-positive\u0027: point \u003e 100,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0027color-negative\u0027: point \u003c 100,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0027color-neutral\u0027: point \u003d\u003d\u003d 100}\"\u003e{{ point | contributionPointDescription }}\u003c/option\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "      \u003coption *ngIf\u003d\"questionDetails.isNotSureAllowed\" [ngValue]\u003d\"CONTRIBUTION_POINT_NOT_SURE\" class\u003d\"color-neutral\"\u003eNot Sure\u003c/option\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/select\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv class\u003d\"col-7\" *ngIf\u003d\"shouldShowHelpLink\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cbutton type\u003d\"button\" class\u003d\"btn btn-link\" (click)\u003d\"openModal(helpModal)\"\u003e\u003ci class\u003d\"fas fa-exclamation-circle\"\u003e\u003c/i\u003e More info about the \u003ccode\u003eEqual Share\u003c/code\u003e scale\u003c/button\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cng-template #helpModal let-modal\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cdiv class\u003d\"modal-header\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003ch5 class\u003d\"modal-title\"\u003eMore info about the \u003ccode\u003eEqual Share\u003c/code\u003e scale\u003c/h5\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cbutton type\u003d\"button\" class\u003d\"close\" (click)\u003d\"modal.dismiss()\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ci class\u003d\"fas fa-times\"\u003e\u003c/i\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/button\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cdiv class\u003d\"modal-body\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cp\u003e\u003ccode\u003eEqual share\u003c/code\u003e is a relative measure of individual contribution to a team task.\u003c/p\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cp\u003eFor example, in a 3-person team, \u003ccode\u003eEqual share\u003c/code\u003e means a third of the work done.\u003c/p\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cp\u003e\u003ccode\u003eEqual share + 10%\u003c/code\u003e means the person did about 10% \u003cem\u003emore\u003c/em\u003e than an equal share, \u003ccode\u003eEqual share - 10%\u003c/code\u003e means about 10% \u003cem\u003eless\u003c/em\u003e than an equal share, and so on.\u003c/p\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cdiv class\u003d\"modal-footer\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cbutton type\u003d\"button\" class\u003d\"btn btn-primary\" (click)\u003d\"modal.close()\"\u003eOK\u003c/button\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/ng-template\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 5,
      "-": 30
    }
  },
  {
    "path": "src/web/app/pages-instructor/instructor-courses-page/instructor-courses-page.component.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"course-section\"\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ctm-add-course-form (courseAdded)\u003d\"loadInstructorCourses()\"\u003e\u003c/tm-add-course-form\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"course-section\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ch2\u003eActive Courses\u003c/h2\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv class\u003d\"table-responsive\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctable class\u003d\"table table-striped table-bordered margin-0\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cthead\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctr class\u003d\"bg-primary text-white\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "          \u003cth class\u003d\"sortable-header\" (click)\u003d\"sortCoursesEvent(SortBy.COURSE_ID)\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            Course ID"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            \u003cspan *ngIf\u003d\"tableSortBy !\u003d\u003d SortBy.COURSE_ID\"\u003e\u003ci class\u003d\"fas fa-sort\"\u003e\u003c/i\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            \u003cspan *ngIf\u003d\"tableSortBy \u003d\u003d\u003d SortBy.COURSE_ID \u0026\u0026 tableSortOrder \u003d\u003d\u003d SortOrder.DESC\"\u003e\u003ci class\u003d\"fas fa-sort-down\"\u003e\u003c/i\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            \u003cspan *ngIf\u003d\"tableSortBy \u003d\u003d\u003d SortBy.COURSE_ID \u0026\u0026 tableSortOrder \u003d\u003d\u003d SortOrder.ASC\"\u003e\u003ci class\u003d\"fas fa-sort-up\"\u003e\u003c/i\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "          \u003c/th\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "          \u003cth class\u003d\"sortable-header\" (click)\u003d\"sortCoursesEvent(SortBy.COURSE_NAME)\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            Course Name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            \u003cspan *ngIf\u003d\"tableSortBy !\u003d\u003d SortBy.COURSE_NAME\"\u003e\u003ci class\u003d\"fas fa-sort\"\u003e\u003c/i\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            \u003cspan *ngIf\u003d\"tableSortBy \u003d\u003d\u003d SortBy.COURSE_NAME \u0026\u0026 tableSortOrder \u003d\u003d\u003d SortOrder.DESC\"\u003e\u003ci class\u003d\"fas fa-sort-down\"\u003e\u003c/i\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            \u003cspan *ngIf\u003d\"tableSortBy \u003d\u003d\u003d SortBy.COURSE_NAME \u0026\u0026 tableSortOrder \u003d\u003d\u003d SortOrder.ASC\"\u003e\u003ci class\u003d\"fas fa-sort-up\"\u003e\u003c/i\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "          \u003c/th\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "          \u003cth class\u003d\"sortable-header\" (click)\u003d\"sortCoursesEvent(SortBy.CREATION_DATE)\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            Creation Date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            \u003cspan *ngIf\u003d\"tableSortBy !\u003d\u003d SortBy.CREATION_DATE\"\u003e\u003ci class\u003d\"fas fa-sort\"\u003e\u003c/i\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            \u003cspan *ngIf\u003d\"tableSortBy \u003d\u003d\u003d SortBy.CREATION_DATE \u0026\u0026 tableSortOrder \u003d\u003d\u003d SortOrder.DESC\"\u003e\u003ci class\u003d\"fas fa-sort-down\"\u003e\u003c/i\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            \u003cspan *ngIf\u003d\"tableSortBy \u003d\u003d\u003d SortBy.CREATION_DATE \u0026\u0026 tableSortOrder \u003d\u003d\u003d SortOrder.ASC\"\u003e\u003ci class\u003d\"fas fa-sort-up\"\u003e\u003c/i\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "          \u003c/th\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cth\u003eSections\u003c/th\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cth\u003eTeams\u003c/th\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cth\u003eTotal Students\u003c/th\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cth\u003eTotal Unregistered\u003c/th\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cth class\u003d\"text-center\"\u003eAction(s)\u003c/th\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/thead\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003ctbody\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctr *ngFor\u003d\"let course of activeCourses\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003ctd\u003e{{course.id}}\u003c/td\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003ctd\u003e{{course.name}}\u003c/td\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003ctd container\u003d\"body\" [ngbTooltip]\u003d\"course.createdAt | date:\u0027EEE, dd MMM yyyy, h:mma\u0027\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            {{course.createdAt | date:\u0027d MMM yyyy\u0027}}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/td\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003ctd\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cspan *ngIf\u003d\"!courseStats[course.id]\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003ca (click)\u003d\"getCourseStats(course.id)\" [routerLink]\u003d\"\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                show"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/a\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/span\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cspan *ngIf\u003d\"courseStats[course.id]\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "              {{ courseStats[course.id].sections }}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/span\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/td\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003ctd\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cspan *ngIf\u003d\"!courseStats[course.id]\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003ca (click)\u003d\"getCourseStats(course.id)\" [routerLink]\u003d\"\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                show"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/a\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/span\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cspan *ngIf\u003d\"courseStats[course.id]\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "              {{ courseStats[course.id].teams }}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/span\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/td\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003ctd\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cspan *ngIf\u003d\"!courseStats[course.id]\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003ca (click)\u003d\"getCourseStats(course.id)\" [routerLink]\u003d\"\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                show"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/a\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/span\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cspan *ngIf\u003d\"courseStats[course.id]\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "              {{ courseStats[course.id].students }}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/span\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/td\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003ctd\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cspan *ngIf\u003d\"!courseStats[course.id]\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003ca (click)\u003d\"getCourseStats(course.id)\" [routerLink]\u003d\"\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                show"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/a\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/span\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cspan *ngIf\u003d\"courseStats[course.id]\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "              {{ courseStats[course.id].unregistered }}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/span\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/td\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003ctd class\u003d\"text-center actions-cell\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cbutton class\u003d\"btn btn-light btn-sm\" *ngIf\u003d\"course.canModifyStudent\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                ngbTooltip\u003d\"Enroll student into the course\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                routerLink\u003d\"/web/instructor/courses/enroll\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                [queryParams]\u003d\"{courseid: course.id}\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "              Enroll"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/button\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cbutton class\u003d\"btn btn-light btn-sm disabled\" *ngIf\u003d\"!course.canModifyStudent\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "              Enroll"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/button\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cbutton class\u003d\"btn btn-light btn-sm\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                ngbTooltip\u003d\"View, edit and send invitation emails to the students in the course\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                routerLink\u003d\"/web/instructor/courses/details\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                [queryParams]\u003d\"{courseid: course.id}\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "              View"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/button\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cbutton class\u003d\"btn btn-light btn-sm\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                ngbTooltip\u003d\"Edit Course information and instructor list\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                routerLink\u003d\"/web/instructor/courses/edit\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                [queryParams]\u003d\"{courseid: course.id}\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "              Edit"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/button\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cbutton class\u003d\"btn btn-light btn-sm\" (click)\u003d\"changeArchiveStatus(course.id, true)\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                ngbTooltip\u003d\"Archive the course so that it will not be shown in the home page any more (you can still"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                access it from the \u0027Courses\u0027 tab)\"\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "              Archive"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/button\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cbutton class\u003d\"btn btn-light btn-sm\" *ngIf\u003d\"course.canModifyCourse\" (click)\u003d\"onDelete(course.id)\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                ngbTooltip\u003d\"Delete the course and its corresponding students and sessions\"\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "              Delete"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/button\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cbutton class\u003d\"btn btn-light btn-sm disabled\" *ngIf\u003d\"!course.canModifyCourse\"\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "              Delete"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/button\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/td\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/tbody\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003ctr *ngIf\u003d\"!activeCourses.length\"\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctd\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctd\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctd\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctd\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctd\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctd\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctd\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctd\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/tr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/table\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cp *ngIf\u003d\"!activeCourses.length\"\u003eNo records found.\u003c/p\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"course-section\" *ngIf\u003d\"archivedCourses.length\"\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ch2 class\u003d\"text-muted\"\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cspan class\u003d\"fa fa-file-archive\"\u003e\u003c/span\u003e Archived Courses"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/h2\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv class\u003d\"table-responsive\"\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctable class\u003d\"table table-striped table-bordered margin-0\"\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cthead\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctr class\u003d\"bg-info text-white\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cth\u003eCourse ID\u003c/th\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cth\u003eCourse Name\u003c/th\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cth\u003eCreation Date\u003c/th\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cth class\u003d\"text-center\"\u003eAction(s)\u003c/th\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/thead\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003ctbody\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctr *ngFor\u003d\"let course of archivedCourses\"\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003ctd\u003e{{course.id}}\u003c/td\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003ctd\u003e{{course.name}}\u003c/td\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003ctd container\u003d\"body\" ngbTooltip\u003d\"{{course.createdAt | date:\u0027EEE, dd MMM yyyy, h:mma\u0027}}\"\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            {{course.createdAt | date:\u0027d MMM yyyy\u0027}}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/td\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003ctd class\u003d\"text-center\"\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cbutton class\u003d\"btn btn-light btn-sm\" (click)\u003d\"changeArchiveStatus(course.id, false)\"\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "              Unarchive"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/button\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cbutton class\u003d\"btn btn-light btn-sm\" *ngIf\u003d\"course.canModifyCourse\" (click)\u003d\"onDelete(course.id)\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                ngbTooltip\u003d\"Delete the course and its corresponding students and sessions\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "              Delete"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/button\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cbutton class\u003d\"btn btn-light btn-sm disabled\" *ngIf\u003d\"!course.canModifyCourse\"\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "              Delete"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/button\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/td\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/tbody\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/table\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"row course-section margin-top-30px\" *ngIf\u003d\"softDeletedCourses.length\"\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv class\u003d\"col-12\"\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003ch2 class\u003d\"text-muted\"\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cspan class\u003d\"fa fa-trash-alt\"\u003e\u003c/span\u003e Deleted Courses"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/h2\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cdiv class\u003d\"card bg-light top-padded\"\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cdiv class\u003d\"card-header bg-secondary recycle-bin-header\" (click)\u003d\"isRecycleBinExpanded \u003d !isRecycleBinExpanded\"\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cdiv class\u003d\"row align-items-center\"\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cdiv class\u003d\"col-6 text-white\"\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cb\u003eRecycle Bin\u003c/b\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/div\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cdiv class\u003d\"col-6 text-right bin-header-button\"\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cbutton class\u003d\"btn btn-light btn-sm\" *ngIf\u003d\"canRestoreAll\" (click)\u003d\"$event.stopPropagation(); onRestoreAll()\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                    ngbTooltip\u003d\"Restore all deleted courses and their corresponding students and sessions\"\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003ci class\u003d\"fas fa-check\"\u003e\u003c/i\u003e Restore All"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/button\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cbutton class\u003d\"btn btn-light btn-sm disabled\" *ngIf\u003d\"!canRestoreAll\"\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003ci class\u003d\"fas fa-check\"\u003e\u003c/i\u003e Restore All"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/button\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cbutton class\u003d\"btn btn-light btn-sm text-danger\" *ngIf\u003d\"canDeleteAll\" (click)\u003d\"$event.stopPropagation(); onDeleteAll()\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                    ngbTooltip\u003d\"Permanently delete all courses and their corresponding students and sessions\"\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003ci class\u003d\"fas fa-times\"\u003e\u003c/i\u003e Delete All"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/button\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cbutton class\u003d\"btn btn-light btn-sm disabled text-danger\" *ngIf\u003d\"!canDeleteAll\"\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003ci class\u003d\"fas fa-times\"\u003e\u003c/i\u003e Delete All"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/button\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003ci class\u003d\"fas fa-chevron-down text-white\" *ngIf\u003d\"!isRecycleBinExpanded\"\u003e\u003c/i\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003ci class\u003d\"fas fa-chevron-up text-white\" *ngIf\u003d\"isRecycleBinExpanded\"\u003e\u003c/i\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/div\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/div\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cdiv class\u003d\"card-body recycle-bin-body\" *ngIf\u003d\"isRecycleBinExpanded\"\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctable class\u003d\"table table-responsive-lg table-striped table-bordered recycle-bin-table\"\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cthead\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003ctr class\u003d\"background-color-medium-gray text-color-gray\"\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cth\u003eCourse ID\u003c/th\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cth\u003eCourse Name\u003c/th\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cth\u003eCreation Date\u003c/th\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cth\u003eDeletion Date\u003c/th\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cth class\u003d\"text-center\"\u003eAction(s)\u003c/th\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/tr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/thead\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003ctbody\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003ctr *ngFor\u003d\"let course of softDeletedCourses\"\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003ctd\u003e{{course.id}}\u003c/td\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003ctd\u003e{{course.name}}\u003c/td\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003ctd container\u003d\"body\" [ngbTooltip]\u003d\"course.createdAt | date:\u0027EEE, dd MMM yyyy, h:mma\u0027\"\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                {{course.createdAt | date:\u0027d MMM yyyy\u0027}}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/td\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003ctd container\u003d\"body\" [ngbTooltip]\u003d\"course.deletedAt | date:\u0027EEE, dd MMM yyyy, h:mma\u0027\"\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                {{course.deletedAt | date:\u0027d MMM yyyy\u0027}}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/td\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003ctd class\u003d\"text-center actions-cell\"\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cbutton class\u003d\"btn btn-light btn-sm\" *ngIf\u003d\"course.canModifyCourse\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                        (click)\u003d\"onRestore(course.id)\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                        ngbTooltip\u003d\"Restore the deleted course and its corresponding students and sessions\"\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                  Restore"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/button\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cbutton class\u003d\"btn btn-light btn-sm disabled\" *ngIf\u003d\"!course.canModifyCourse\"\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                  Restore"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/button\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cbutton class\u003d\"btn btn-light btn-sm\" *ngIf\u003d\"course.canModifyCourse\" style\u003d\"color: red\""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                        (click)\u003d\"onDeletePermanently(course.id)\""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                        ngbTooltip\u003d\"Permanently delete the course and its corresponding students and sessions\"\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                  Delete Permanently"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/button\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cbutton class\u003d\"btn btn-light btn-sm disabled\" *ngIf\u003d\"!course.canModifyCourse\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                        style\u003d\"color: red\"\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                  Delete Permanently"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/button\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/td\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/tr\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/tbody\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/table\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/div\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 18,
      "-": 233
    }
  },
  {
    "path": "src/web/app/pages-instructor/instructor-home-page/instructor-home-page.component.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ch1\u003eHome\u003c/h1\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"card bg-light mb-4\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv class\u003d\"card-body\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cdiv class\u003d\"form-group\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cdiv class\u003d\"input-group\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cinput type\u003d\"text\" class\u003d\"form-control\" [(ngModel)]\u003d\"studentSearchkey\" (keyup.enter)\u003d\"search()\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "               placeholder\u003d\"e.g. Charles Shultz, charles@gmail.com\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cdiv class\u003d\"input-group-append\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cbutton class\u003d\"btn btn-primary\" (click)\u003d\"search()\"\u003eSearch\u003c/button\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/div\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cng-template #noCourseMessage class\u003d\"bg-light-blue\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  New to TEAMMATES? You may wish to have a look at our \u003ca routerLink\u003d\"/web/front/help/instructor\"\u003eGetting Started Guide\u003c/a\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  A video tour is also available in our \u003ca routerLink\u003d\"/web\"\u003ehome page\u003c/a\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/ng-template\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"row height-60px\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv class\u003d\"col-4\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ca routerLink\u003d\"/web/instructor/courses\" class\u003d\"btn btn-primary text-white\"\u003eAdd New Course\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv class\u003d\"col-8\" *ngIf\u003d\"courseTabModels.length \u003e 0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cdiv class\u003d\"float-right\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003ch5 class\u003d\"d-inline\"\u003e\u003cstrong\u003e Sort By: \u003c/strong\u003e\u003c/h5\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cdiv class\u003d\"btn-group\" data-toggle\u003d\"buttons\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cbutton class\u003d\"btn btn-light\" [disabled]\u003d\"isSelectedForSorting(SortBy.COURSE_ID)\" (click)\u003d\"sortCoursesBy(SortBy.COURSE_ID)\"\u003eCourse ID\u003c/button\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cbutton class\u003d\"btn btn-light\" [disabled]\u003d\"isSelectedForSorting(SortBy.COURSE_NAME)\" (click)\u003d\"sortCoursesBy(SortBy.COURSE_NAME)\"\u003eCourse Name\u003c/button\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cbutton class\u003d\"btn btn-light\" [disabled]\u003d\"isSelectedForSorting(SortBy.COURSE_CREATION_DATE)\" (click)\u003d\"sortCoursesBy(SortBy.COURSE_CREATION_DATE)\"\u003eCreation Date\u003c/button\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/div\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv *ngIf\u003d\"courseTabModels.length \u003e 0; else noCourseMessage\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv class\u003d\"card margin-bottom-15px\" *ngFor\u003d\"let courseTabModel of courseTabModels; let idx \u003d index\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cdiv class\u003d\"card-header bg-primary text-white course-tab-header\" (click)\u003d\"courseTabModel.isTabExpanded \u003d handleClick($event, courseTabModel); this.loadFeedbackSessions(courseTabModel);\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cdiv class\u003d\"row\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cdiv class\u003d\"col-6\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cb\u003e[{{ courseTabModel.course.courseId }}]: {{ courseTabModel.course.courseName }}\u003c/b\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cdiv class\u003d\"col-sm-6\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cdiv class\u003d\"float-right\" *ngIf\u003d\"courseTabModel.isAjaxSuccess; else errorLoadingFeedbackSessions\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cspan ngbDropdown class\u003d\"padding-right-10px\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "              \u003cbutton class\u003d\"btn btn-light btn-sm\" ngbDropdownToggle\u003e Students \u003c/button\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cdiv ngbDropdownMenu\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cng-container *ngIf\u003d\"courseTabModel.instructorPrivilege.canModifyStudent\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003ca class\u003d\"btn btn-info btn-sm dropdown-item\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                     ngbTooltip\u003d\"Enroll student into the course\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                     routerLink\u003d\"/web/instructor/courses/enroll\" [queryParams]\u003d\"{courseid: courseTabModel.course.courseId}\"\u003e Enroll"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/a\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/ng-container\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003ca class\u003d\"btn btn-info btn-sm dropdown-item\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                   ngbTooltip\u003d\"View, edit and send invitation emails to the students in the course\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                   routerLink\u003d\"/web/instructor/courses/details\" [queryParams]\u003d\"{courseid: courseTabModel.course.courseId}\"\u003e View / Edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/a\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/div\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/span\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cspan ngbDropdown class\u003d\"padding-right-10px\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "              \u003cbutton class\u003d\"btn btn-light btn-sm\" ngbDropdownToggle\u003e Instructors \u003c/button\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cdiv ngbDropdownMenu \u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003ca class\u003d\"btn btn-light btn-sm dropdown-item\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                   ngbTooltip\u003d\"Edit course information and instructor list\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                   routerLink\u003d\u0027/web/instructor/courses/edit\u0027 [queryParams]\u003d\"{courseid: courseTabModel.course.courseId}\"\u003e View / Edit"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/a\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/div\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/span\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cspan ngbDropdown class\u003d\"padding-right-10px\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "              \u003cbutton class\u003d\"btn btn-light btn-sm\" ngbDropdownToggle\u003e Sessions \u003c/button\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cdiv ngbDropdownMenu\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003ca class\u003d\"btn btn-light btn-sm dropdown-item\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                   ngbTooltip\u003d\"Add a feedback session for the course\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                   routerLink\u003d\u0027/web/instructor/sessions\u0027 [queryParams]\u003d\"{courseid: courseTabModel.course.courseId}\"\u003e Add"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/a\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/div\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/span\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cspan ngbDropdown class\u003d\"padding-right-10px\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "              \u003cbutton class\u003d\"btn btn-light btn-sm\" ngbDropdownToggle\u003e Course \u003c/button\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cdiv ngbDropdownMenu\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003ca class\u003d\"btn btn-light btn-sm dropdown-item\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                   ngbTooltip\u003d\"Archive the course so that it will not be shown in the home page any more (you can still access it from the \u0027Courses\u0027 tab)\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                   (click)\u003d\"openModal(courseArchiveModal); $event.stopPropagation()\"\u003e Archive"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/a\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003ca class\u003d\"btn btn-light btn-sm dropdown-item\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                   ngbTooltip\u003d\"Edit course information and instructor list\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                   routerLink\u003d\u0027/web/instructor/courses/edit\u0027 [queryParams]\u003d\"{courseid: courseTabModel.course.courseId}\"\u003e View / Edit"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/a\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cng-container *ngIf\u003d\"courseTabModel.instructorPrivilege.canModifyCourse\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003ca class\u003d\"btn btn-light btn-sm dropdown-item\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                     ngbTooltip\u003d\"Delete the course and its corresponding students and sessions\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                     (click)\u003d\"openModal(courseDeleteModal); $event.stopPropagation()\"\u003e Delete"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/a\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/ng-container\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/div\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/span\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003ci class\u003d\"fas fa-chevron-down\" *ngIf\u003d\"!courseTabModel.isTabExpanded\"\u003e\u003c/i\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003ci class\u003d\"fas fa-chevron-up\" *ngIf\u003d\"courseTabModel.isTabExpanded\"\u003e\u003c/i\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/div\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/div\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cng-template #errorLoadingFeedbackSessions\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "      Error loading feedback sessions. Click here to retry."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/ng-template\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cng-template #courseDeleteModal let-modal\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cdiv class\u003d\"modal-header bg-warning\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ch5 class\u003d\"modal-title\"\u003e\u003ci class\u003d\"fas fa-exclamation-circle\"\u003e\u003c/i\u003e Warning: Confirm moving course to Recycle Bin \u003c/h5\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cbutton type\u003d\"button\" class\u003d\"close\" (click)\u003d\"modal.dismiss()\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003ci class\u003d\"fas fa-times\"\u003e\u003c/i\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/button\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/div\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cdiv class\u003d\"modal-body\"\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Are you sure you want to delete the course: {{courseTabModel.course.courseId}}?"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        This action can be reverted by going to the \"Courses\" tab and restoring the desired course(s)."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/div\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cdiv class\u003d\"modal-footer\"\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cbutton type\u003d\"button\" class\u003d\"btn btn-light\" (click)\u003d\"modal.dismiss()\"\u003eNo, cancel the operation\u003c/button\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cbutton type\u003d\"button\" class\u003d\"btn btn-warning\" (click)\u003d\"deleteCourse(courseTabModel.course.courseId); modal.close()\"\u003eYes\u003c/button\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/div\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/ng-template\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cng-template #courseArchiveModal let-modal\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cdiv class\u003d\"modal-header bg-info\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ch5 class\u003d\"modal-title\"\u003e\u003ci class\u003d\"fas fa-exclamation-circle\"\u003e\u003c/i\u003e Confirm archiving course \u003c/h5\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cbutton type\u003d\"button\" class\u003d\"close\" (click)\u003d\"modal.dismiss()\"\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003ci class\u003d\"fas fa-times\"\u003e\u003c/i\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/button\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/div\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cdiv class\u003d\"modal-body\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Are you sure you want to archive {{courseTabModel.course.courseId}}?"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        This action can be reverted by going to the \"Courses\" tab and unarchiving the desired course(s)."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/div\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cdiv class\u003d\"modal-footer\"\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cbutton type\u003d\"button\" class\u003d\"btn btn-light\" (click)\u003d\"modal.dismiss()\"\u003eNo, cancel the operation\u003c/button\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cbutton type\u003d\"button\" class\u003d\"btn btn-warning\" (click)\u003d\"archiveCourse(courseTabModel.course.courseId); modal.close()\"\u003eYes\u003c/button\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/div\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/ng-template\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cdiv class\u003d\"card-body padding-0\" *ngIf\u003d\"courseTabModel.isTabExpanded\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003ctm-sessions-table"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "          [sessionsTableRowModels]\u003d\"courseTabModel.sessionsTableRowModels\" [sessionsTableRowModelsSortBy]\u003d\"courseTabModel.sessionsTableRowModelsSortBy\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "          [sessionsTableRowModelsSortOrder]\u003d\"courseTabModel.sessionsTableRowModelsSortOrder\" [courseCandidates]\u003d\"courseCandidates\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "          [headerColorScheme]\u003d\"SessionsTableHeaderColorScheme.WHITE\" [columnsToShow]\u003d\"[ SessionsTableColumn.START_DATE, SessionsTableColumn.END_DATE ]\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "          (sortSessionsTableRowModelsEvent)\u003d\"sortSessionsTableRowModelsEvent(idx, $event)\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "          (loadResponseRateEvent)\u003d\"loadResponseRateEventHandler(idx, $event)\" (editSessionEvent)\u003d\"editSessionEventHandler(idx, $event)\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "          (moveSessionToRecycleBinEvent)\u003d\"moveSessionToRecycleBinEventHandler(idx, $event)\" (copySessionEvent)\u003d\"copySessionEventHandler(idx, $event)\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "          (submitSessionAsInstructorEvent)\u003d\"submitSessionAsInstructorEventHandler(idx, $event)\" (viewSessionResultEvent)\u003d\"viewSessionResultEventHandler(idx, $event)\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "          (publishSessionEvent)\u003d\"publishSessionEventHandler(idx, $event)\" (unpublishSessionEvent)\u003d\"unpublishSessionEventHandler(idx, $event)\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "          (resendResultsLinkToStudentsEvent)\u003d\"resendResultsLinkToStudentsEventHandler(idx, $event)\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "          (sendRemindersToStudentsEvent)\u003d\"sendRemindersToStudentsEventHandler(idx, $event)\"\u003e\u003c/tm-sessions-table\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 4,
      "-": 152
    }
  }
]
